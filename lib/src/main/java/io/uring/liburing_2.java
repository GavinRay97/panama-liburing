// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class liburing_2 extends liburing_1 {

    public static MethodHandle io_uring_prep_poll_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_poll_remove$MH,"io_uring_prep_poll_remove");
    }
    public static void io_uring_prep_poll_remove ( Addressable sqe,  long user_data) {
        var mh$ = io_uring_prep_poll_remove$MH();
        try {
            mh$.invokeExact(sqe, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_poll_update$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_poll_update$MH,"io_uring_prep_poll_update");
    }
    public static void io_uring_prep_poll_update ( Addressable sqe,  long old_user_data,  long new_user_data,  int poll_mask,  int flags) {
        var mh$ = io_uring_prep_poll_update$MH();
        try {
            mh$.invokeExact(sqe, old_user_data, new_user_data, poll_mask, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_fsync$MH,"io_uring_prep_fsync");
    }
    public static void io_uring_prep_fsync ( Addressable sqe,  int fd,  int fsync_flags) {
        var mh$ = io_uring_prep_fsync$MH();
        try {
            mh$.invokeExact(sqe, fd, fsync_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_nop$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_nop$MH,"io_uring_prep_nop");
    }
    public static void io_uring_prep_nop ( Addressable sqe) {
        var mh$ = io_uring_prep_nop$MH();
        try {
            mh$.invokeExact(sqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_timeout$MH,"io_uring_prep_timeout");
    }
    public static void io_uring_prep_timeout ( Addressable sqe,  Addressable ts,  int count,  int flags) {
        var mh$ = io_uring_prep_timeout$MH();
        try {
            mh$.invokeExact(sqe, ts, count, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_timeout_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$73.io_uring_prep_timeout_remove$MH,"io_uring_prep_timeout_remove");
    }
    public static void io_uring_prep_timeout_remove ( Addressable sqe,  long user_data,  int flags) {
        var mh$ = io_uring_prep_timeout_remove$MH();
        try {
            mh$.invokeExact(sqe, user_data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_timeout_update$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_timeout_update$MH,"io_uring_prep_timeout_update");
    }
    public static void io_uring_prep_timeout_update ( Addressable sqe,  Addressable ts,  long user_data,  int flags) {
        var mh$ = io_uring_prep_timeout_update$MH();
        try {
            mh$.invokeExact(sqe, ts, user_data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_accept$MH,"io_uring_prep_accept");
    }
    public static void io_uring_prep_accept ( Addressable sqe,  int fd,  Addressable addr,  Addressable addrlen,  int flags) {
        var mh$ = io_uring_prep_accept$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_accept_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_accept_direct$MH,"io_uring_prep_accept_direct");
    }
    public static void io_uring_prep_accept_direct ( Addressable sqe,  int fd,  Addressable addr,  Addressable addrlen,  int flags,  int file_index) {
        var mh$ = io_uring_prep_accept_direct$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen, flags, file_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_multishot_accept$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_multishot_accept$MH,"io_uring_prep_multishot_accept");
    }
    public static void io_uring_prep_multishot_accept ( Addressable sqe,  int fd,  Addressable addr,  Addressable addrlen,  int flags) {
        var mh$ = io_uring_prep_multishot_accept$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_multishot_accept_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_multishot_accept_direct$MH,"io_uring_prep_multishot_accept_direct");
    }
    public static void io_uring_prep_multishot_accept_direct ( Addressable sqe,  int fd,  Addressable addr,  Addressable addrlen,  int flags) {
        var mh$ = io_uring_prep_multishot_accept_direct$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_cancel64$MH() {
        return RuntimeHelper.requireNonNull(constants$74.io_uring_prep_cancel64$MH,"io_uring_prep_cancel64");
    }
    public static void io_uring_prep_cancel64 ( Addressable sqe,  long user_data,  int flags) {
        var mh$ = io_uring_prep_cancel64$MH();
        try {
            mh$.invokeExact(sqe, user_data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_cancel$MH,"io_uring_prep_cancel");
    }
    public static void io_uring_prep_cancel ( Addressable sqe,  Addressable user_data,  int flags) {
        var mh$ = io_uring_prep_cancel$MH();
        try {
            mh$.invokeExact(sqe, user_data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_cancel_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_cancel_fd$MH,"io_uring_prep_cancel_fd");
    }
    public static void io_uring_prep_cancel_fd ( Addressable sqe,  int fd,  int flags) {
        var mh$ = io_uring_prep_cancel_fd$MH();
        try {
            mh$.invokeExact(sqe, fd, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_link_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_link_timeout$MH,"io_uring_prep_link_timeout");
    }
    public static void io_uring_prep_link_timeout ( Addressable sqe,  Addressable ts,  int flags) {
        var mh$ = io_uring_prep_link_timeout$MH();
        try {
            mh$.invokeExact(sqe, ts, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_connect$MH,"io_uring_prep_connect");
    }
    public static void io_uring_prep_connect ( Addressable sqe,  int fd,  Addressable addr,  int addrlen) {
        var mh$ = io_uring_prep_connect$MH();
        try {
            mh$.invokeExact(sqe, fd, addr, addrlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_files_update$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_files_update$MH,"io_uring_prep_files_update");
    }
    public static void io_uring_prep_files_update ( Addressable sqe,  Addressable fds,  int nr_fds,  int offset) {
        var mh$ = io_uring_prep_files_update$MH();
        try {
            mh$.invokeExact(sqe, fds, nr_fds, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$75.io_uring_prep_fallocate$MH,"io_uring_prep_fallocate");
    }
    public static void io_uring_prep_fallocate ( Addressable sqe,  int fd,  int mode,  long offset,  long len) {
        var mh$ = io_uring_prep_fallocate$MH();
        try {
            mh$.invokeExact(sqe, fd, mode, offset, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_openat$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_openat$MH,"io_uring_prep_openat");
    }
    public static void io_uring_prep_openat ( Addressable sqe,  int dfd,  Addressable path,  int flags,  int mode) {
        var mh$ = io_uring_prep_openat$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, flags, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_openat_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_openat_direct$MH,"io_uring_prep_openat_direct");
    }
    public static void io_uring_prep_openat_direct ( Addressable sqe,  int dfd,  Addressable path,  int flags,  int mode,  int file_index) {
        var mh$ = io_uring_prep_openat_direct$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, flags, mode, file_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_close$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_close$MH,"io_uring_prep_close");
    }
    public static void io_uring_prep_close ( Addressable sqe,  int fd) {
        var mh$ = io_uring_prep_close$MH();
        try {
            mh$.invokeExact(sqe, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_close_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_close_direct$MH,"io_uring_prep_close_direct");
    }
    public static void io_uring_prep_close_direct ( Addressable sqe,  int file_index) {
        var mh$ = io_uring_prep_close_direct$MH();
        try {
            mh$.invokeExact(sqe, file_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_read$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_read$MH,"io_uring_prep_read");
    }
    public static void io_uring_prep_read ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset) {
        var mh$ = io_uring_prep_read$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_write$MH() {
        return RuntimeHelper.requireNonNull(constants$76.io_uring_prep_write$MH,"io_uring_prep_write");
    }
    public static void io_uring_prep_write ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset) {
        var mh$ = io_uring_prep_write$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_statx$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_statx$MH,"io_uring_prep_statx");
    }
    public static void io_uring_prep_statx ( Addressable sqe,  int dfd,  Addressable path,  int flags,  int mask,  Addressable statxbuf) {
        var mh$ = io_uring_prep_statx$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, flags, mask, statxbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_fadvise$MH,"io_uring_prep_fadvise");
    }
    public static void io_uring_prep_fadvise ( Addressable sqe,  int fd,  long offset,  long len,  int advice) {
        var mh$ = io_uring_prep_fadvise$MH();
        try {
            mh$.invokeExact(sqe, fd, offset, len, advice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_madvise$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_madvise$MH,"io_uring_prep_madvise");
    }
    public static void io_uring_prep_madvise ( Addressable sqe,  Addressable addr,  long length,  int advice) {
        var mh$ = io_uring_prep_madvise$MH();
        try {
            mh$.invokeExact(sqe, addr, length, advice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_send$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_send$MH,"io_uring_prep_send");
    }
    public static void io_uring_prep_send ( Addressable sqe,  int sockfd,  Addressable buf,  long len,  int flags) {
        var mh$ = io_uring_prep_send$MH();
        try {
            mh$.invokeExact(sqe, sockfd, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_recv$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_recv$MH,"io_uring_prep_recv");
    }
    public static void io_uring_prep_recv ( Addressable sqe,  int sockfd,  Addressable buf,  long len,  int flags) {
        var mh$ = io_uring_prep_recv$MH();
        try {
            mh$.invokeExact(sqe, sockfd, buf, len, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_openat2$MH() {
        return RuntimeHelper.requireNonNull(constants$77.io_uring_prep_openat2$MH,"io_uring_prep_openat2");
    }
    public static void io_uring_prep_openat2 ( Addressable sqe,  int dfd,  Addressable path,  Addressable how) {
        var mh$ = io_uring_prep_openat2$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_openat2_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_openat2_direct$MH,"io_uring_prep_openat2_direct");
    }
    public static void io_uring_prep_openat2_direct ( Addressable sqe,  int dfd,  Addressable path,  Addressable how,  int file_index) {
        var mh$ = io_uring_prep_openat2_direct$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, how, file_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_epoll_ctl$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_epoll_ctl$MH,"io_uring_prep_epoll_ctl");
    }
    public static void io_uring_prep_epoll_ctl ( Addressable sqe,  int epfd,  int fd,  int op,  Addressable ev) {
        var mh$ = io_uring_prep_epoll_ctl$MH();
        try {
            mh$.invokeExact(sqe, epfd, fd, op, ev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_provide_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_provide_buffers$MH,"io_uring_prep_provide_buffers");
    }
    public static void io_uring_prep_provide_buffers ( Addressable sqe,  Addressable addr,  int len,  int nr,  int bgid,  int bid) {
        var mh$ = io_uring_prep_provide_buffers$MH();
        try {
            mh$.invokeExact(sqe, addr, len, nr, bgid, bid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_remove_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_remove_buffers$MH,"io_uring_prep_remove_buffers");
    }
    public static void io_uring_prep_remove_buffers ( Addressable sqe,  int nr,  int bgid) {
        var mh$ = io_uring_prep_remove_buffers$MH();
        try {
            mh$.invokeExact(sqe, nr, bgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_shutdown$MH,"io_uring_prep_shutdown");
    }
    public static void io_uring_prep_shutdown ( Addressable sqe,  int fd,  int how) {
        var mh$ = io_uring_prep_shutdown$MH();
        try {
            mh$.invokeExact(sqe, fd, how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$78.io_uring_prep_unlinkat$MH,"io_uring_prep_unlinkat");
    }
    public static void io_uring_prep_unlinkat ( Addressable sqe,  int dfd,  Addressable path,  int flags) {
        var mh$ = io_uring_prep_unlinkat$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_unlink$MH,"io_uring_prep_unlink");
    }
    public static void io_uring_prep_unlink ( Addressable sqe,  Addressable path,  int flags) {
        var mh$ = io_uring_prep_unlink$MH();
        try {
            mh$.invokeExact(sqe, path, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_renameat$MH,"io_uring_prep_renameat");
    }
    public static void io_uring_prep_renameat ( Addressable sqe,  int olddfd,  Addressable oldpath,  int newdfd,  Addressable newpath,  int flags) {
        var mh$ = io_uring_prep_renameat$MH();
        try {
            mh$.invokeExact(sqe, olddfd, oldpath, newdfd, newpath, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_rename$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_rename$MH,"io_uring_prep_rename");
    }
    public static void io_uring_prep_rename ( Addressable sqe,  Addressable oldpath,  Addressable newpath) {
        var mh$ = io_uring_prep_rename$MH();
        try {
            mh$.invokeExact(sqe, oldpath, newpath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_sync_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_sync_file_range$MH,"io_uring_prep_sync_file_range");
    }
    public static void io_uring_prep_sync_file_range ( Addressable sqe,  int fd,  int len,  long offset,  int flags) {
        var mh$ = io_uring_prep_sync_file_range$MH();
        try {
            mh$.invokeExact(sqe, fd, len, offset, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_mkdirat$MH,"io_uring_prep_mkdirat");
    }
    public static void io_uring_prep_mkdirat ( Addressable sqe,  int dfd,  Addressable path,  int mode) {
        var mh$ = io_uring_prep_mkdirat$MH();
        try {
            mh$.invokeExact(sqe, dfd, path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$79.io_uring_prep_mkdir$MH,"io_uring_prep_mkdir");
    }
    public static void io_uring_prep_mkdir ( Addressable sqe,  Addressable path,  int mode) {
        var mh$ = io_uring_prep_mkdir$MH();
        try {
            mh$.invokeExact(sqe, path, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_symlinkat$MH,"io_uring_prep_symlinkat");
    }
    public static void io_uring_prep_symlinkat ( Addressable sqe,  Addressable target,  int newdirfd,  Addressable linkpath) {
        var mh$ = io_uring_prep_symlinkat$MH();
        try {
            mh$.invokeExact(sqe, target, newdirfd, linkpath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_symlink$MH,"io_uring_prep_symlink");
    }
    public static void io_uring_prep_symlink ( Addressable sqe,  Addressable target,  Addressable linkpath) {
        var mh$ = io_uring_prep_symlink$MH();
        try {
            mh$.invokeExact(sqe, target, linkpath);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_linkat$MH,"io_uring_prep_linkat");
    }
    public static void io_uring_prep_linkat ( Addressable sqe,  int olddfd,  Addressable oldpath,  int newdfd,  Addressable newpath,  int flags) {
        var mh$ = io_uring_prep_linkat$MH();
        try {
            mh$.invokeExact(sqe, olddfd, oldpath, newdfd, newpath, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_link$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_link$MH,"io_uring_prep_link");
    }
    public static void io_uring_prep_link ( Addressable sqe,  Addressable oldpath,  Addressable newpath,  int flags) {
        var mh$ = io_uring_prep_link$MH();
        try {
            mh$.invokeExact(sqe, oldpath, newpath, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_msg_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_msg_ring$MH,"io_uring_prep_msg_ring");
    }
    public static void io_uring_prep_msg_ring ( Addressable sqe,  int fd,  int len,  long data,  int flags) {
        var mh$ = io_uring_prep_msg_ring$MH();
        try {
            mh$.invokeExact(sqe, fd, len, data, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_getxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$80.io_uring_prep_getxattr$MH,"io_uring_prep_getxattr");
    }
    public static void io_uring_prep_getxattr ( Addressable sqe,  Addressable name,  Addressable value,  Addressable path,  long len) {
        var mh$ = io_uring_prep_getxattr$MH();
        try {
            mh$.invokeExact(sqe, name, value, path, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_setxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_setxattr$MH,"io_uring_prep_setxattr");
    }
    public static void io_uring_prep_setxattr ( Addressable sqe,  Addressable name,  Addressable value,  Addressable path,  int flags,  long len) {
        var mh$ = io_uring_prep_setxattr$MH();
        try {
            mh$.invokeExact(sqe, name, value, path, flags, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fgetxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_fgetxattr$MH,"io_uring_prep_fgetxattr");
    }
    public static void io_uring_prep_fgetxattr ( Addressable sqe,  int fd,  Addressable name,  Addressable value,  long len) {
        var mh$ = io_uring_prep_fgetxattr$MH();
        try {
            mh$.invokeExact(sqe, fd, name, value, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_fsetxattr$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_fsetxattr$MH,"io_uring_prep_fsetxattr");
    }
    public static void io_uring_prep_fsetxattr ( Addressable sqe,  int fd,  Addressable name,  Addressable value,  int flags,  long len) {
        var mh$ = io_uring_prep_fsetxattr$MH();
        try {
            mh$.invokeExact(sqe, fd, name, value, flags, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_socket$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_socket$MH,"io_uring_prep_socket");
    }
    public static void io_uring_prep_socket ( Addressable sqe,  int domain,  int type,  int protocol,  int flags) {
        var mh$ = io_uring_prep_socket$MH();
        try {
            mh$.invokeExact(sqe, domain, type, protocol, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_socket_direct$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_socket_direct$MH,"io_uring_prep_socket_direct");
    }
    public static void io_uring_prep_socket_direct ( Addressable sqe,  int domain,  int type,  int protocol,  int file_index,  int flags) {
        var mh$ = io_uring_prep_socket_direct$MH();
        try {
            mh$.invokeExact(sqe, domain, type, protocol, file_index, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_socket_direct_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$81.io_uring_prep_socket_direct_alloc$MH,"io_uring_prep_socket_direct_alloc");
    }
    public static void io_uring_prep_socket_direct_alloc ( Addressable sqe,  int domain,  int type,  int protocol,  int flags) {
        var mh$ = io_uring_prep_socket_direct_alloc$MH();
        try {
            mh$.invokeExact(sqe, domain, type, protocol, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sq_ready$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_sq_ready$MH,"io_uring_sq_ready");
    }
    public static int io_uring_sq_ready ( Addressable ring) {
        var mh$ = io_uring_sq_ready$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sq_space_left$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_sq_space_left$MH,"io_uring_sq_space_left");
    }
    public static int io_uring_sq_space_left ( Addressable ring) {
        var mh$ = io_uring_sq_space_left$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqring_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_sqring_wait$MH,"io_uring_sqring_wait");
    }
    public static int io_uring_sqring_wait ( Addressable ring) {
        var mh$ = io_uring_sqring_wait$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_ready$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_cq_ready$MH,"io_uring_cq_ready");
    }
    public static int io_uring_cq_ready ( Addressable ring) {
        var mh$ = io_uring_cq_ready$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_eventfd_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_cq_eventfd_enabled$MH,"io_uring_cq_eventfd_enabled");
    }
    public static boolean io_uring_cq_eventfd_enabled ( Addressable ring) {
        var mh$ = io_uring_cq_eventfd_enabled$MH();
        try {
            return (boolean)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_eventfd_toggle$MH() {
        return RuntimeHelper.requireNonNull(constants$82.io_uring_cq_eventfd_toggle$MH,"io_uring_cq_eventfd_toggle");
    }
    public static int io_uring_cq_eventfd_toggle ( Addressable ring,  boolean enabled) {
        var mh$ = io_uring_cq_eventfd_toggle$MH();
        try {
            return (int)mh$.invokeExact(ring, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqe_nr$MH() {
        return RuntimeHelper.requireNonNull(constants$83.io_uring_wait_cqe_nr$MH,"io_uring_wait_cqe_nr");
    }
    public static int io_uring_wait_cqe_nr ( Addressable ring,  Addressable cqe_ptr,  int wait_nr) {
        var mh$ = io_uring_wait_cqe_nr$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, wait_nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_peek_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$83.__io_uring_peek_cqe$MH,"__io_uring_peek_cqe");
    }
    public static int __io_uring_peek_cqe ( Addressable ring,  Addressable cqe_ptr,  Addressable nr_available) {
        var mh$ = __io_uring_peek_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, nr_available);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_peek_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$83.io_uring_peek_cqe$MH,"io_uring_peek_cqe");
    }
    public static int io_uring_peek_cqe ( Addressable ring,  Addressable cqe_ptr) {
        var mh$ = io_uring_peek_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$83.io_uring_wait_cqe$MH,"io_uring_wait_cqe");
    }
    public static int io_uring_wait_cqe ( Addressable ring,  Addressable cqe_ptr) {
        var mh$ = io_uring_wait_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _io_uring_get_sqe$MH() {
        return RuntimeHelper.requireNonNull(constants$83._io_uring_get_sqe$MH,"_io_uring_get_sqe");
    }
    public static MemoryAddress _io_uring_get_sqe ( Addressable ring) {
        var mh$ = _io_uring_get_sqe$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_buf_ring_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$83.io_uring_buf_ring_mask$MH,"io_uring_buf_ring_mask");
    }
    public static int io_uring_buf_ring_mask ( int ring_entries) {
        var mh$ = io_uring_buf_ring_mask$MH();
        try {
            return (int)mh$.invokeExact(ring_entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_buf_ring_init$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_buf_ring_init$MH,"io_uring_buf_ring_init");
    }
    public static void io_uring_buf_ring_init ( Addressable br) {
        var mh$ = io_uring_buf_ring_init$MH();
        try {
            mh$.invokeExact(br);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_buf_ring_add$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_buf_ring_add$MH,"io_uring_buf_ring_add");
    }
    public static void io_uring_buf_ring_add ( Addressable br,  Addressable addr,  int len,  short bid,  int mask,  int buf_offset) {
        var mh$ = io_uring_buf_ring_add$MH();
        try {
            mh$.invokeExact(br, addr, len, bid, mask, buf_offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_buf_ring_advance$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_buf_ring_advance$MH,"io_uring_buf_ring_advance");
    }
    public static void io_uring_buf_ring_advance ( Addressable br,  int count) {
        var mh$ = io_uring_buf_ring_advance$MH();
        try {
            mh$.invokeExact(br, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_buf_ring_cq_advance$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_buf_ring_cq_advance$MH,"io_uring_buf_ring_cq_advance");
    }
    public static void io_uring_buf_ring_cq_advance ( Addressable ring,  Addressable br,  int count) {
        var mh$ = io_uring_buf_ring_cq_advance$MH();
        try {
            mh$.invokeExact(ring, br, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_get_sqe$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_get_sqe$MH,"io_uring_get_sqe");
    }
    public static MemoryAddress io_uring_get_sqe ( Addressable ring) {
        var mh$ = io_uring_get_sqe$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_mlock_size$MH() {
        return RuntimeHelper.requireNonNull(constants$84.io_uring_mlock_size$MH,"io_uring_mlock_size");
    }
    public static long io_uring_mlock_size ( int entries,  int flags) {
        var mh$ = io_uring_mlock_size$MH();
        try {
            return (long)mh$.invokeExact(entries, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_mlock_size_params$MH() {
        return RuntimeHelper.requireNonNull(constants$85.io_uring_mlock_size_params$MH,"io_uring_mlock_size_params");
    }
    public static long io_uring_mlock_size_params ( int entries,  Addressable p) {
        var mh$ = io_uring_mlock_size_params$MH();
        try {
            return (long)mh$.invokeExact(entries, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$85.NULL$ADDR;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int INT_FAST16_WIDTH() {
        return (int)64L;
    }
    public static int UINT_FAST16_WIDTH() {
        return (int)64L;
    }
    public static int INT_FAST32_WIDTH() {
        return (int)64L;
    }
    public static int UINT_FAST32_WIDTH() {
        return (int)64L;
    }
    public static int INTPTR_WIDTH() {
        return (int)64L;
    }
    public static int UINTPTR_WIDTH() {
        return (int)64L;
    }
    public static int PTRDIFF_WIDTH() {
        return (int)64L;
    }
    public static int SIZE_WIDTH() {
        return (int)64L;
    }
    public static int ATOMIC_BOOL_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_CHAR_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_CHAR16_T_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_CHAR32_T_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_WCHAR_T_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_SHORT_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_INT_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_LONG_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_LLONG_LOCK_FREE() {
        return (int)2L;
    }
    public static int ATOMIC_POINTER_LOCK_FREE() {
        return (int)2L;
    }
    public static int _IOC_NRMASK() {
        return (int)255L;
    }
    public static int _IOC_TYPEMASK() {
        return (int)255L;
    }
    public static int _IOC_SIZEMASK() {
        return (int)16383L;
    }
    public static int _IOC_DIRMASK() {
        return (int)3L;
    }
    public static int _IOC_TYPESHIFT() {
        return (int)8L;
    }
    public static int _IOC_SIZESHIFT() {
        return (int)16L;
    }
    public static int _IOC_DIRSHIFT() {
        return (int)30L;
    }
    public static int _IOC_NONE() {
        return (int)0L;
    }
    public static int _IOC_WRITE() {
        return (int)1L;
    }
    public static int _IOC_READ() {
        return (int)2L;
    }
    public static int IOC_IN() {
        return (int)1073741824L;
    }
    public static int IOC_OUT() {
        return (int)2147483648L;
    }
    public static int IOC_INOUT() {
        return (int)3221225472L;
    }
    public static int IOCSIZE_MASK() {
        return (int)1073676288L;
    }
    public static int IOCSIZE_SHIFT() {
        return (int)16L;
    }
    public static MemorySegment FSCRYPT_KEY_DESC_PREFIX() {
        return constants$85.FSCRYPT_KEY_DESC_PREFIX$SEGMENT;
    }
    public static long FS_IOC_SET_ENCRYPTION_POLICY() {
        return 2148296211L;
    }
    public static long FS_IOC_GET_ENCRYPTION_PWSALT() {
        return 1074816532L;
    }
    public static long FS_IOC_GET_ENCRYPTION_POLICY() {
        return 1074554389L;
    }
    public static long FS_IOC_GET_ENCRYPTION_POLICY_EX() {
        return 3221841430L;
    }
    public static long FS_IOC_ADD_ENCRYPTION_KEY() {
        return 3226494487L;
    }
    public static long FS_IOC_REMOVE_ENCRYPTION_KEY() {
        return 3225445912L;
    }
    public static long FS_IOC_REMOVE_ENCRYPTION_KEY_ALL_USERS() {
        return 3225445913L;
    }
    public static long FS_IOC_GET_ENCRYPTION_KEY_STATUS() {
        return 3229640218L;
    }
    public static long FS_IOC_GET_ENCRYPTION_NONCE() {
        return 2148558363L;
    }
    public static int FS_KEY_DESCRIPTOR_SIZE() {
        return (int)8L;
    }
    public static int FS_POLICY_FLAGS_PAD_4() {
        return (int)0L;
    }
    public static int FS_POLICY_FLAGS_PAD_8() {
        return (int)1L;
    }
    public static int FS_POLICY_FLAGS_PAD_16() {
        return (int)2L;
    }
    public static int FS_POLICY_FLAGS_PAD_32() {
        return (int)3L;
    }
    public static int FS_POLICY_FLAGS_PAD_MASK() {
        return (int)3L;
    }
    public static int FS_POLICY_FLAG_DIRECT_KEY() {
        return (int)4L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_XTS() {
        return (int)1L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_CTS() {
        return (int)4L;
    }
    public static int FS_ENCRYPTION_MODE_AES_128_CBC() {
        return (int)5L;
    }
    public static int FS_ENCRYPTION_MODE_AES_128_CTS() {
        return (int)6L;
    }
    public static int FS_ENCRYPTION_MODE_ADIANTUM() {
        return (int)9L;
    }
    public static MemorySegment FS_KEY_DESC_PREFIX() {
        return constants$85.FS_KEY_DESC_PREFIX$SEGMENT;
    }
    public static int FS_KEY_DESC_PREFIX_SIZE() {
        return (int)8L;
    }
    public static int FS_MAX_KEY_SIZE() {
        return (int)64L;
    }
    public static int MS_POSIXACL() {
        return (int)65536L;
    }
    public static int MS_UNBINDABLE() {
        return (int)131072L;
    }
    public static int MS_PRIVATE() {
        return (int)262144L;
    }
    public static int MS_SLAVE() {
        return (int)524288L;
    }
    public static int MS_SHARED() {
        return (int)1048576L;
    }
    public static int MS_RELATIME() {
        return (int)2097152L;
    }
    public static int MS_KERNMOUNT() {
        return (int)4194304L;
    }
    public static int MS_I_VERSION() {
        return (int)8388608L;
    }
    public static int MS_STRICTATIME() {
        return (int)16777216L;
    }
    public static int MS_LAZYTIME() {
        return (int)33554432L;
    }
    public static int MS_SUBMOUNT() {
        return (int)67108864L;
    }
    public static int MS_NOREMOTELOCK() {
        return (int)134217728L;
    }
    public static int MS_NOSEC() {
        return (int)268435456L;
    }
    public static int MS_BORN() {
        return (int)536870912L;
    }
    public static int MS_ACTIVE() {
        return (int)1073741824L;
    }
    public static int MS_NOUSER() {
        return (int)-2147483648L;
    }
    public static int MS_RMT_MASK() {
        return (int)41943121L;
    }
    public static int MS_MGC_VAL() {
        return (int)3236757504L;
    }
    public static int MS_MGC_MSK() {
        return (int)4294901760L;
    }
    public static int OPEN_TREE_CLOEXEC() {
        return (int)524288L;
    }
    public static int BLOCK_SIZE() {
        return (int)1024L;
    }
    public static int SEEK_MAX() {
        return (int)4L;
    }
    public static int RENAME_NOREPLACE() {
        return (int)1L;
    }
    public static int RENAME_EXCHANGE() {
        return (int)2L;
    }
    public static int RENAME_WHITEOUT() {
        return (int)4L;
    }
    public static int FS_XFLAG_HASATTR() {
        return (int)2147483648L;
    }
    public static int BLKROSET() {
        return (int)4701L;
    }
    public static int BLKROGET() {
        return (int)4702L;
    }
    public static int BLKRRPART() {
        return (int)4703L;
    }
    public static int BLKGETSIZE() {
        return (int)4704L;
    }
    public static int BLKFLSBUF() {
        return (int)4705L;
    }
    public static int BLKRASET() {
        return (int)4706L;
    }
    public static int BLKRAGET() {
        return (int)4707L;
    }
    public static int BLKFRASET() {
        return (int)4708L;
    }
    public static int BLKFRAGET() {
        return (int)4709L;
    }
    public static int BLKSECTSET() {
        return (int)4710L;
    }
    public static int BLKSECTGET() {
        return (int)4711L;
    }
    public static int BLKSSZGET() {
        return (int)4712L;
    }
    public static long BLKBSZGET() {
        return 2148012656L;
    }
    public static long BLKBSZSET() {
        return 1074270833L;
    }
    public static long BLKGETSIZE64() {
        return 2148012658L;
    }
    public static int BLKTRACESTART() {
        return (int)4724L;
    }
    public static int BLKTRACESTOP() {
        return (int)4725L;
    }
    public static int BLKTRACETEARDOWN() {
        return (int)4726L;
    }
    public static int BLKDISCARD() {
        return (int)4727L;
    }
    public static int BLKIOMIN() {
        return (int)4728L;
    }
    public static int BLKIOOPT() {
        return (int)4729L;
    }
    public static int BLKALIGNOFF() {
        return (int)4730L;
    }
    public static int BLKPBSZGET() {
        return (int)4731L;
    }
    public static int BLKDISCARDZEROES() {
        return (int)4732L;
    }
    public static int BLKSECDISCARD() {
        return (int)4733L;
    }
    public static int BLKROTATIONAL() {
        return (int)4734L;
    }
    public static int BLKZEROOUT() {
        return (int)4735L;
    }
    public static long BLKGETDISKSEQ() {
        return 2148012672L;
    }
    public static int FIBMAP() {
        return (int)1L;
    }
    public static int FIGETBSZ() {
        return (int)2L;
    }
    public static long FIFREEZE() {
        return 3221510263L;
    }
    public static long FITHAW() {
        return 3221510264L;
    }
    public static long FITRIM() {
        return 3222820985L;
    }
    public static long FICLONE() {
        return 1074041865L;
    }
    public static long FICLONERANGE() {
        return 1075876877L;
    }
    public static long FIDEDUPERANGE() {
        return 3222836278L;
    }
    public static long FS_IOC_GETFLAGS() {
        return 2148034049L;
    }
    public static long FS_IOC_SETFLAGS() {
        return 1074292226L;
    }
    public static long FS_IOC_GETVERSION() {
        return 2148038145L;
    }
    public static long FS_IOC_SETVERSION() {
        return 1074296322L;
    }
    public static long FS_IOC32_GETFLAGS() {
        return 2147771905L;
    }
    public static long FS_IOC32_SETFLAGS() {
        return 1074030082L;
    }
    public static long FS_IOC32_GETVERSION() {
        return 2147776001L;
    }
    public static long FS_IOC32_SETVERSION() {
        return 1074034178L;
    }
    public static long FS_IOC_FSGETXATTR() {
        return 2149341215L;
    }
    public static long FS_IOC_FSSETXATTR() {
        return 1075599392L;
    }
    public static long FS_IOC_GETFSLABEL() {
        return 2164298801L;
    }
    public static long FS_IOC_SETFSLABEL() {
        return 1090556978L;
    }
    public static int FS_RESERVED_FL() {
        return (int)2147483648L;
    }
    public static int SYNC_FILE_RANGE_WRITE_AND_WAIT() {
        return (int)7L;
    }
    public static int RWF_SUPPORTED() {
        return (int)31L;
    }
    public static int IORING_FILE_INDEX_ALLOC() {
        return (int)4294967295L;
    }
    public static int IOSQE_FIXED_FILE() {
        return (int)1L;
    }
    public static int IOSQE_IO_DRAIN() {
        return (int)2L;
    }
    public static int IOSQE_IO_LINK() {
        return (int)4L;
    }
    public static int IOSQE_IO_HARDLINK() {
        return (int)8L;
    }
    public static int IOSQE_ASYNC() {
        return (int)16L;
    }
    public static int IOSQE_BUFFER_SELECT() {
        return (int)32L;
    }
    public static int IOSQE_CQE_SKIP_SUCCESS() {
        return (int)64L;
    }
    public static int IORING_SETUP_IOPOLL() {
        return (int)1L;
    }
    public static int IORING_SETUP_SQPOLL() {
        return (int)2L;
    }
    public static int IORING_SETUP_SQ_AFF() {
        return (int)4L;
    }
    public static int IORING_SETUP_CQSIZE() {
        return (int)8L;
    }
    public static int IORING_SETUP_CLAMP() {
        return (int)16L;
    }
    public static int IORING_SETUP_ATTACH_WQ() {
        return (int)32L;
    }
    public static int IORING_SETUP_R_DISABLED() {
        return (int)64L;
    }
    public static int IORING_SETUP_SUBMIT_ALL() {
        return (int)128L;
    }
    public static int IORING_SETUP_COOP_TASKRUN() {
        return (int)256L;
    }
    public static int IORING_SETUP_TASKRUN_FLAG() {
        return (int)512L;
    }
    public static int IORING_SETUP_SQE128() {
        return (int)1024L;
    }
    public static int IORING_SETUP_CQE32() {
        return (int)2048L;
    }
    public static int IORING_FSYNC_DATASYNC() {
        return (int)1L;
    }
    public static int IORING_TIMEOUT_ABS() {
        return (int)1L;
    }
    public static int IORING_TIMEOUT_UPDATE() {
        return (int)2L;
    }
    public static int IORING_TIMEOUT_BOOTTIME() {
        return (int)4L;
    }
    public static int IORING_TIMEOUT_REALTIME() {
        return (int)8L;
    }
    public static int IORING_LINK_TIMEOUT_UPDATE() {
        return (int)16L;
    }
    public static int IORING_TIMEOUT_ETIME_SUCCESS() {
        return (int)32L;
    }
    public static int IORING_TIMEOUT_CLOCK_MASK() {
        return (int)12L;
    }
    public static int IORING_TIMEOUT_UPDATE_MASK() {
        return (int)18L;
    }
    public static int SPLICE_F_FD_IN_FIXED() {
        return (int)2147483648L;
    }
    public static int IORING_POLL_ADD_MULTI() {
        return (int)1L;
    }
    public static int IORING_POLL_UPDATE_EVENTS() {
        return (int)2L;
    }
    public static int IORING_POLL_UPDATE_USER_DATA() {
        return (int)4L;
    }
    public static int IORING_ASYNC_CANCEL_ALL() {
        return (int)1L;
    }
    public static int IORING_ASYNC_CANCEL_FD() {
        return (int)2L;
    }
    public static int IORING_ASYNC_CANCEL_ANY() {
        return (int)4L;
    }
    public static int IORING_RECVSEND_POLL_FIRST() {
        return (int)1L;
    }
    public static int IORING_ACCEPT_MULTISHOT() {
        return (int)1L;
    }
    public static int IORING_CQE_F_BUFFER() {
        return (int)1L;
    }
    public static int IORING_CQE_F_MORE() {
        return (int)2L;
    }
    public static int IORING_CQE_F_SOCK_NONEMPTY() {
        return (int)4L;
    }
    public static long IORING_OFF_SQ_RING() {
        return 0L;
    }
    public static long IORING_OFF_CQ_RING() {
        return 134217728L;
    }
    public static long IORING_OFF_SQES() {
        return 268435456L;
    }
    public static int IORING_SQ_NEED_WAKEUP() {
        return (int)1L;
    }
    public static int IORING_SQ_CQ_OVERFLOW() {
        return (int)2L;
    }
    public static int IORING_SQ_TASKRUN() {
        return (int)4L;
    }
    public static int IORING_CQ_EVENTFD_DISABLED() {
        return (int)1L;
    }
    public static int IORING_ENTER_GETEVENTS() {
        return (int)1L;
    }
    public static int IORING_ENTER_SQ_WAKEUP() {
        return (int)2L;
    }
    public static int IORING_ENTER_SQ_WAIT() {
        return (int)4L;
    }
    public static int IORING_ENTER_EXT_ARG() {
        return (int)8L;
    }
    public static int IORING_ENTER_REGISTERED_RING() {
        return (int)16L;
    }
    public static int IORING_FEAT_SINGLE_MMAP() {
        return (int)1L;
    }
    public static int IORING_FEAT_NODROP() {
        return (int)2L;
    }
    public static int IORING_FEAT_SUBMIT_STABLE() {
        return (int)4L;
    }
    public static int IORING_FEAT_RW_CUR_POS() {
        return (int)8L;
    }
    public static int IORING_FEAT_CUR_PERSONALITY() {
        return (int)16L;
    }
    public static int IORING_FEAT_FAST_POLL() {
        return (int)32L;
    }
    public static int IORING_FEAT_POLL_32BITS() {
        return (int)64L;
    }
    public static int IORING_FEAT_SQPOLL_NONFIXED() {
        return (int)128L;
    }
    public static int IORING_FEAT_EXT_ARG() {
        return (int)256L;
    }
    public static int IORING_FEAT_NATIVE_WORKERS() {
        return (int)512L;
    }
    public static int IORING_FEAT_RSRC_TAGS() {
        return (int)1024L;
    }
    public static int IORING_FEAT_CQE_SKIP() {
        return (int)2048L;
    }
    public static int IORING_FEAT_LINKED_FILE() {
        return (int)4096L;
    }
    public static int IORING_RSRC_REGISTER_SPARSE() {
        return (int)1L;
    }
    public static int IORING_REGISTER_FILES_SKIP() {
        return (int)-2L;
    }
    public static int IO_URING_OP_SUPPORTED() {
        return (int)1L;
    }
    public static int EWOULDBLOCK() {
        return (int)11L;
    }
    public static int EDEADLOCK() {
        return (int)35L;
    }
    public static int ENOTSUP() {
        return (int)95L;
    }
    public static int O_NDELAY() {
        return (int)2048L;
    }
    public static int O_FSYNC() {
        return (int)1052672L;
    }
    public static int __O_TMPFILE() {
        return (int)4259840L;
    }
    public static int O_LARGEFILE() {
        return (int)0L;
    }
    public static int O_DIRECTORY() {
        return (int)65536L;
    }
    public static int O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int O_CLOEXEC() {
        return (int)524288L;
    }
    public static int O_DIRECT() {
        return (int)16384L;
    }
    public static int O_NOATIME() {
        return (int)262144L;
    }
    public static int O_PATH() {
        return (int)2097152L;
    }
    public static int O_TMPFILE() {
        return (int)4259840L;
    }
    public static int O_DSYNC() {
        return (int)4096L;
    }
    public static int O_RSYNC() {
        return (int)1052672L;
    }
    public static int F_SETOWN() {
        return (int)8L;
    }
    public static int F_GETOWN() {
        return (int)9L;
    }
    public static int F_SETSIG() {
        return (int)10L;
    }
    public static int F_GETSIG() {
        return (int)11L;
    }
    public static int F_SETOWN_EX() {
        return (int)15L;
    }
    public static int F_GETOWN_EX() {
        return (int)16L;
    }
    public static int DN_MULTISHOT() {
        return (int)2147483648L;
    }
    public static int RWF_WRITE_LIFE_NOT_SET() {
        return (int)0L;
    }
    public static int FAPPEND() {
        return (int)1024L;
    }
    public static int FFSYNC() {
        return (int)1052672L;
    }
    public static int FASYNC() {
        return (int)8192L;
    }
    public static int FNONBLOCK() {
        return (int)2048L;
    }
    public static int FNDELAY() {
        return (int)2048L;
    }
    public static int POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static long UTIME_NOW() {
        return 1073741823L;
    }
    public static long UTIME_OMIT() {
        return 1073741822L;
    }
    public static int S_IFMT() {
        return (int)61440L;
    }
    public static int S_IFDIR() {
        return (int)16384L;
    }
    public static int S_IFCHR() {
        return (int)8192L;
    }
    public static int S_IFBLK() {
        return (int)24576L;
    }
    public static int S_IFREG() {
        return (int)32768L;
    }
    public static int S_IFIFO() {
        return (int)4096L;
    }
    public static int S_IFLNK() {
        return (int)40960L;
    }
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    public static int S_ISUID() {
        return (int)2048L;
    }
    public static int S_ISGID() {
        return (int)1024L;
    }
    public static int S_ISVTX() {
        return (int)512L;
    }
    public static int S_IRUSR() {
        return (int)256L;
    }
    public static int S_IWUSR() {
        return (int)128L;
    }
    public static int S_IXUSR() {
        return (int)64L;
    }
    public static int S_IRWXU() {
        return (int)448L;
    }
    public static int S_IRGRP() {
        return (int)32L;
    }
    public static int S_IWGRP() {
        return (int)16L;
    }
    public static int S_IXGRP() {
        return (int)8L;
    }
    public static int S_IRWXG() {
        return (int)56L;
    }
    public static int S_IROTH() {
        return (int)4L;
    }
    public static int S_IWOTH() {
        return (int)2L;
    }
    public static int S_IXOTH() {
        return (int)1L;
    }
    public static int S_IRWXO() {
        return (int)7L;
    }
    public static int AT_FDCWD() {
        return (int)-100L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$85.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$85.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$86.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$86.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$86.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$86.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$86.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$86.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$87.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$87.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$87.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$87.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$87.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$87.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$88.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$88.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$88.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$88.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$88.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$88.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$89.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$89.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$89.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$89.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$89.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$89.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$90.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$90.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$90.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$90.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$90.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$90.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$91.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$91.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$91.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$91.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$91.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$91.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$92.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$92.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$92.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$92.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$92.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$92.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$93.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$93.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$93.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$93.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$93.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$93.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$94.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$94.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$94.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$94.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$94.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$94.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$95.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$95.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$95.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$95.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$95.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$95.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$96.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$96.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$96.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$96.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$96.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$96.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$97.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$97.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$97.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$97.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$97.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$97.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$98.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$98.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$98.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$98.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$98.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$98.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$99.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$99.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$99.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$99.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$99.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$99.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$100.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$100.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$100.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$100.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$100.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$100.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$101.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$101.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$101.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$101.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$101.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$101.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$102.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$102.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$102.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$102.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$102.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$102.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$103.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$103.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$103.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$103.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$103.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$103.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$104.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$104.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$104.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$104.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$104.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$104.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$105.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$105.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$105.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$105.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$105.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$105.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$106.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$106.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$106.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$106.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$106.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$106.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$107.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$107.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$107.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$107.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$107.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$107.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$108.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$108.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$108.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$108.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$108.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$108.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$109.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$109.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$109.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$109.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$109.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$109.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$110.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$110.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$110.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$110.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$110.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$110.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$111.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$111.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$111.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$111.SCNxPTR$SEGMENT;
    }
    public static int CLONE_IO() {
        return (int)2147483648L;
    }
    public static long __NCPUBITS() {
        return 64L;
    }
    public static int CPU_SETSIZE() {
        return (int)1024L;
    }
    public static MemoryAddress SIG_ERR() {
        return constants$111.SIG_ERR$ADDR;
    }
    public static MemoryAddress SIG_DFL() {
        return constants$111.SIG_DFL$ADDR;
    }
    public static MemoryAddress SIG_IGN() {
        return constants$112.SIG_IGN$ADDR;
    }
    public static MemoryAddress SIG_HOLD() {
        return constants$112.SIG_HOLD$ADDR;
    }
    public static int SIGIO() {
        return (int)29L;
    }
    public static int SIGIOT() {
        return (int)6L;
    }
    public static int SIGCLD() {
        return (int)17L;
    }
    public static int _NSIG() {
        return (int)65L;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static long __SI_PAD_SIZE() {
        return 28L;
    }
    public static long __SIGEV_PAD_SIZE() {
        return 12L;
    }
    public static int NSIG() {
        return (int)65L;
    }
    public static int SA_RESETHAND() {
        return (int)2147483648L;
    }
    public static int SA_NOMASK() {
        return (int)1073741824L;
    }
    public static int SA_ONESHOT() {
        return (int)2147483648L;
    }
    public static int SA_STACK() {
        return (int)134217728L;
    }
    public static int FP_XSTATE_MAGIC1() {
        return (int)1179670611L;
    }
    public static int FP_XSTATE_MAGIC2() {
        return (int)1179670597L;
    }
    public static long FP_XSTATE_MAGIC2_SIZE() {
        return 4L;
    }
    public static int NGREG() {
        return (int)23L;
    }
    public static long _POSIX_VERSION() {
        return 200809L;
    }
    public static long __POSIX2_THIS_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_VERSION() {
        return 200809L;
    }
    public static long _POSIX2_C_BIND() {
        return 200809L;
    }
    public static long _POSIX2_C_DEV() {
        return 200809L;
    }
    public static long _POSIX2_SW_DEV() {
        return 200809L;
    }
    public static long _POSIX2_LOCALEDEF() {
        return 200809L;
    }
    public static long _POSIX_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_SYNCHRONIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_FSYNC() {
        return 200809L;
    }
    public static long _POSIX_MAPPED_FILES() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK() {
        return 200809L;
    }
    public static long _POSIX_MEMLOCK_RANGE() {
        return 200809L;
    }
    public static long _POSIX_MEMORY_PROTECTION() {
        return 200809L;
    }
    public static int _POSIX_VDISABLE() {
        return (int)0L;
    }
    public static long _POSIX_THREADS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_SAFE_FUNCTIONS() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIORITY_SCHEDULING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKSIZE() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ATTR_STACKADDR() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_INHERIT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PRIO_PROTECT() {
        return 200809L;
    }
    public static long _POSIX_THREAD_ROBUST_PRIO_INHERIT() {
        return 200809L;
    }
    public static int _POSIX_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)-1L;
    }
    public static long _POSIX_SEMAPHORES() {
        return 200809L;
    }
    public static long _POSIX_REALTIME_SIGNALS() {
        return 200809L;
    }
    public static long _POSIX_ASYNCHRONOUS_IO() {
        return 200809L;
    }
    public static long _POSIX_PRIORITIZED_IO() {
        return 200809L;
    }
    public static long _POSIX_SHARED_MEMORY_OBJECTS() {
        return 200809L;
    }
    public static long _POSIX_READER_WRITER_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_TIMEOUTS() {
        return 200809L;
    }
    public static long _POSIX_SPIN_LOCKS() {
        return 200809L;
    }
    public static long _POSIX_SPAWN() {
        return 200809L;
    }
    public static long _POSIX_TIMERS() {
        return 200809L;
    }
    public static long _POSIX_BARRIERS() {
        return 200809L;
    }
    public static long _POSIX_MESSAGE_PASSING() {
        return 200809L;
    }
    public static long _POSIX_THREAD_PROCESS_SHARED() {
        return 200809L;
    }
    public static long _POSIX_CLOCK_SELECTION() {
        return 200809L;
    }
    public static long _POSIX_ADVISORY_INFO() {
        return 200809L;
    }
    public static long _POSIX_IPV6() {
        return 200809L;
    }
    public static long _POSIX_RAW_SOCKETS() {
        return 200809L;
    }
    public static long _POSIX2_CHAR_TERM() {
        return 200809L;
    }
    public static int _POSIX_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_THREAD_SPORADIC_SERVER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_EVENT_FILTER() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_INHERIT() {
        return (int)-1L;
    }
    public static int _POSIX_TRACE_LOG() {
        return (int)-1L;
    }
    public static int _POSIX_TYPED_MEMORY_OBJECTS() {
        return (int)-1L;
    }
    public static int _POSIX_V7_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _POSIX_V6_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static int _XBS5_LPBIG_OFFBIG() {
        return (int)-1L;
    }
    public static MemorySegment __ILP32_OFF32_CFLAGS() {
        return constants$112.__ILP32_OFF32_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFF32_LDFLAGS() {
        return constants$112.__ILP32_OFF32_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_CFLAGS() {
        return constants$112.__ILP32_OFFBIG_CFLAGS$SEGMENT;
    }
    public static MemorySegment __ILP32_OFFBIG_LDFLAGS() {
        return constants$112.__ILP32_OFFBIG_LDFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_CFLAGS() {
        return constants$113.__LP64_OFF64_CFLAGS$SEGMENT;
    }
    public static MemorySegment __LP64_OFF64_LDFLAGS() {
        return constants$113.__LP64_OFF64_LDFLAGS$SEGMENT;
    }
    public static int L_SET() {
        return (int)0L;
    }
    public static int L_INCR() {
        return (int)1L;
    }
    public static int L_XTND() {
        return (int)2L;
    }
    public static int _SC_PAGE_SIZE() {
        return (int)30L;
    }
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    public static int CLOSE_RANGE_UNSHARE() {
        return (int)2L;
    }
    public static int CLOSE_RANGE_CLOEXEC() {
        return (int)4L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int PF_UNIX() {
        return (int)1L;
    }
    public static int PF_FILE() {
        return (int)1L;
    }
    public static int PF_ROUTE() {
        return (int)16L;
    }
    public static int AF_UNSPEC() {
        return (int)0L;
    }
    public static int AF_LOCAL() {
        return (int)1L;
    }
    public static int AF_UNIX() {
        return (int)1L;
    }
    public static int AF_FILE() {
        return (int)1L;
    }
    public static int AF_INET() {
        return (int)2L;
    }
    public static int AF_AX25() {
        return (int)3L;
    }
    public static int AF_IPX() {
        return (int)4L;
    }
    public static int AF_APPLETALK() {
        return (int)5L;
    }
    public static int AF_NETROM() {
        return (int)6L;
    }
    public static int AF_BRIDGE() {
        return (int)7L;
    }
    public static int AF_ATMPVC() {
        return (int)8L;
    }
    public static int AF_X25() {
        return (int)9L;
    }
    public static int AF_INET6() {
        return (int)10L;
    }
    public static int AF_ROSE() {
        return (int)11L;
    }
    public static int AF_DECnet() {
        return (int)12L;
    }
    public static int AF_NETBEUI() {
        return (int)13L;
    }
    public static int AF_SECURITY() {
        return (int)14L;
    }
    public static int AF_KEY() {
        return (int)15L;
    }
    public static int AF_NETLINK() {
        return (int)16L;
    }
    public static int AF_ROUTE() {
        return (int)16L;
    }
    public static int AF_PACKET() {
        return (int)17L;
    }
    public static int AF_ASH() {
        return (int)18L;
    }
    public static int AF_ECONET() {
        return (int)19L;
    }
    public static int AF_ATMSVC() {
        return (int)20L;
    }
    public static int AF_RDS() {
        return (int)21L;
    }
    public static int AF_SNA() {
        return (int)22L;
    }
    public static int AF_IRDA() {
        return (int)23L;
    }
    public static int AF_PPPOX() {
        return (int)24L;
    }
    public static int AF_WANPIPE() {
        return (int)25L;
    }
    public static int AF_LLC() {
        return (int)26L;
    }
    public static int AF_IB() {
        return (int)27L;
    }
    public static int AF_MPLS() {
        return (int)28L;
    }
    public static int AF_CAN() {
        return (int)29L;
    }
    public static int AF_TIPC() {
        return (int)30L;
    }
    public static int AF_BLUETOOTH() {
        return (int)31L;
    }
    public static int AF_IUCV() {
        return (int)32L;
    }
    public static int AF_RXRPC() {
        return (int)33L;
    }
    public static int AF_ISDN() {
        return (int)34L;
    }
    public static int AF_PHONET() {
        return (int)35L;
    }
    public static int AF_IEEE802154() {
        return (int)36L;
    }
    public static int AF_CAIF() {
        return (int)37L;
    }
    public static int AF_ALG() {
        return (int)38L;
    }
    public static int AF_NFC() {
        return (int)39L;
    }
    public static int AF_VSOCK() {
        return (int)40L;
    }
    public static int AF_KCM() {
        return (int)41L;
    }
    public static int AF_QIPCRTR() {
        return (int)42L;
    }
    public static int AF_SMC() {
        return (int)43L;
    }
    public static int AF_XDP() {
        return (int)44L;
    }
    public static int AF_MCTP() {
        return (int)45L;
    }
    public static int AF_MAX() {
        return (int)46L;
    }
    public static long __SOCKADDR_COMMON_SIZE() {
        return 2L;
    }
    public static long _SS_PADSIZE() {
        return 118L;
    }
    public static int SO_GET_FILTER() {
        return (int)26L;
    }
    public static int SCM_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_DETACH_BPF() {
        return (int)27L;
    }
    public static int SCM_TXTIME() {
        return (int)61L;
    }
    public static int SO_TIMESTAMP() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING() {
        return (int)37L;
    }
    public static int SO_RCVTIMEO() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO() {
        return (int)21L;
    }
    public static int SCM_TIMESTAMP() {
        return (int)29L;
    }
    public static int SCM_TIMESTAMPNS() {
        return (int)35L;
    }
    public static int SCM_TIMESTAMPING() {
        return (int)37L;
    }
    public static int S_IREAD() {
        return (int)256L;
    }
    public static int S_IWRITE() {
        return (int)128L;
    }
    public static int S_IEXEC() {
        return (int)64L;
    }
    public static int ACCESSPERMS() {
        return (int)511L;
    }
    public static int ALLPERMS() {
        return (int)4095L;
    }
    public static int DEFFILEMODE() {
        return (int)438L;
    }
    public static int STATX_TYPE() {
        return (int)1L;
    }
    public static int STATX_MODE() {
        return (int)2L;
    }
    public static int STATX_NLINK() {
        return (int)4L;
    }
    public static int STATX_UID() {
        return (int)8L;
    }
    public static int STATX_GID() {
        return (int)16L;
    }
    public static int STATX_ATIME() {
        return (int)32L;
    }
    public static int STATX_MTIME() {
        return (int)64L;
    }
    public static int STATX_CTIME() {
        return (int)128L;
    }
    public static int STATX_INO() {
        return (int)256L;
    }
    public static int STATX_SIZE() {
        return (int)512L;
    }
    public static int STATX_BLOCKS() {
        return (int)1024L;
    }
    public static int STATX_BASIC_STATS() {
        return (int)2047L;
    }
    public static int STATX_BTIME() {
        return (int)2048L;
    }
    public static int STATX_MNT_ID() {
        return (int)4096L;
    }
    public static int STATX__RESERVED() {
        return (int)2147483648L;
    }
    public static int STATX_ALL() {
        return (int)4095L;
    }
    public static int UIO_MAXIOV() {
        return (int)1024L;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int MOD_OFFSET() {
        return (int)1L;
    }
    public static int MOD_FREQUENCY() {
        return (int)2L;
    }
    public static int MOD_MAXERROR() {
        return (int)4L;
    }
    public static int MOD_ESTERROR() {
        return (int)8L;
    }
    public static int MOD_STATUS() {
        return (int)16L;
    }
    public static int MOD_TIMECONST() {
        return (int)32L;
    }
    public static int MOD_CLKB() {
        return (int)16384L;
    }
    public static int MOD_CLKA() {
        return (int)32769L;
    }
    public static int MOD_TAI() {
        return (int)128L;
    }
    public static int MOD_MICRO() {
        return (int)4096L;
    }
    public static int MOD_NANO() {
        return (int)8192L;
    }
    public static int STA_RONLY() {
        return (int)65280L;
    }
    public static long LIBURING_UDATA_TIMEOUT() {
        return -1L;
    }
}


