// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class open_how {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("mode"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("resolve")
    ).withName("open_how");
    public static MemoryLayout $LAYOUT() {
        return open_how.$struct$LAYOUT;
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return open_how.flags$VH;
    }
    public static long flags$get(MemorySegment seg) {
        return (long)open_how.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, long x) {
        open_how.flags$VH.set(seg, x);
    }
    public static long flags$get(MemorySegment seg, long index) {
        return (long)open_how.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, long x) {
        open_how.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mode"));
    public static VarHandle mode$VH() {
        return open_how.mode$VH;
    }
    public static long mode$get(MemorySegment seg) {
        return (long)open_how.mode$VH.get(seg);
    }
    public static void mode$set( MemorySegment seg, long x) {
        open_how.mode$VH.set(seg, x);
    }
    public static long mode$get(MemorySegment seg, long index) {
        return (long)open_how.mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mode$set(MemorySegment seg, long index, long x) {
        open_how.mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resolve$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("resolve"));
    public static VarHandle resolve$VH() {
        return open_how.resolve$VH;
    }
    public static long resolve$get(MemorySegment seg) {
        return (long)open_how.resolve$VH.get(seg);
    }
    public static void resolve$set( MemorySegment seg, long x) {
        open_how.resolve$VH.set(seg, x);
    }
    public static long resolve$get(MemorySegment seg, long index) {
        return (long)open_how.resolve$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resolve$set(MemorySegment seg, long index, long x) {
        open_how.resolve$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


