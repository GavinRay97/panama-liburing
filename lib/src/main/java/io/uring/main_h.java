// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class main_h extends main_h_2 {

    /* package-private */ main_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _XOPEN_SOURCE() {
        return (int)500L;
    }
    public static int _STDINT_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _ISOC95_SOURCE() {
        return (int)1L;
    }
    public static int _ISOC99_SOURCE() {
        return (int)1L;
    }
    public static int _ISOC11_SOURCE() {
        return (int)1L;
    }
    public static int _ISOC2X_SOURCE() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int _XOPEN_SOURCE_EXTENDED() {
        return (int)1L;
    }
    public static int _LARGEFILE64_SOURCE() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int _DYNAMIC_STACK_SIZE_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)1L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int __USE_XOPEN() {
        return (int)1L;
    }
    public static int __USE_XOPEN_EXTENDED() {
        return (int)1L;
    }
    public static int __USE_UNIX98() {
        return (int)1L;
    }
    public static int _LARGEFILE_SOURCE() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8XSI() {
        return (int)1L;
    }
    public static int __USE_XOPEN2KXSI() {
        return (int)1L;
    }
    public static int __USE_LARGEFILE() {
        return (int)1L;
    }
    public static int __USE_LARGEFILE64() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_DYNAMIC_STACK_SIZE() {
        return (int)1L;
    }
    public static int __USE_GNU() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)36L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)1L;
    }
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    public static int INT8_WIDTH() {
        return (int)8L;
    }
    public static int UINT8_WIDTH() {
        return (int)8L;
    }
    public static int INT16_WIDTH() {
        return (int)16L;
    }
    public static int UINT16_WIDTH() {
        return (int)16L;
    }
    public static int INT32_WIDTH() {
        return (int)32L;
    }
    public static int UINT32_WIDTH() {
        return (int)32L;
    }
    public static int INT64_WIDTH() {
        return (int)64L;
    }
    public static int UINT64_WIDTH() {
        return (int)64L;
    }
    public static int INT_LEAST8_WIDTH() {
        return (int)8L;
    }
    public static int UINT_LEAST8_WIDTH() {
        return (int)8L;
    }
    public static int INT_LEAST16_WIDTH() {
        return (int)16L;
    }
    public static int UINT_LEAST16_WIDTH() {
        return (int)16L;
    }
    public static int INT_LEAST32_WIDTH() {
        return (int)32L;
    }
    public static int UINT_LEAST32_WIDTH() {
        return (int)32L;
    }
    public static int INT_LEAST64_WIDTH() {
        return (int)64L;
    }
    public static int UINT_LEAST64_WIDTH() {
        return (int)64L;
    }
    public static int INT_FAST8_WIDTH() {
        return (int)8L;
    }
    public static int UINT_FAST8_WIDTH() {
        return (int)8L;
    }
    public static int INT_FAST64_WIDTH() {
        return (int)64L;
    }
    public static int UINT_FAST64_WIDTH() {
        return (int)64L;
    }
    public static int INTMAX_WIDTH() {
        return (int)64L;
    }
    public static int UINTMAX_WIDTH() {
        return (int)64L;
    }
    public static int SIG_ATOMIC_WIDTH() {
        return (int)32L;
    }
    public static int WCHAR_WIDTH() {
        return (int)32L;
    }
    public static int WINT_WIDTH() {
        return (int)32L;
    }
    public static int __BITS_PER_LONG() {
        return (int)64L;
    }
    public static int RESOLVE_NO_XDEV() {
        return (int)1L;
    }
    public static int RESOLVE_NO_MAGICLINKS() {
        return (int)2L;
    }
    public static int RESOLVE_NO_SYMLINKS() {
        return (int)4L;
    }
    public static int RESOLVE_BENEATH() {
        return (int)8L;
    }
    public static int RESOLVE_IN_ROOT() {
        return (int)16L;
    }
    public static int RESOLVE_CACHED() {
        return (int)32L;
    }
    public static int NR_OPEN() {
        return (int)1024L;
    }
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    public static int ARG_MAX() {
        return (int)131072L;
    }
    public static int LINK_MAX() {
        return (int)127L;
    }
    public static int MAX_CANON() {
        return (int)255L;
    }
    public static int MAX_INPUT() {
        return (int)255L;
    }
    public static int NAME_MAX() {
        return (int)255L;
    }
    public static int PATH_MAX() {
        return (int)4096L;
    }
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    public static int _IOC_NRBITS() {
        return (int)8L;
    }
    public static int _IOC_TYPEBITS() {
        return (int)8L;
    }
    public static int _IOC_SIZEBITS() {
        return (int)14L;
    }
    public static int _IOC_DIRBITS() {
        return (int)2L;
    }
    public static int _IOC_NRSHIFT() {
        return (int)0L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_4() {
        return (int)0L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_8() {
        return (int)1L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_16() {
        return (int)2L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_32() {
        return (int)3L;
    }
    public static int FSCRYPT_POLICY_FLAGS_PAD_MASK() {
        return (int)3L;
    }
    public static int FSCRYPT_POLICY_FLAG_DIRECT_KEY() {
        return (int)4L;
    }
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64() {
        return (int)8L;
    }
    public static int FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32() {
        return (int)16L;
    }
    public static int FSCRYPT_MODE_AES_256_XTS() {
        return (int)1L;
    }
    public static int FSCRYPT_MODE_AES_256_CTS() {
        return (int)4L;
    }
    public static int FSCRYPT_MODE_AES_128_CBC() {
        return (int)5L;
    }
    public static int FSCRYPT_MODE_AES_128_CTS() {
        return (int)6L;
    }
    public static int FSCRYPT_MODE_ADIANTUM() {
        return (int)9L;
    }
    public static int FSCRYPT_MODE_AES_256_HCTR2() {
        return (int)10L;
    }
    public static int FSCRYPT_POLICY_V1() {
        return (int)0L;
    }
    public static int FSCRYPT_KEY_DESCRIPTOR_SIZE() {
        return (int)8L;
    }
    public static int FSCRYPT_KEY_DESC_PREFIX_SIZE() {
        return (int)8L;
    }
    public static int FSCRYPT_MAX_KEY_SIZE() {
        return (int)64L;
    }
    public static int FSCRYPT_POLICY_V2() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_IDENTIFIER_SIZE() {
        return (int)16L;
    }
    public static int FSCRYPT_KEY_SPEC_TYPE_DESCRIPTOR() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_SPEC_TYPE_IDENTIFIER() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_FILES_BUSY() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_REMOVAL_STATUS_FLAG_OTHER_USERS() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_STATUS_ABSENT() {
        return (int)1L;
    }
    public static int FSCRYPT_KEY_STATUS_PRESENT() {
        return (int)2L;
    }
    public static int FSCRYPT_KEY_STATUS_INCOMPLETELY_REMOVED() {
        return (int)3L;
    }
    public static int FSCRYPT_KEY_STATUS_FLAG_ADDED_BY_SELF() {
        return (int)1L;
    }
    public static int FS_POLICY_FLAGS_VALID() {
        return (int)7L;
    }
    public static int FS_ENCRYPTION_MODE_INVALID() {
        return (int)0L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_GCM() {
        return (int)2L;
    }
    public static int FS_ENCRYPTION_MODE_AES_256_CBC() {
        return (int)3L;
    }
    public static int FS_ENCRYPTION_MODE_SPECK128_256_XTS() {
        return (int)7L;
    }
    public static int FS_ENCRYPTION_MODE_SPECK128_256_CTS() {
        return (int)8L;
    }
    public static int MS_RDONLY() {
        return (int)1L;
    }
    public static int MS_NOSUID() {
        return (int)2L;
    }
    public static int MS_NODEV() {
        return (int)4L;
    }
    public static int MS_NOEXEC() {
        return (int)8L;
    }
    public static int MS_SYNCHRONOUS() {
        return (int)16L;
    }
    public static int MS_REMOUNT() {
        return (int)32L;
    }
    public static int MS_MANDLOCK() {
        return (int)64L;
    }
    public static int MS_DIRSYNC() {
        return (int)128L;
    }
    public static int MS_NOSYMFOLLOW() {
        return (int)256L;
    }
    public static int MS_NOATIME() {
        return (int)1024L;
    }
    public static int MS_NODIRATIME() {
        return (int)2048L;
    }
    public static int MS_BIND() {
        return (int)4096L;
    }
    public static int MS_MOVE() {
        return (int)8192L;
    }
    public static int MS_REC() {
        return (int)16384L;
    }
    public static int MS_VERBOSE() {
        return (int)32768L;
    }
    public static int MS_SILENT() {
        return (int)32768L;
    }
    public static int OPEN_TREE_CLONE() {
        return (int)1L;
    }
    public static int MOVE_MOUNT_F_SYMLINKS() {
        return (int)1L;
    }
    public static int MOVE_MOUNT_F_AUTOMOUNTS() {
        return (int)2L;
    }
    public static int MOVE_MOUNT_F_EMPTY_PATH() {
        return (int)4L;
    }
    public static int MOVE_MOUNT_T_SYMLINKS() {
        return (int)16L;
    }
    public static int MOVE_MOUNT_T_AUTOMOUNTS() {
        return (int)32L;
    }
    public static int MOVE_MOUNT_T_EMPTY_PATH() {
        return (int)64L;
    }
    public static int MOVE_MOUNT_SET_GROUP() {
        return (int)256L;
    }
    public static int MOVE_MOUNT__MASK() {
        return (int)375L;
    }
    public static int FSOPEN_CLOEXEC() {
        return (int)1L;
    }
    public static int FSPICK_CLOEXEC() {
        return (int)1L;
    }
    public static int FSPICK_SYMLINK_NOFOLLOW() {
        return (int)2L;
    }
    public static int FSPICK_NO_AUTOMOUNT() {
        return (int)4L;
    }
    public static int FSPICK_EMPTY_PATH() {
        return (int)8L;
    }
    public static int FSMOUNT_CLOEXEC() {
        return (int)1L;
    }
    public static int MOUNT_ATTR_RDONLY() {
        return (int)1L;
    }
    public static int MOUNT_ATTR_NOSUID() {
        return (int)2L;
    }
    public static int MOUNT_ATTR_NODEV() {
        return (int)4L;
    }
    public static int MOUNT_ATTR_NOEXEC() {
        return (int)8L;
    }
    public static int MOUNT_ATTR__ATIME() {
        return (int)112L;
    }
    public static int MOUNT_ATTR_RELATIME() {
        return (int)0L;
    }
    public static int MOUNT_ATTR_NOATIME() {
        return (int)16L;
    }
    public static int MOUNT_ATTR_STRICTATIME() {
        return (int)32L;
    }
    public static int MOUNT_ATTR_NODIRATIME() {
        return (int)128L;
    }
    public static int MOUNT_ATTR_IDMAP() {
        return (int)1048576L;
    }
    public static int MOUNT_ATTR_NOSYMFOLLOW() {
        return (int)2097152L;
    }
    public static int MOUNT_ATTR_SIZE_VER0() {
        return (int)32L;
    }
    public static int INR_OPEN_CUR() {
        return (int)1024L;
    }
    public static int INR_OPEN_MAX() {
        return (int)4096L;
    }
    public static int BLOCK_SIZE_BITS() {
        return (int)10L;
    }
    public static int SEEK_SET() {
        return (int)0L;
    }
    public static int SEEK_CUR() {
        return (int)1L;
    }
    public static int SEEK_END() {
        return (int)2L;
    }
    public static int SEEK_DATA() {
        return (int)3L;
    }
    public static int SEEK_HOLE() {
        return (int)4L;
    }
    public static int FILE_DEDUPE_RANGE_SAME() {
        return (int)0L;
    }
    public static int FILE_DEDUPE_RANGE_DIFFERS() {
        return (int)1L;
    }
    public static int NR_FILE() {
        return (int)8192L;
    }
    public static int FS_XFLAG_REALTIME() {
        return (int)1L;
    }
    public static int FS_XFLAG_PREALLOC() {
        return (int)2L;
    }
    public static int FS_XFLAG_IMMUTABLE() {
        return (int)8L;
    }
    public static int FS_XFLAG_APPEND() {
        return (int)16L;
    }
    public static int FS_XFLAG_SYNC() {
        return (int)32L;
    }
    public static int FS_XFLAG_NOATIME() {
        return (int)64L;
    }
    public static int FS_XFLAG_NODUMP() {
        return (int)128L;
    }
    public static int FS_XFLAG_RTINHERIT() {
        return (int)256L;
    }
    public static int FS_XFLAG_PROJINHERIT() {
        return (int)512L;
    }
    public static int FS_XFLAG_NOSYMLINKS() {
        return (int)1024L;
    }
    public static int FS_XFLAG_EXTSIZE() {
        return (int)2048L;
    }
    public static int FS_XFLAG_EXTSZINHERIT() {
        return (int)4096L;
    }
    public static int FS_XFLAG_NODEFRAG() {
        return (int)8192L;
    }
    public static int FS_XFLAG_FILESTREAM() {
        return (int)16384L;
    }
    public static int FS_XFLAG_DAX() {
        return (int)32768L;
    }
    public static int FS_XFLAG_COWEXTSIZE() {
        return (int)65536L;
    }
    public static int BMAP_IOCTL() {
        return (int)1L;
    }
    public static int FSLABEL_MAX() {
        return (int)256L;
    }
    public static int FS_SECRM_FL() {
        return (int)1L;
    }
    public static int FS_UNRM_FL() {
        return (int)2L;
    }
    public static int FS_COMPR_FL() {
        return (int)4L;
    }
    public static int FS_SYNC_FL() {
        return (int)8L;
    }
    public static int FS_IMMUTABLE_FL() {
        return (int)16L;
    }
    public static int FS_APPEND_FL() {
        return (int)32L;
    }
    public static int FS_NODUMP_FL() {
        return (int)64L;
    }
    public static int FS_NOATIME_FL() {
        return (int)128L;
    }
    public static int FS_DIRTY_FL() {
        return (int)256L;
    }
    public static int FS_COMPRBLK_FL() {
        return (int)512L;
    }
    public static int FS_NOCOMP_FL() {
        return (int)1024L;
    }
    public static int FS_ENCRYPT_FL() {
        return (int)2048L;
    }
    public static int FS_BTREE_FL() {
        return (int)4096L;
    }
    public static int FS_INDEX_FL() {
        return (int)4096L;
    }
    public static int FS_IMAGIC_FL() {
        return (int)8192L;
    }
    public static int FS_JOURNAL_DATA_FL() {
        return (int)16384L;
    }
    public static int FS_NOTAIL_FL() {
        return (int)32768L;
    }
    public static int FS_DIRSYNC_FL() {
        return (int)65536L;
    }
    public static int FS_TOPDIR_FL() {
        return (int)131072L;
    }
    public static int FS_HUGE_FILE_FL() {
        return (int)262144L;
    }
    public static int FS_EXTENT_FL() {
        return (int)524288L;
    }
    public static int FS_VERITY_FL() {
        return (int)1048576L;
    }
    public static int FS_EA_INODE_FL() {
        return (int)2097152L;
    }
    public static int FS_EOFBLOCKS_FL() {
        return (int)4194304L;
    }
    public static int FS_NOCOW_FL() {
        return (int)8388608L;
    }
    public static int FS_DAX_FL() {
        return (int)33554432L;
    }
    public static int FS_INLINE_DATA_FL() {
        return (int)268435456L;
    }
    public static int FS_PROJINHERIT_FL() {
        return (int)536870912L;
    }
    public static int FS_CASEFOLD_FL() {
        return (int)1073741824L;
    }
    public static int FS_FL_USER_VISIBLE() {
        return (int)253951L;
    }
    public static int FS_FL_USER_MODIFIABLE() {
        return (int)229631L;
    }
    public static int SYNC_FILE_RANGE_WAIT_BEFORE() {
        return (int)1L;
    }
    public static int SYNC_FILE_RANGE_WRITE() {
        return (int)2L;
    }
    public static int SYNC_FILE_RANGE_WAIT_AFTER() {
        return (int)4L;
    }
    public static int _ERRNO_H() {
        return (int)1L;
    }
    public static int _BITS_ERRNO_H() {
        return (int)1L;
    }
    public static int EPERM() {
        return (int)1L;
    }
    public static int ENOENT() {
        return (int)2L;
    }
    public static int ESRCH() {
        return (int)3L;
    }
    public static int EINTR() {
        return (int)4L;
    }
    public static int EIO() {
        return (int)5L;
    }
    public static int ENXIO() {
        return (int)6L;
    }
    public static int E2BIG() {
        return (int)7L;
    }
    public static int ENOEXEC() {
        return (int)8L;
    }
    public static int EBADF() {
        return (int)9L;
    }
    public static int ECHILD() {
        return (int)10L;
    }
    public static int EAGAIN() {
        return (int)11L;
    }
    public static int ENOMEM() {
        return (int)12L;
    }
    public static int EACCES() {
        return (int)13L;
    }
    public static int EFAULT() {
        return (int)14L;
    }
    public static int ENOTBLK() {
        return (int)15L;
    }
    public static int EBUSY() {
        return (int)16L;
    }
    public static int EEXIST() {
        return (int)17L;
    }
    public static int EXDEV() {
        return (int)18L;
    }
    public static int ENODEV() {
        return (int)19L;
    }
    public static int ENOTDIR() {
        return (int)20L;
    }
    public static int EISDIR() {
        return (int)21L;
    }
    public static int EINVAL() {
        return (int)22L;
    }
    public static int ENFILE() {
        return (int)23L;
    }
    public static int EMFILE() {
        return (int)24L;
    }
    public static int ENOTTY() {
        return (int)25L;
    }
    public static int ETXTBSY() {
        return (int)26L;
    }
    public static int EFBIG() {
        return (int)27L;
    }
    public static int ENOSPC() {
        return (int)28L;
    }
    public static int ESPIPE() {
        return (int)29L;
    }
    public static int EROFS() {
        return (int)30L;
    }
    public static int EMLINK() {
        return (int)31L;
    }
    public static int EPIPE() {
        return (int)32L;
    }
    public static int EDOM() {
        return (int)33L;
    }
    public static int ERANGE() {
        return (int)34L;
    }
    public static int EDEADLK() {
        return (int)35L;
    }
    public static int ENAMETOOLONG() {
        return (int)36L;
    }
    public static int ENOLCK() {
        return (int)37L;
    }
    public static int ENOSYS() {
        return (int)38L;
    }
    public static int ENOTEMPTY() {
        return (int)39L;
    }
    public static int ELOOP() {
        return (int)40L;
    }
    public static int ENOMSG() {
        return (int)42L;
    }
    public static int EIDRM() {
        return (int)43L;
    }
    public static int ECHRNG() {
        return (int)44L;
    }
    public static int EL2NSYNC() {
        return (int)45L;
    }
    public static int EL3HLT() {
        return (int)46L;
    }
    public static int EL3RST() {
        return (int)47L;
    }
    public static int ELNRNG() {
        return (int)48L;
    }
    public static int EUNATCH() {
        return (int)49L;
    }
    public static int ENOCSI() {
        return (int)50L;
    }
    public static int EL2HLT() {
        return (int)51L;
    }
    public static int EBADE() {
        return (int)52L;
    }
    public static int EBADR() {
        return (int)53L;
    }
    public static int EXFULL() {
        return (int)54L;
    }
    public static int ENOANO() {
        return (int)55L;
    }
    public static int EBADRQC() {
        return (int)56L;
    }
    public static int EBADSLT() {
        return (int)57L;
    }
    public static int EBFONT() {
        return (int)59L;
    }
    public static int ENOSTR() {
        return (int)60L;
    }
    public static int ENODATA() {
        return (int)61L;
    }
    public static int ETIME() {
        return (int)62L;
    }
    public static int ENOSR() {
        return (int)63L;
    }
    public static int ENONET() {
        return (int)64L;
    }
    public static int ENOPKG() {
        return (int)65L;
    }
    public static int EREMOTE() {
        return (int)66L;
    }
    public static int ENOLINK() {
        return (int)67L;
    }
    public static int EADV() {
        return (int)68L;
    }
    public static int ESRMNT() {
        return (int)69L;
    }
    public static int ECOMM() {
        return (int)70L;
    }
    public static int EPROTO() {
        return (int)71L;
    }
    public static int EMULTIHOP() {
        return (int)72L;
    }
    public static int EDOTDOT() {
        return (int)73L;
    }
    public static int EBADMSG() {
        return (int)74L;
    }
    public static int EOVERFLOW() {
        return (int)75L;
    }
    public static int ENOTUNIQ() {
        return (int)76L;
    }
    public static int EBADFD() {
        return (int)77L;
    }
    public static int EREMCHG() {
        return (int)78L;
    }
    public static int ELIBACC() {
        return (int)79L;
    }
    public static int ELIBBAD() {
        return (int)80L;
    }
    public static int ELIBSCN() {
        return (int)81L;
    }
    public static int ELIBMAX() {
        return (int)82L;
    }
    public static int ELIBEXEC() {
        return (int)83L;
    }
    public static int EILSEQ() {
        return (int)84L;
    }
    public static int ERESTART() {
        return (int)85L;
    }
    public static int ESTRPIPE() {
        return (int)86L;
    }
    public static int EUSERS() {
        return (int)87L;
    }
    public static int ENOTSOCK() {
        return (int)88L;
    }
    public static int EDESTADDRREQ() {
        return (int)89L;
    }
    public static int EMSGSIZE() {
        return (int)90L;
    }
    public static int EPROTOTYPE() {
        return (int)91L;
    }
    public static int ENOPROTOOPT() {
        return (int)92L;
    }
    public static int EPROTONOSUPPORT() {
        return (int)93L;
    }
    public static int ESOCKTNOSUPPORT() {
        return (int)94L;
    }
    public static int EOPNOTSUPP() {
        return (int)95L;
    }
    public static int EPFNOSUPPORT() {
        return (int)96L;
    }
    public static int EAFNOSUPPORT() {
        return (int)97L;
    }
    public static int EADDRINUSE() {
        return (int)98L;
    }
    public static int EADDRNOTAVAIL() {
        return (int)99L;
    }
    public static int ENETDOWN() {
        return (int)100L;
    }
    public static int ENETUNREACH() {
        return (int)101L;
    }
    public static int ENETRESET() {
        return (int)102L;
    }
    public static int ECONNABORTED() {
        return (int)103L;
    }
    public static int ECONNRESET() {
        return (int)104L;
    }
    public static int ENOBUFS() {
        return (int)105L;
    }
    public static int EISCONN() {
        return (int)106L;
    }
    public static int ENOTCONN() {
        return (int)107L;
    }
    public static int ESHUTDOWN() {
        return (int)108L;
    }
    public static int ETOOMANYREFS() {
        return (int)109L;
    }
    public static int ETIMEDOUT() {
        return (int)110L;
    }
    public static int ECONNREFUSED() {
        return (int)111L;
    }
    public static int EHOSTDOWN() {
        return (int)112L;
    }
    public static int EHOSTUNREACH() {
        return (int)113L;
    }
    public static int EALREADY() {
        return (int)114L;
    }
    public static int EINPROGRESS() {
        return (int)115L;
    }
    public static int ESTALE() {
        return (int)116L;
    }
    public static int EUCLEAN() {
        return (int)117L;
    }
    public static int ENOTNAM() {
        return (int)118L;
    }
    public static int ENAVAIL() {
        return (int)119L;
    }
    public static int EISNAM() {
        return (int)120L;
    }
    public static int EREMOTEIO() {
        return (int)121L;
    }
    public static int EDQUOT() {
        return (int)122L;
    }
    public static int ENOMEDIUM() {
        return (int)123L;
    }
    public static int EMEDIUMTYPE() {
        return (int)124L;
    }
    public static int ECANCELED() {
        return (int)125L;
    }
    public static int ENOKEY() {
        return (int)126L;
    }
    public static int EKEYEXPIRED() {
        return (int)127L;
    }
    public static int EKEYREVOKED() {
        return (int)128L;
    }
    public static int EKEYREJECTED() {
        return (int)129L;
    }
    public static int EOWNERDEAD() {
        return (int)130L;
    }
    public static int ENOTRECOVERABLE() {
        return (int)131L;
    }
    public static int ERFKILL() {
        return (int)132L;
    }
    public static int EHWPOISON() {
        return (int)133L;
    }
    public static int __error_t_defined() {
        return (int)1L;
    }
    public static int _FCNTL_H() {
        return (int)1L;
    }
    public static int __O_LARGEFILE() {
        return (int)0L;
    }
    public static int F_GETLK64() {
        return (int)5L;
    }
    public static int F_SETLK64() {
        return (int)6L;
    }
    public static int F_SETLKW64() {
        return (int)7L;
    }
    public static int __iovec_defined() {
        return (int)1L;
    }
    public static int O_ACCMODE() {
        return (int)3L;
    }
    public static int O_RDONLY() {
        return (int)0L;
    }
    public static int O_WRONLY() {
        return (int)1L;
    }
    public static int O_RDWR() {
        return (int)2L;
    }
    public static int O_CREAT() {
        return (int)64L;
    }
    public static int O_EXCL() {
        return (int)128L;
    }
    public static int O_NOCTTY() {
        return (int)256L;
    }
    public static int O_TRUNC() {
        return (int)512L;
    }
    public static int O_APPEND() {
        return (int)1024L;
    }
    public static int O_NONBLOCK() {
        return (int)2048L;
    }
    public static int O_SYNC() {
        return (int)1052672L;
    }
    public static int O_ASYNC() {
        return (int)8192L;
    }
    public static int __O_DIRECTORY() {
        return (int)65536L;
    }
    public static int __O_NOFOLLOW() {
        return (int)131072L;
    }
    public static int __O_CLOEXEC() {
        return (int)524288L;
    }
    public static int __O_DIRECT() {
        return (int)16384L;
    }
    public static int __O_NOATIME() {
        return (int)262144L;
    }
    public static int __O_PATH() {
        return (int)2097152L;
    }
    public static int __O_DSYNC() {
        return (int)4096L;
    }
    public static int F_GETLK() {
        return (int)5L;
    }
    public static int F_SETLK() {
        return (int)6L;
    }
    public static int F_SETLKW() {
        return (int)7L;
    }
    public static int F_OFD_GETLK() {
        return (int)36L;
    }
    public static int F_OFD_SETLK() {
        return (int)37L;
    }
    public static int F_OFD_SETLKW() {
        return (int)38L;
    }
    public static int F_DUPFD() {
        return (int)0L;
    }
    public static int F_GETFD() {
        return (int)1L;
    }
    public static int F_SETFD() {
        return (int)2L;
    }
    public static int F_GETFL() {
        return (int)3L;
    }
    public static int F_SETFL() {
        return (int)4L;
    }
    public static int __F_SETOWN() {
        return (int)8L;
    }
    public static int __F_GETOWN() {
        return (int)9L;
    }
    public static int __F_SETSIG() {
        return (int)10L;
    }
    public static int __F_GETSIG() {
        return (int)11L;
    }
    public static int __F_SETOWN_EX() {
        return (int)15L;
    }
    public static int __F_GETOWN_EX() {
        return (int)16L;
    }
    public static int F_SETLEASE() {
        return (int)1024L;
    }
    public static int F_GETLEASE() {
        return (int)1025L;
    }
    public static int F_NOTIFY() {
        return (int)1026L;
    }
    public static int F_SETPIPE_SZ() {
        return (int)1031L;
    }
    public static int F_GETPIPE_SZ() {
        return (int)1032L;
    }
    public static int F_ADD_SEALS() {
        return (int)1033L;
    }
    public static int F_GET_SEALS() {
        return (int)1034L;
    }
    public static int F_GET_RW_HINT() {
        return (int)1035L;
    }
    public static int F_SET_RW_HINT() {
        return (int)1036L;
    }
    public static int F_GET_FILE_RW_HINT() {
        return (int)1037L;
    }
    public static int F_SET_FILE_RW_HINT() {
        return (int)1038L;
    }
    public static int F_DUPFD_CLOEXEC() {
        return (int)1030L;
    }
    public static int FD_CLOEXEC() {
        return (int)1L;
    }
    public static int F_RDLCK() {
        return (int)0L;
    }
    public static int F_WRLCK() {
        return (int)1L;
    }
    public static int F_UNLCK() {
        return (int)2L;
    }
    public static int F_EXLCK() {
        return (int)4L;
    }
    public static int F_SHLCK() {
        return (int)8L;
    }
    public static int LOCK_SH() {
        return (int)1L;
    }
    public static int LOCK_EX() {
        return (int)2L;
    }
    public static int LOCK_NB() {
        return (int)4L;
    }
    public static int LOCK_UN() {
        return (int)8L;
    }
    public static int LOCK_MAND() {
        return (int)32L;
    }
    public static int LOCK_READ() {
        return (int)64L;
    }
    public static int LOCK_WRITE() {
        return (int)128L;
    }
    public static int LOCK_RW() {
        return (int)192L;
    }
    public static int DN_ACCESS() {
        return (int)1L;
    }
    public static int DN_MODIFY() {
        return (int)2L;
    }
    public static int DN_CREATE() {
        return (int)4L;
    }
    public static int DN_DELETE() {
        return (int)8L;
    }
    public static int DN_RENAME() {
        return (int)16L;
    }
    public static int DN_ATTRIB() {
        return (int)32L;
    }
    public static int F_SEAL_SEAL() {
        return (int)1L;
    }
    public static int F_SEAL_SHRINK() {
        return (int)2L;
    }
    public static int F_SEAL_GROW() {
        return (int)4L;
    }
    public static int F_SEAL_WRITE() {
        return (int)8L;
    }
    public static int F_SEAL_FUTURE_WRITE() {
        return (int)16L;
    }
    public static int RWH_WRITE_LIFE_NOT_SET() {
        return (int)0L;
    }
    public static int RWH_WRITE_LIFE_NONE() {
        return (int)1L;
    }
    public static int RWH_WRITE_LIFE_SHORT() {
        return (int)2L;
    }
    public static int RWH_WRITE_LIFE_MEDIUM() {
        return (int)3L;
    }
    public static int RWH_WRITE_LIFE_LONG() {
        return (int)4L;
    }
    public static int RWH_WRITE_LIFE_EXTREME() {
        return (int)5L;
    }
    public static int __POSIX_FADV_DONTNEED() {
        return (int)4L;
    }
    public static int __POSIX_FADV_NOREUSE() {
        return (int)5L;
    }
    public static int POSIX_FADV_NORMAL() {
        return (int)0L;
    }
    public static int POSIX_FADV_RANDOM() {
        return (int)1L;
    }
    public static int POSIX_FADV_SEQUENTIAL() {
        return (int)2L;
    }
    public static int POSIX_FADV_WILLNEED() {
        return (int)3L;
    }
    public static int SPLICE_F_MOVE() {
        return (int)1L;
    }
    public static int SPLICE_F_NONBLOCK() {
        return (int)2L;
    }
    public static int SPLICE_F_MORE() {
        return (int)4L;
    }
    public static int SPLICE_F_GIFT() {
        return (int)8L;
    }
    public static int FALLOC_FL_KEEP_SIZE() {
        return (int)1L;
    }
    public static int FALLOC_FL_PUNCH_HOLE() {
        return (int)2L;
    }
    public static int FALLOC_FL_NO_HIDE_STALE() {
        return (int)4L;
    }
    public static int FALLOC_FL_COLLAPSE_RANGE() {
        return (int)8L;
    }
    public static int FALLOC_FL_ZERO_RANGE() {
        return (int)16L;
    }
    public static int FALLOC_FL_INSERT_RANGE() {
        return (int)32L;
    }
    public static int FALLOC_FL_UNSHARE_RANGE() {
        return (int)64L;
    }
    public static int MAX_HANDLE_SZ() {
        return (int)128L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int _BITS_STAT_H() {
        return (int)1L;
    }
    public static int _BITS_STRUCT_STAT_H() {
        return (int)1L;
    }
    public static int __S_IFMT() {
        return (int)61440L;
    }
    public static int __S_IFDIR() {
        return (int)16384L;
    }
    public static int __S_IFCHR() {
        return (int)8192L;
    }
    public static int __S_IFBLK() {
        return (int)24576L;
    }
    public static int __S_IFREG() {
        return (int)32768L;
    }
    public static int __S_IFIFO() {
        return (int)4096L;
    }
    public static int __S_IFLNK() {
        return (int)40960L;
    }
    public static int __S_IFSOCK() {
        return (int)49152L;
    }
    public static int __S_ISUID() {
        return (int)2048L;
    }
    public static int __S_ISGID() {
        return (int)1024L;
    }
    public static int __S_ISVTX() {
        return (int)512L;
    }
    public static int __S_IREAD() {
        return (int)256L;
    }
    public static int __S_IWRITE() {
        return (int)128L;
    }
    public static int __S_IEXEC() {
        return (int)64L;
    }
    public static int R_OK() {
        return (int)4L;
    }
    public static int W_OK() {
        return (int)2L;
    }
    public static int X_OK() {
        return (int)1L;
    }
    public static int F_OK() {
        return (int)0L;
    }
    public static int AT_SYMLINK_NOFOLLOW() {
        return (int)256L;
    }
    public static int AT_REMOVEDIR() {
        return (int)512L;
    }
    public static int AT_SYMLINK_FOLLOW() {
        return (int)1024L;
    }
    public static int AT_NO_AUTOMOUNT() {
        return (int)2048L;
    }
    public static int AT_EMPTY_PATH() {
        return (int)4096L;
    }
    public static int AT_STATX_SYNC_TYPE() {
        return (int)24576L;
    }
    public static int AT_STATX_SYNC_AS_STAT() {
        return (int)0L;
    }
    public static int AT_STATX_FORCE_SYNC() {
        return (int)8192L;
    }
    public static int AT_STATX_DONT_SYNC() {
        return (int)16384L;
    }
    public static int AT_RECURSIVE() {
        return (int)32768L;
    }
    public static int AT_EACCESS() {
        return (int)512L;
    }
    public static int F_ULOCK() {
        return (int)0L;
    }
    public static int F_LOCK() {
        return (int)1L;
    }
    public static int F_TLOCK() {
        return (int)2L;
    }
    public static int F_TEST() {
        return (int)3L;
    }
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    public static int _SCHED_H() {
        return (int)1L;
    }
    public static int _BITS_SCHED_H() {
        return (int)1L;
    }
    public static int SCHED_OTHER() {
        return (int)0L;
    }
    public static int SCHED_FIFO() {
        return (int)1L;
    }
    public static int SCHED_RR() {
        return (int)2L;
    }
    public static int SCHED_BATCH() {
        return (int)3L;
    }
    public static int SCHED_ISO() {
        return (int)4L;
    }
    public static int SCHED_IDLE() {
        return (int)5L;
    }
    public static int SCHED_DEADLINE() {
        return (int)6L;
    }
    public static int SCHED_RESET_ON_FORK() {
        return (int)1073741824L;
    }
    public static int CSIGNAL() {
        return (int)255L;
    }
    public static int CLONE_VM() {
        return (int)256L;
    }
    public static int CLONE_FS() {
        return (int)512L;
    }
    public static int CLONE_FILES() {
        return (int)1024L;
    }
    public static int CLONE_SIGHAND() {
        return (int)2048L;
    }
    public static int CLONE_PIDFD() {
        return (int)4096L;
    }
    public static int CLONE_PTRACE() {
        return (int)8192L;
    }
    public static int CLONE_VFORK() {
        return (int)16384L;
    }
    public static int CLONE_PARENT() {
        return (int)32768L;
    }
    public static int CLONE_THREAD() {
        return (int)65536L;
    }
    public static int CLONE_NEWNS() {
        return (int)131072L;
    }
    public static int CLONE_SYSVSEM() {
        return (int)262144L;
    }
    public static int CLONE_SETTLS() {
        return (int)524288L;
    }
    public static int CLONE_PARENT_SETTID() {
        return (int)1048576L;
    }
    public static int CLONE_CHILD_CLEARTID() {
        return (int)2097152L;
    }
    public static int CLONE_DETACHED() {
        return (int)4194304L;
    }
    public static int CLONE_UNTRACED() {
        return (int)8388608L;
    }
    public static int CLONE_CHILD_SETTID() {
        return (int)16777216L;
    }
    public static int CLONE_NEWCGROUP() {
        return (int)33554432L;
    }
    public static int CLONE_NEWUTS() {
        return (int)67108864L;
    }
    public static int CLONE_NEWIPC() {
        return (int)134217728L;
    }
    public static int CLONE_NEWUSER() {
        return (int)268435456L;
    }
    public static int CLONE_NEWPID() {
        return (int)536870912L;
    }
    public static int CLONE_NEWNET() {
        return (int)1073741824L;
    }
    public static int CLONE_NEWTIME() {
        return (int)128L;
    }
    public static int _BITS_TYPES_STRUCT_SCHED_PARAM() {
        return (int)1L;
    }
    public static int _BITS_CPU_SET_H() {
        return (int)1L;
    }
    public static int __CPU_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_SIGNUM_GENERIC_H() {
        return (int)1L;
    }
    public static int SIGINT() {
        return (int)2L;
    }
    public static int SIGILL() {
        return (int)4L;
    }
    public static int SIGABRT() {
        return (int)6L;
    }
    public static int SIGFPE() {
        return (int)8L;
    }
    public static int SIGSEGV() {
        return (int)11L;
    }
    public static int SIGTERM() {
        return (int)15L;
    }
    public static int SIGHUP() {
        return (int)1L;
    }
    public static int SIGQUIT() {
        return (int)3L;
    }
    public static int SIGTRAP() {
        return (int)5L;
    }
    public static int SIGKILL() {
        return (int)9L;
    }
    public static int SIGPIPE() {
        return (int)13L;
    }
    public static int SIGALRM() {
        return (int)14L;
    }
    public static int _BITS_SIGNUM_ARCH_H() {
        return (int)1L;
    }
    public static int SIGSTKFLT() {
        return (int)16L;
    }
    public static int SIGPWR() {
        return (int)30L;
    }
    public static int SIGBUS() {
        return (int)7L;
    }
    public static int SIGSYS() {
        return (int)31L;
    }
    public static int SIGURG() {
        return (int)23L;
    }
    public static int SIGSTOP() {
        return (int)19L;
    }
    public static int SIGTSTP() {
        return (int)20L;
    }
    public static int SIGCONT() {
        return (int)18L;
    }
    public static int SIGCHLD() {
        return (int)17L;
    }
    public static int SIGTTIN() {
        return (int)21L;
    }
    public static int SIGTTOU() {
        return (int)22L;
    }
    public static int SIGPOLL() {
        return (int)29L;
    }
    public static int SIGXFSZ() {
        return (int)25L;
    }
    public static int SIGXCPU() {
        return (int)24L;
    }
    public static int SIGVTALRM() {
        return (int)26L;
    }
    public static int SIGPROF() {
        return (int)27L;
    }
    public static int SIGUSR1() {
        return (int)10L;
    }
    public static int SIGUSR2() {
        return (int)12L;
    }
    public static int SIGWINCH() {
        return (int)28L;
    }
    public static int __SIGRTMIN() {
        return (int)32L;
    }
    public static int __SIGRTMAX() {
        return (int)64L;
    }
    public static int __sig_atomic_t_defined() {
        return (int)1L;
    }
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    public static int __siginfo_t_defined() {
        return (int)1L;
    }
    public static int __SI_MAX_SIZE() {
        return (int)128L;
    }
    public static int _BITS_SIGINFO_ARCH_H() {
        return (int)1L;
    }
    public static int __SI_ERRNO_THEN_CODE() {
        return (int)1L;
    }
    public static int __SI_HAVE_SIGSYS() {
        return (int)1L;
    }
    public static int _BITS_SIGINFO_CONSTS_H() {
        return (int)1L;
    }
    public static int __SI_ASYNCIO_AFTER_SIGIO() {
        return (int)1L;
    }
    public static int _BITS_SIGINFO_CONSTS_ARCH_H() {
        return (int)1L;
    }
    public static int __sigevent_t_defined() {
        return (int)1L;
    }
    public static int __SIGEV_MAX_SIZE() {
        return (int)64L;
    }
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    public static int _BITS_SIGEVENT_CONSTS_H() {
        return (int)1L;
    }
    public static int _BITS_SIGACTION_H() {
        return (int)1L;
    }
    public static int SA_NOCLDSTOP() {
        return (int)1L;
    }
    public static int SA_NOCLDWAIT() {
        return (int)2L;
    }
    public static int SA_SIGINFO() {
        return (int)4L;
    }
    public static int SA_ONSTACK() {
        return (int)134217728L;
    }
    public static int SA_RESTART() {
        return (int)268435456L;
    }
    public static int SA_NODEFER() {
        return (int)1073741824L;
    }
    public static int SA_INTERRUPT() {
        return (int)536870912L;
    }
    public static int SIG_BLOCK() {
        return (int)0L;
    }
    public static int SIG_UNBLOCK() {
        return (int)1L;
    }
    public static int SIG_SETMASK() {
        return (int)2L;
    }
    public static int _BITS_SIGCONTEXT_H() {
        return (int)1L;
    }
    public static int __stack_t_defined() {
        return (int)1L;
    }
    public static int _SYS_UCONTEXT_H() {
        return (int)1L;
    }
    public static int __NGREG() {
        return (int)23L;
    }
    public static int _BITS_SIGSTACK_H() {
        return (int)1L;
    }
    public static int MINSIGSTKSZ() {
        return (int)2048L;
    }
    public static int SIGSTKSZ() {
        return (int)8192L;
    }
    public static int _UNISTD_H() {
        return (int)1L;
    }
    public static int _XOPEN_VERSION() {
        return (int)700L;
    }
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    public static int _XOPEN_XPG2() {
        return (int)1L;
    }
    public static int _XOPEN_XPG3() {
        return (int)1L;
    }
    public static int _XOPEN_XPG4() {
        return (int)1L;
    }
    public static int _XOPEN_UNIX() {
        return (int)1L;
    }
    public static int _XOPEN_ENH_I18N() {
        return (int)1L;
    }
    public static int _XOPEN_LEGACY() {
        return (int)1L;
    }
    public static int _BITS_POSIX_OPT_H() {
        return (int)1L;
    }
    public static int _POSIX_JOB_CONTROL() {
        return (int)1L;
    }
    public static int _POSIX_SAVED_IDS() {
        return (int)1L;
    }
    public static int _POSIX_CHOWN_RESTRICTED() {
        return (int)0L;
    }
    public static int _POSIX_NO_TRUNC() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME() {
        return (int)1L;
    }
    public static int _XOPEN_REALTIME_THREADS() {
        return (int)1L;
    }
    public static int _XOPEN_SHM() {
        return (int)1L;
    }
    public static int _POSIX_REENTRANT_FUNCTIONS() {
        return (int)1L;
    }
    public static int _POSIX_ASYNC_IO() {
        return (int)1L;
    }
    public static int _LFS_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS64_ASYNCHRONOUS_IO() {
        return (int)1L;
    }
    public static int _LFS_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_LARGEFILE() {
        return (int)1L;
    }
    public static int _LFS64_STDIO() {
        return (int)1L;
    }
    public static int _POSIX_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_THREAD_CPUTIME() {
        return (int)0L;
    }
    public static int _POSIX_REGEXP() {
        return (int)1L;
    }
    public static int _POSIX_SHELL() {
        return (int)1L;
    }
    public static int _POSIX_MONOTONIC_CLOCK() {
        return (int)0L;
    }
    public static int _POSIX_V7_LP64_OFF64() {
        return (int)1L;
    }
    public static int _POSIX_V6_LP64_OFF64() {
        return (int)1L;
    }
    public static int _XBS5_LP64_OFF64() {
        return (int)1L;
    }
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    public static int _GETOPT_POSIX_H() {
        return (int)1L;
    }
    public static int _GETOPT_CORE_H() {
        return (int)1L;
    }
    public static int _BITS_SS_FLAGS_H() {
        return (int)1L;
    }
    public static int __sigstack_defined() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    public static int _BITS_SIGTHREAD_H() {
        return (int)1L;
    }
    public static int true_() {
        return (int)1L;
    }
    public static int false_() {
        return (int)0L;
    }
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    public static int _SYS_SOCKET_H() {
        return (int)1L;
    }
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    public static int __timeval_defined() {
        return (int)1L;
    }
    public static int PF_UNSPEC() {
        return (int)0L;
    }
    public static int PF_LOCAL() {
        return (int)1L;
    }
    public static int PF_INET() {
        return (int)2L;
    }
    public static int PF_AX25() {
        return (int)3L;
    }
    public static int PF_IPX() {
        return (int)4L;
    }
    public static int PF_APPLETALK() {
        return (int)5L;
    }
    public static int PF_NETROM() {
        return (int)6L;
    }
    public static int PF_BRIDGE() {
        return (int)7L;
    }
    public static int PF_ATMPVC() {
        return (int)8L;
    }
    public static int PF_X25() {
        return (int)9L;
    }
    public static int PF_INET6() {
        return (int)10L;
    }
    public static int PF_ROSE() {
        return (int)11L;
    }
    public static int PF_DECnet() {
        return (int)12L;
    }
    public static int PF_NETBEUI() {
        return (int)13L;
    }
    public static int PF_SECURITY() {
        return (int)14L;
    }
    public static int PF_KEY() {
        return (int)15L;
    }
    public static int PF_NETLINK() {
        return (int)16L;
    }
    public static int PF_PACKET() {
        return (int)17L;
    }
    public static int PF_ASH() {
        return (int)18L;
    }
    public static int PF_ECONET() {
        return (int)19L;
    }
    public static int PF_ATMSVC() {
        return (int)20L;
    }
    public static int PF_RDS() {
        return (int)21L;
    }
    public static int PF_SNA() {
        return (int)22L;
    }
    public static int PF_IRDA() {
        return (int)23L;
    }
    public static int PF_PPPOX() {
        return (int)24L;
    }
    public static int PF_WANPIPE() {
        return (int)25L;
    }
    public static int PF_LLC() {
        return (int)26L;
    }
    public static int PF_IB() {
        return (int)27L;
    }
    public static int PF_MPLS() {
        return (int)28L;
    }
    public static int PF_CAN() {
        return (int)29L;
    }
    public static int PF_TIPC() {
        return (int)30L;
    }
    public static int PF_BLUETOOTH() {
        return (int)31L;
    }
    public static int PF_IUCV() {
        return (int)32L;
    }
    public static int PF_RXRPC() {
        return (int)33L;
    }
    public static int PF_ISDN() {
        return (int)34L;
    }
    public static int PF_PHONET() {
        return (int)35L;
    }
    public static int PF_IEEE802154() {
        return (int)36L;
    }
    public static int PF_CAIF() {
        return (int)37L;
    }
    public static int PF_ALG() {
        return (int)38L;
    }
    public static int PF_NFC() {
        return (int)39L;
    }
    public static int PF_VSOCK() {
        return (int)40L;
    }
    public static int PF_KCM() {
        return (int)41L;
    }
    public static int PF_QIPCRTR() {
        return (int)42L;
    }
    public static int PF_SMC() {
        return (int)43L;
    }
    public static int PF_XDP() {
        return (int)44L;
    }
    public static int PF_MCTP() {
        return (int)45L;
    }
    public static int PF_MAX() {
        return (int)46L;
    }
    public static int SOL_RAW() {
        return (int)255L;
    }
    public static int SOL_DECNET() {
        return (int)261L;
    }
    public static int SOL_X25() {
        return (int)262L;
    }
    public static int SOL_PACKET() {
        return (int)263L;
    }
    public static int SOL_ATM() {
        return (int)264L;
    }
    public static int SOL_AAL() {
        return (int)265L;
    }
    public static int SOL_IRDA() {
        return (int)266L;
    }
    public static int SOL_NETBEUI() {
        return (int)267L;
    }
    public static int SOL_LLC() {
        return (int)268L;
    }
    public static int SOL_DCCP() {
        return (int)269L;
    }
    public static int SOL_NETLINK() {
        return (int)270L;
    }
    public static int SOL_TIPC() {
        return (int)271L;
    }
    public static int SOL_RXRPC() {
        return (int)272L;
    }
    public static int SOL_PPPOL2TP() {
        return (int)273L;
    }
    public static int SOL_BLUETOOTH() {
        return (int)274L;
    }
    public static int SOL_PNPIPE() {
        return (int)275L;
    }
    public static int SOL_RDS() {
        return (int)276L;
    }
    public static int SOL_IUCV() {
        return (int)277L;
    }
    public static int SOL_CAIF() {
        return (int)278L;
    }
    public static int SOL_ALG() {
        return (int)279L;
    }
    public static int SOL_NFC() {
        return (int)280L;
    }
    public static int SOL_KCM() {
        return (int)281L;
    }
    public static int SOL_TLS() {
        return (int)282L;
    }
    public static int SOL_XDP() {
        return (int)283L;
    }
    public static int SOL_MPTCP() {
        return (int)284L;
    }
    public static int SOL_MCTP() {
        return (int)285L;
    }
    public static int SOL_SMC() {
        return (int)286L;
    }
    public static int SOMAXCONN() {
        return (int)4096L;
    }
    public static int _BITS_SOCKADDR_H() {
        return (int)1L;
    }
    public static int _SS_SIZE() {
        return (int)128L;
    }
    public static int FIOSETOWN() {
        return (int)35073L;
    }
    public static int SIOCSPGRP() {
        return (int)35074L;
    }
    public static int FIOGETOWN() {
        return (int)35075L;
    }
    public static int SIOCGPGRP() {
        return (int)35076L;
    }
    public static int SIOCATMARK() {
        return (int)35077L;
    }
    public static int SIOCGSTAMP_OLD() {
        return (int)35078L;
    }
    public static int SIOCGSTAMPNS_OLD() {
        return (int)35079L;
    }
    public static int SOL_SOCKET() {
        return (int)1L;
    }
    public static int SO_DEBUG() {
        return (int)1L;
    }
    public static int SO_REUSEADDR() {
        return (int)2L;
    }
    public static int SO_TYPE() {
        return (int)3L;
    }
    public static int SO_ERROR() {
        return (int)4L;
    }
    public static int SO_DONTROUTE() {
        return (int)5L;
    }
    public static int SO_BROADCAST() {
        return (int)6L;
    }
    public static int SO_SNDBUF() {
        return (int)7L;
    }
    public static int SO_RCVBUF() {
        return (int)8L;
    }
    public static int SO_SNDBUFFORCE() {
        return (int)32L;
    }
    public static int SO_RCVBUFFORCE() {
        return (int)33L;
    }
    public static int SO_KEEPALIVE() {
        return (int)9L;
    }
    public static int SO_OOBINLINE() {
        return (int)10L;
    }
    public static int SO_NO_CHECK() {
        return (int)11L;
    }
    public static int SO_PRIORITY() {
        return (int)12L;
    }
    public static int SO_LINGER() {
        return (int)13L;
    }
    public static int SO_BSDCOMPAT() {
        return (int)14L;
    }
    public static int SO_REUSEPORT() {
        return (int)15L;
    }
    public static int SO_PASSCRED() {
        return (int)16L;
    }
    public static int SO_PEERCRED() {
        return (int)17L;
    }
    public static int SO_RCVLOWAT() {
        return (int)18L;
    }
    public static int SO_SNDLOWAT() {
        return (int)19L;
    }
    public static int SO_RCVTIMEO_OLD() {
        return (int)20L;
    }
    public static int SO_SNDTIMEO_OLD() {
        return (int)21L;
    }
    public static int SO_SECURITY_AUTHENTICATION() {
        return (int)22L;
    }
    public static int SO_SECURITY_ENCRYPTION_TRANSPORT() {
        return (int)23L;
    }
    public static int SO_SECURITY_ENCRYPTION_NETWORK() {
        return (int)24L;
    }
    public static int SO_BINDTODEVICE() {
        return (int)25L;
    }
    public static int SO_ATTACH_FILTER() {
        return (int)26L;
    }
    public static int SO_DETACH_FILTER() {
        return (int)27L;
    }
    public static int SO_PEERNAME() {
        return (int)28L;
    }
    public static int SO_ACCEPTCONN() {
        return (int)30L;
    }
    public static int SO_PEERSEC() {
        return (int)31L;
    }
    public static int SO_PASSSEC() {
        return (int)34L;
    }
    public static int SO_MARK() {
        return (int)36L;
    }
    public static int SO_PROTOCOL() {
        return (int)38L;
    }
    public static int SO_DOMAIN() {
        return (int)39L;
    }
    public static int SO_RXQ_OVFL() {
        return (int)40L;
    }
    public static int SO_WIFI_STATUS() {
        return (int)41L;
    }
    public static int SO_PEEK_OFF() {
        return (int)42L;
    }
    public static int SO_NOFCS() {
        return (int)43L;
    }
    public static int SO_LOCK_FILTER() {
        return (int)44L;
    }
    public static int SO_SELECT_ERR_QUEUE() {
        return (int)45L;
    }
    public static int SO_BUSY_POLL() {
        return (int)46L;
    }
    public static int SO_MAX_PACING_RATE() {
        return (int)47L;
    }
    public static int SO_BPF_EXTENSIONS() {
        return (int)48L;
    }
    public static int SO_INCOMING_CPU() {
        return (int)49L;
    }
    public static int SO_ATTACH_BPF() {
        return (int)50L;
    }
    public static int SO_ATTACH_REUSEPORT_CBPF() {
        return (int)51L;
    }
    public static int SO_ATTACH_REUSEPORT_EBPF() {
        return (int)52L;
    }
    public static int SO_CNX_ADVICE() {
        return (int)53L;
    }
    public static int SCM_TIMESTAMPING_OPT_STATS() {
        return (int)54L;
    }
    public static int SO_MEMINFO() {
        return (int)55L;
    }
    public static int SO_INCOMING_NAPI_ID() {
        return (int)56L;
    }
    public static int SO_COOKIE() {
        return (int)57L;
    }
    public static int SCM_TIMESTAMPING_PKTINFO() {
        return (int)58L;
    }
    public static int SO_PEERGROUPS() {
        return (int)59L;
    }
    public static int SO_ZEROCOPY() {
        return (int)60L;
    }
    public static int SO_TXTIME() {
        return (int)61L;
    }
    public static int SO_BINDTOIFINDEX() {
        return (int)62L;
    }
    public static int SO_TIMESTAMP_OLD() {
        return (int)29L;
    }
    public static int SO_TIMESTAMPNS_OLD() {
        return (int)35L;
    }
    public static int SO_TIMESTAMPING_OLD() {
        return (int)37L;
    }
    public static int SO_TIMESTAMP_NEW() {
        return (int)63L;
    }
    public static int SO_TIMESTAMPNS_NEW() {
        return (int)64L;
    }
    public static int SO_TIMESTAMPING_NEW() {
        return (int)65L;
    }
    public static int SO_RCVTIMEO_NEW() {
        return (int)66L;
    }
    public static int SO_SNDTIMEO_NEW() {
        return (int)67L;
    }
    public static int SO_DETACH_REUSEPORT_BPF() {
        return (int)68L;
    }
    public static int SO_PREFER_BUSY_POLL() {
        return (int)69L;
    }
    public static int SO_BUSY_POLL_BUDGET() {
        return (int)70L;
    }
    public static int SO_NETNS_COOKIE() {
        return (int)71L;
    }
    public static int SO_BUF_LOCK() {
        return (int)72L;
    }
    public static int SO_RESERVE_MEM() {
        return (int)73L;
    }
    public static int SO_TXREHASH() {
        return (int)74L;
    }
    public static int SO_RCVMARK() {
        return (int)75L;
    }
    public static int __osockaddr_defined() {
        return (int)1L;
    }
    public static int _SYS_STAT_H() {
        return (int)1L;
    }
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    public static int STATX_ATTR_COMPRESSED() {
        return (int)4L;
    }
    public static int STATX_ATTR_IMMUTABLE() {
        return (int)16L;
    }
    public static int STATX_ATTR_APPEND() {
        return (int)32L;
    }
    public static int STATX_ATTR_NODUMP() {
        return (int)64L;
    }
    public static int STATX_ATTR_ENCRYPTED() {
        return (int)2048L;
    }
    public static int STATX_ATTR_AUTOMOUNT() {
        return (int)4096L;
    }
    public static int STATX_ATTR_MOUNT_ROOT() {
        return (int)8192L;
    }
    public static int STATX_ATTR_VERITY() {
        return (int)1048576L;
    }
    public static int STATX_ATTR_DAX() {
        return (int)2097152L;
    }
    public static int __statx_timestamp_defined() {
        return (int)1L;
    }
    public static int __statx_defined() {
        return (int)1L;
    }
    public static int _SYS_UIO_H() {
        return (int)1L;
    }
    public static int _BITS_UIO_LIM_H() {
        return (int)1L;
    }
    public static int __IOV_MAX() {
        return (int)1024L;
    }
    public static int _BITS_UIO_EXT_H() {
        return (int)1L;
    }
    public static int RWF_HIPRI() {
        return (int)1L;
    }
    public static int RWF_DSYNC() {
        return (int)2L;
    }
    public static int RWF_SYNC() {
        return (int)4L;
    }
    public static int RWF_NOWAIT() {
        return (int)8L;
    }
    public static int RWF_APPEND() {
        return (int)16L;
    }
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int _BITS_TIMEX_H() {
        return (int)1L;
    }
    public static int ADJ_OFFSET() {
        return (int)1L;
    }
    public static int ADJ_FREQUENCY() {
        return (int)2L;
    }
    public static int ADJ_MAXERROR() {
        return (int)4L;
    }
    public static int ADJ_ESTERROR() {
        return (int)8L;
    }
    public static int ADJ_STATUS() {
        return (int)16L;
    }
    public static int ADJ_TIMECONST() {
        return (int)32L;
    }
    public static int ADJ_TAI() {
        return (int)128L;
    }
    public static int ADJ_SETOFFSET() {
        return (int)256L;
    }
    public static int ADJ_MICRO() {
        return (int)4096L;
    }
    public static int ADJ_NANO() {
        return (int)8192L;
    }
    public static int ADJ_TICK() {
        return (int)16384L;
    }
    public static int ADJ_OFFSET_SINGLESHOT() {
        return (int)32769L;
    }
    public static int ADJ_OFFSET_SS_READ() {
        return (int)40961L;
    }
    public static int STA_PLL() {
        return (int)1L;
    }
    public static int STA_PPSFREQ() {
        return (int)2L;
    }
    public static int STA_PPSTIME() {
        return (int)4L;
    }
    public static int STA_FLL() {
        return (int)8L;
    }
    public static int STA_INS() {
        return (int)16L;
    }
    public static int STA_DEL() {
        return (int)32L;
    }
    public static int STA_UNSYNC() {
        return (int)64L;
    }
    public static int STA_FREQHOLD() {
        return (int)128L;
    }
    public static int STA_PPSSIGNAL() {
        return (int)256L;
    }
    public static int STA_PPSJITTER() {
        return (int)512L;
    }
    public static int STA_PPSWANDER() {
        return (int)1024L;
    }
    public static int STA_PPSERROR() {
        return (int)2048L;
    }
    public static int STA_CLOCKERR() {
        return (int)4096L;
    }
    public static int STA_NANO() {
        return (int)8192L;
    }
    public static int STA_MODE() {
        return (int)16384L;
    }
    public static int STA_CLK() {
        return (int)32768L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int memory_order_relaxed() {
        return (int)0L;
    }
    public static int memory_order_consume() {
        return (int)1L;
    }
    public static int memory_order_acquire() {
        return (int)2L;
    }
    public static int memory_order_release() {
        return (int)3L;
    }
    public static int memory_order_acq_rel() {
        return (int)4L;
    }
    public static int memory_order_seq_cst() {
        return (int)5L;
    }
    public static MethodHandle atomic_thread_fence$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_thread_fence$MH,"atomic_thread_fence");
    }
    public static void atomic_thread_fence ( int x0) {
        var mh$ = atomic_thread_fence$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atomic_signal_fence$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_signal_fence$MH,"atomic_signal_fence");
    }
    public static void atomic_signal_fence ( int x0) {
        var mh$ = atomic_signal_fence$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atomic_flag_test_and_set$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_flag_test_and_set$MH,"atomic_flag_test_and_set");
    }
    public static boolean atomic_flag_test_and_set ( Addressable x0) {
        var mh$ = atomic_flag_test_and_set$MH();
        try {
            return (boolean)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atomic_flag_test_and_set_explicit$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_flag_test_and_set_explicit$MH,"atomic_flag_test_and_set_explicit");
    }
    public static boolean atomic_flag_test_and_set_explicit ( Addressable x0,  int x1) {
        var mh$ = atomic_flag_test_and_set_explicit$MH();
        try {
            return (boolean)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atomic_flag_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_flag_clear$MH,"atomic_flag_clear");
    }
    public static void atomic_flag_clear ( Addressable x0) {
        var mh$ = atomic_flag_clear$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atomic_flag_clear_explicit$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atomic_flag_clear_explicit$MH,"atomic_flag_clear_explicit");
    }
    public static void atomic_flag_clear_explicit ( Addressable x0,  int x1) {
        var mh$ = atomic_flag_clear_explicit$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


