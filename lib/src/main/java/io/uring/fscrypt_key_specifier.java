// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fscrypt_key_specifier {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        Constants$root.C_INT$LAYOUT.withName("__reserved"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("__reserved"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("descriptor"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("identifier")
        ).withName("u")
    ).withName("fscrypt_key_specifier");
    public static MemoryLayout $LAYOUT() {
        return fscrypt_key_specifier.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return fscrypt_key_specifier.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)fscrypt_key_specifier.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        fscrypt_key_specifier.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)fscrypt_key_specifier.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        fscrypt_key_specifier.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__reserved"));
    public static VarHandle __reserved$VH() {
        return fscrypt_key_specifier.__reserved$VH;
    }
    public static int __reserved$get(MemorySegment seg) {
        return (int)fscrypt_key_specifier.__reserved$VH.get(seg);
    }
    public static void __reserved$set( MemorySegment seg, int x) {
        fscrypt_key_specifier.__reserved$VH.set(seg, x);
    }
    public static int __reserved$get(MemorySegment seg, long index) {
        return (int)fscrypt_key_specifier.__reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __reserved$set(MemorySegment seg, long index, int x) {
        fscrypt_key_specifier.__reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("__reserved"),
            MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("descriptor"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("identifier")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static MemorySegment __reserved$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static MemorySegment descriptor$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static MemorySegment identifier$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


