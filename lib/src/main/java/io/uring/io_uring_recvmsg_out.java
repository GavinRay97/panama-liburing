// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class io_uring_recvmsg_out {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("namelen"),
        Constants$root.C_INT$LAYOUT.withName("controllen"),
        Constants$root.C_INT$LAYOUT.withName("payloadlen"),
        Constants$root.C_INT$LAYOUT.withName("flags")
    ).withName("io_uring_recvmsg_out");
    public static MemoryLayout $LAYOUT() {
        return io_uring_recvmsg_out.$struct$LAYOUT;
    }
    static final VarHandle namelen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("namelen"));
    public static VarHandle namelen$VH() {
        return io_uring_recvmsg_out.namelen$VH;
    }
    public static int namelen$get(MemorySegment seg) {
        return (int)io_uring_recvmsg_out.namelen$VH.get(seg);
    }
    public static void namelen$set( MemorySegment seg, int x) {
        io_uring_recvmsg_out.namelen$VH.set(seg, x);
    }
    public static int namelen$get(MemorySegment seg, long index) {
        return (int)io_uring_recvmsg_out.namelen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void namelen$set(MemorySegment seg, long index, int x) {
        io_uring_recvmsg_out.namelen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle controllen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("controllen"));
    public static VarHandle controllen$VH() {
        return io_uring_recvmsg_out.controllen$VH;
    }
    public static int controllen$get(MemorySegment seg) {
        return (int)io_uring_recvmsg_out.controllen$VH.get(seg);
    }
    public static void controllen$set( MemorySegment seg, int x) {
        io_uring_recvmsg_out.controllen$VH.set(seg, x);
    }
    public static int controllen$get(MemorySegment seg, long index) {
        return (int)io_uring_recvmsg_out.controllen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void controllen$set(MemorySegment seg, long index, int x) {
        io_uring_recvmsg_out.controllen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle payloadlen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("payloadlen"));
    public static VarHandle payloadlen$VH() {
        return io_uring_recvmsg_out.payloadlen$VH;
    }
    public static int payloadlen$get(MemorySegment seg) {
        return (int)io_uring_recvmsg_out.payloadlen$VH.get(seg);
    }
    public static void payloadlen$set( MemorySegment seg, int x) {
        io_uring_recvmsg_out.payloadlen$VH.set(seg, x);
    }
    public static int payloadlen$get(MemorySegment seg, long index) {
        return (int)io_uring_recvmsg_out.payloadlen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void payloadlen$set(MemorySegment seg, long index, int x) {
        io_uring_recvmsg_out.payloadlen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return io_uring_recvmsg_out.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)io_uring_recvmsg_out.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        io_uring_recvmsg_out.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)io_uring_recvmsg_out.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        io_uring_recvmsg_out.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


