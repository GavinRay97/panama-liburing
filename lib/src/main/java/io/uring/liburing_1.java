// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class liburing_1 {

    public static OfShort __s16 = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __s32 = Constants$root.C_INT$LAYOUT;
    public static OfLong __s64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_mqd_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_long_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_ipc_pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __kernel_ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_old_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __kernel_clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __kernel_timer_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __kernel_clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __kernel_caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static int FSCONFIG_SET_FLAG() {
        return (int)0L;
    }
    public static int FSCONFIG_SET_STRING() {
        return (int)1L;
    }
    public static int FSCONFIG_SET_BINARY() {
        return (int)2L;
    }
    public static int FSCONFIG_SET_PATH() {
        return (int)3L;
    }
    public static int FSCONFIG_SET_PATH_EMPTY() {
        return (int)4L;
    }
    public static int FSCONFIG_SET_FD() {
        return (int)5L;
    }
    public static int FSCONFIG_CMD_CREATE() {
        return (int)6L;
    }
    public static int FSCONFIG_CMD_RECONFIGURE() {
        return (int)7L;
    }
    public static OfInt __kernel_rwf_t = Constants$root.C_INT$LAYOUT;
    public static int IOSQE_FIXED_FILE_BIT() {
        return (int)0L;
    }
    public static int IOSQE_IO_DRAIN_BIT() {
        return (int)1L;
    }
    public static int IOSQE_IO_LINK_BIT() {
        return (int)2L;
    }
    public static int IOSQE_IO_HARDLINK_BIT() {
        return (int)3L;
    }
    public static int IOSQE_ASYNC_BIT() {
        return (int)4L;
    }
    public static int IOSQE_BUFFER_SELECT_BIT() {
        return (int)5L;
    }
    public static int IOSQE_CQE_SKIP_SUCCESS_BIT() {
        return (int)6L;
    }
    public static int IORING_OP_NOP() {
        return (int)0L;
    }
    public static int IORING_OP_READV() {
        return (int)1L;
    }
    public static int IORING_OP_WRITEV() {
        return (int)2L;
    }
    public static int IORING_OP_FSYNC() {
        return (int)3L;
    }
    public static int IORING_OP_READ_FIXED() {
        return (int)4L;
    }
    public static int IORING_OP_WRITE_FIXED() {
        return (int)5L;
    }
    public static int IORING_OP_POLL_ADD() {
        return (int)6L;
    }
    public static int IORING_OP_POLL_REMOVE() {
        return (int)7L;
    }
    public static int IORING_OP_SYNC_FILE_RANGE() {
        return (int)8L;
    }
    public static int IORING_OP_SENDMSG() {
        return (int)9L;
    }
    public static int IORING_OP_RECVMSG() {
        return (int)10L;
    }
    public static int IORING_OP_TIMEOUT() {
        return (int)11L;
    }
    public static int IORING_OP_TIMEOUT_REMOVE() {
        return (int)12L;
    }
    public static int IORING_OP_ACCEPT() {
        return (int)13L;
    }
    public static int IORING_OP_ASYNC_CANCEL() {
        return (int)14L;
    }
    public static int IORING_OP_LINK_TIMEOUT() {
        return (int)15L;
    }
    public static int IORING_OP_CONNECT() {
        return (int)16L;
    }
    public static int IORING_OP_FALLOCATE() {
        return (int)17L;
    }
    public static int IORING_OP_OPENAT() {
        return (int)18L;
    }
    public static int IORING_OP_CLOSE() {
        return (int)19L;
    }
    public static int IORING_OP_FILES_UPDATE() {
        return (int)20L;
    }
    public static int IORING_OP_STATX() {
        return (int)21L;
    }
    public static int IORING_OP_READ() {
        return (int)22L;
    }
    public static int IORING_OP_WRITE() {
        return (int)23L;
    }
    public static int IORING_OP_FADVISE() {
        return (int)24L;
    }
    public static int IORING_OP_MADVISE() {
        return (int)25L;
    }
    public static int IORING_OP_SEND() {
        return (int)26L;
    }
    public static int IORING_OP_RECV() {
        return (int)27L;
    }
    public static int IORING_OP_OPENAT2() {
        return (int)28L;
    }
    public static int IORING_OP_EPOLL_CTL() {
        return (int)29L;
    }
    public static int IORING_OP_SPLICE() {
        return (int)30L;
    }
    public static int IORING_OP_PROVIDE_BUFFERS() {
        return (int)31L;
    }
    public static int IORING_OP_REMOVE_BUFFERS() {
        return (int)32L;
    }
    public static int IORING_OP_TEE() {
        return (int)33L;
    }
    public static int IORING_OP_SHUTDOWN() {
        return (int)34L;
    }
    public static int IORING_OP_RENAMEAT() {
        return (int)35L;
    }
    public static int IORING_OP_UNLINKAT() {
        return (int)36L;
    }
    public static int IORING_OP_MKDIRAT() {
        return (int)37L;
    }
    public static int IORING_OP_SYMLINKAT() {
        return (int)38L;
    }
    public static int IORING_OP_LINKAT() {
        return (int)39L;
    }
    public static int IORING_OP_MSG_RING() {
        return (int)40L;
    }
    public static int IORING_OP_FSETXATTR() {
        return (int)41L;
    }
    public static int IORING_OP_SETXATTR() {
        return (int)42L;
    }
    public static int IORING_OP_FGETXATTR() {
        return (int)43L;
    }
    public static int IORING_OP_GETXATTR() {
        return (int)44L;
    }
    public static int IORING_OP_SOCKET() {
        return (int)45L;
    }
    public static int IORING_OP_URING_CMD() {
        return (int)46L;
    }
    public static int IORING_OP_LAST() {
        return (int)47L;
    }
    public static int IORING_CQE_BUFFER_SHIFT() {
        return (int)16L;
    }
    public static int IORING_REGISTER_BUFFERS() {
        return (int)0L;
    }
    public static int IORING_UNREGISTER_BUFFERS() {
        return (int)1L;
    }
    public static int IORING_REGISTER_FILES() {
        return (int)2L;
    }
    public static int IORING_UNREGISTER_FILES() {
        return (int)3L;
    }
    public static int IORING_REGISTER_EVENTFD() {
        return (int)4L;
    }
    public static int IORING_UNREGISTER_EVENTFD() {
        return (int)5L;
    }
    public static int IORING_REGISTER_FILES_UPDATE() {
        return (int)6L;
    }
    public static int IORING_REGISTER_EVENTFD_ASYNC() {
        return (int)7L;
    }
    public static int IORING_REGISTER_PROBE() {
        return (int)8L;
    }
    public static int IORING_REGISTER_PERSONALITY() {
        return (int)9L;
    }
    public static int IORING_UNREGISTER_PERSONALITY() {
        return (int)10L;
    }
    public static int IORING_REGISTER_RESTRICTIONS() {
        return (int)11L;
    }
    public static int IORING_REGISTER_ENABLE_RINGS() {
        return (int)12L;
    }
    public static int IORING_REGISTER_FILES2() {
        return (int)13L;
    }
    public static int IORING_REGISTER_FILES_UPDATE2() {
        return (int)14L;
    }
    public static int IORING_REGISTER_BUFFERS2() {
        return (int)15L;
    }
    public static int IORING_REGISTER_BUFFERS_UPDATE() {
        return (int)16L;
    }
    public static int IORING_REGISTER_IOWQ_AFF() {
        return (int)17L;
    }
    public static int IORING_UNREGISTER_IOWQ_AFF() {
        return (int)18L;
    }
    public static int IORING_REGISTER_IOWQ_MAX_WORKERS() {
        return (int)19L;
    }
    public static int IORING_REGISTER_RING_FDS() {
        return (int)20L;
    }
    public static int IORING_UNREGISTER_RING_FDS() {
        return (int)21L;
    }
    public static int IORING_REGISTER_PBUF_RING() {
        return (int)22L;
    }
    public static int IORING_UNREGISTER_PBUF_RING() {
        return (int)23L;
    }
    public static int IORING_REGISTER_LAST() {
        return (int)24L;
    }
    public static int IO_WQ_BOUND() {
        return (int)0L;
    }
    public static int IO_WQ_UNBOUND() {
        return (int)1L;
    }
    public static int IORING_RESTRICTION_REGISTER_OP() {
        return (int)0L;
    }
    public static int IORING_RESTRICTION_SQE_OP() {
        return (int)1L;
    }
    public static int IORING_RESTRICTION_SQE_FLAGS_ALLOWED() {
        return (int)2L;
    }
    public static int IORING_RESTRICTION_SQE_FLAGS_REQUIRED() {
        return (int)3L;
    }
    public static int IORING_RESTRICTION_LAST() {
        return (int)4L;
    }
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$1.__errno_location$MH,"__errno_location");
    }
    public static MemoryAddress __errno_location () {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout program_invocation_name$LAYOUT() {
        return constants$1.program_invocation_name$LAYOUT;
    }
    public static VarHandle program_invocation_name$VH() {
        return constants$1.program_invocation_name$VH;
    }
    public static MemorySegment program_invocation_name$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.program_invocation_name$SEGMENT,"program_invocation_name");
    }
    public static MemoryAddress program_invocation_name$get() {
        return (java.lang.foreign.MemoryAddress) constants$1.program_invocation_name$VH.get(RuntimeHelper.requireNonNull(constants$1.program_invocation_name$SEGMENT, "program_invocation_name"));
    }
    public static void program_invocation_name$set( MemoryAddress x) {
        constants$1.program_invocation_name$VH.set(RuntimeHelper.requireNonNull(constants$1.program_invocation_name$SEGMENT, "program_invocation_name"), x);
    }
    public static MemoryLayout program_invocation_short_name$LAYOUT() {
        return constants$1.program_invocation_short_name$LAYOUT;
    }
    public static VarHandle program_invocation_short_name$VH() {
        return constants$1.program_invocation_short_name$VH;
    }
    public static MemorySegment program_invocation_short_name$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.program_invocation_short_name$SEGMENT,"program_invocation_short_name");
    }
    public static MemoryAddress program_invocation_short_name$get() {
        return (java.lang.foreign.MemoryAddress) constants$1.program_invocation_short_name$VH.get(RuntimeHelper.requireNonNull(constants$1.program_invocation_short_name$SEGMENT, "program_invocation_short_name"));
    }
    public static void program_invocation_short_name$set( MemoryAddress x) {
        constants$1.program_invocation_short_name$VH.set(RuntimeHelper.requireNonNull(constants$1.program_invocation_short_name$SEGMENT, "program_invocation_short_name"), x);
    }
    public static OfInt error_t = Constants$root.C_INT$LAYOUT;
    public static int F_OWNER_TID() {
        return (int)0L;
    }
    public static int F_OWNER_PID() {
        return (int)1L;
    }
    public static int F_OWNER_PGRP() {
        return (int)2L;
    }
    public static int F_OWNER_GID() {
        return (int)2L;
    }
    public static MethodHandle readahead$MH() {
        return RuntimeHelper.requireNonNull(constants$1.readahead$MH,"readahead");
    }
    public static long readahead ( int __fd,  long __offset,  long __count) {
        var mh$ = readahead$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$2.sync_file_range$MH,"sync_file_range");
    }
    public static int sync_file_range ( int __fd,  long __offset,  long __count,  int __flags) {
        var mh$ = sync_file_range$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __count, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vmsplice$MH() {
        return RuntimeHelper.requireNonNull(constants$2.vmsplice$MH,"vmsplice");
    }
    public static long vmsplice ( int __fdout,  Addressable __iov,  long __count,  int __flags) {
        var mh$ = vmsplice$MH();
        try {
            return (long)mh$.invokeExact(__fdout, __iov, __count, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle splice$MH() {
        return RuntimeHelper.requireNonNull(constants$2.splice$MH,"splice");
    }
    public static long splice ( int __fdin,  Addressable __offin,  int __fdout,  Addressable __offout,  long __len,  int __flags) {
        var mh$ = splice$MH();
        try {
            return (long)mh$.invokeExact(__fdin, __offin, __fdout, __offout, __len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tee$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tee$MH,"tee");
    }
    public static long tee ( int __fdin,  int __fdout,  long __len,  int __flags) {
        var mh$ = tee$MH();
        try {
            return (long)mh$.invokeExact(__fdin, __fdout, __len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fallocate$MH,"fallocate");
    }
    public static int fallocate ( int __fd,  int __mode,  long __offset,  long __len) {
        var mh$ = fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fallocate64$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fallocate64$MH,"fallocate64");
    }
    public static int fallocate64 ( int __fd,  int __mode,  long __offset,  long __len) {
        var mh$ = fallocate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle name_to_handle_at$MH() {
        return RuntimeHelper.requireNonNull(constants$3.name_to_handle_at$MH,"name_to_handle_at");
    }
    public static int name_to_handle_at ( int __dfd,  Addressable __name,  Addressable __handle,  Addressable __mnt_id,  int __flags) {
        var mh$ = name_to_handle_at$MH();
        try {
            return (int)mh$.invokeExact(__dfd, __name, __handle, __mnt_id, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_by_handle_at$MH() {
        return RuntimeHelper.requireNonNull(constants$3.open_by_handle_at$MH,"open_by_handle_at");
    }
    public static int open_by_handle_at ( int __mountdirfd,  Addressable __handle,  int __flags) {
        var mh$ = open_by_handle_at$MH();
        try {
            return (int)mh$.invokeExact(__mountdirfd, __handle, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle fcntl$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fcntl$MH,"fcntl");
    }
    public static int fcntl ( int __fd,  int __cmd, Object... x2) {
        var mh$ = fcntl$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcntl64$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fcntl64$MH,"fcntl64");
    }
    public static int fcntl64 ( int __fd,  int __cmd, Object... x2) {
        var mh$ = fcntl64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open$MH() {
        return RuntimeHelper.requireNonNull(constants$3.open$MH,"open");
    }
    public static int open ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = open$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open64$MH() {
        return RuntimeHelper.requireNonNull(constants$3.open64$MH,"open64");
    }
    public static int open64 ( Addressable __file,  int __oflag, Object... x2) {
        var mh$ = open64$MH();
        try {
            return (int)mh$.invokeExact(__file, __oflag, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.openat$MH,"openat");
    }
    public static int openat ( int __fd,  Addressable __file,  int __oflag, Object... x3) {
        var mh$ = openat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle openat64$MH() {
        return RuntimeHelper.requireNonNull(constants$4.openat64$MH,"openat64");
    }
    public static int openat64 ( int __fd,  Addressable __file,  int __oflag, Object... x3) {
        var mh$ = openat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __oflag, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat$MH() {
        return RuntimeHelper.requireNonNull(constants$4.creat$MH,"creat");
    }
    public static int creat ( Addressable __file,  int __mode) {
        var mh$ = creat$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle creat64$MH() {
        return RuntimeHelper.requireNonNull(constants$4.creat64$MH,"creat64");
    }
    public static int creat64 ( Addressable __file,  int __mode) {
        var mh$ = creat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lockf$MH,"lockf");
    }
    public static int lockf ( int __fd,  int __cmd,  long __len) {
        var mh$ = lockf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lockf64$MH() {
        return RuntimeHelper.requireNonNull(constants$4.lockf64$MH,"lockf64");
    }
    public static int lockf64 ( int __fd,  int __cmd,  long __len) {
        var mh$ = lockf64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __cmd, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise$MH() {
        return RuntimeHelper.requireNonNull(constants$5.posix_fadvise$MH,"posix_fadvise");
    }
    public static int posix_fadvise ( int __fd,  long __offset,  long __len,  int __advise) {
        var mh$ = posix_fadvise$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fadvise64$MH() {
        return RuntimeHelper.requireNonNull(constants$5.posix_fadvise64$MH,"posix_fadvise64");
    }
    public static int posix_fadvise64 ( int __fd,  long __offset,  long __len,  int __advise) {
        var mh$ = posix_fadvise64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len, __advise);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate$MH() {
        return RuntimeHelper.requireNonNull(constants$5.posix_fallocate$MH,"posix_fallocate");
    }
    public static int posix_fallocate ( int __fd,  long __offset,  long __len) {
        var mh$ = posix_fallocate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_fallocate64$MH() {
        return RuntimeHelper.requireNonNull(constants$5.posix_fallocate64$MH,"posix_fallocate64");
    }
    public static int posix_fallocate64 ( int __fd,  long __offset,  long __len) {
        var mh$ = posix_fallocate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __offset, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$5.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$5.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$6.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __arch_swab32$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__arch_swab32$MH,"__arch_swab32");
    }
    public static int __arch_swab32 ( int val) {
        var mh$ = __arch_swab32$MH();
        try {
            return (int)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __arch_swab64$MH() {
        return RuntimeHelper.requireNonNull(constants$6.__arch_swab64$MH,"__arch_swab64");
    }
    public static long __arch_swab64 ( long val) {
        var mh$ = __arch_swab64$MH();
        try {
            return (long)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fswab16$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__fswab16$MH,"__fswab16");
    }
    public static short __fswab16 ( short val) {
        var mh$ = __fswab16$MH();
        try {
            return (short)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fswab32$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__fswab32$MH,"__fswab32");
    }
    public static int __fswab32 ( int val) {
        var mh$ = __fswab32$MH();
        try {
            return (int)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fswab64$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__fswab64$MH,"__fswab64");
    }
    public static long __fswab64 ( long val) {
        var mh$ = __fswab64$MH();
        try {
            return (long)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fswahw32$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__fswahw32$MH,"__fswahw32");
    }
    public static int __fswahw32 ( int val) {
        var mh$ = __fswahw32$MH();
        try {
            return (int)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fswahb32$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__fswahb32$MH,"__fswahb32");
    }
    public static int __fswahb32 ( int val) {
        var mh$ = __fswahb32$MH();
        try {
            return (int)mh$.invokeExact(val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab$MH() {
        return RuntimeHelper.requireNonNull(constants$7.__swab$MH,"__swab");
    }
    public static long __swab ( long y) {
        var mh$ = __swab$MH();
        try {
            return (long)mh$.invokeExact(y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab16p$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swab16p$MH,"__swab16p");
    }
    public static short __swab16p ( Addressable p) {
        var mh$ = __swab16p$MH();
        try {
            return (short)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab32p$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swab32p$MH,"__swab32p");
    }
    public static int __swab32p ( Addressable p) {
        var mh$ = __swab32p$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab64p$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swab64p$MH,"__swab64p");
    }
    public static long __swab64p ( Addressable p) {
        var mh$ = __swab64p$MH();
        try {
            return (long)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swahw32p$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swahw32p$MH,"__swahw32p");
    }
    public static int __swahw32p ( Addressable p) {
        var mh$ = __swahw32p$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swahb32p$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swahb32p$MH,"__swahb32p");
    }
    public static int __swahb32p ( Addressable p) {
        var mh$ = __swahb32p$MH();
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab16s$MH() {
        return RuntimeHelper.requireNonNull(constants$8.__swab16s$MH,"__swab16s");
    }
    public static void __swab16s ( Addressable p) {
        var mh$ = __swab16s$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab32s$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swab32s$MH,"__swab32s");
    }
    public static void __swab32s ( Addressable p) {
        var mh$ = __swab32s$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swab64s$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swab64s$MH,"__swab64s");
    }
    public static void __swab64s ( Addressable p) {
        var mh$ = __swab64s$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swahw32s$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swahw32s$MH,"__swahw32s");
    }
    public static void __swahw32s ( Addressable p) {
        var mh$ = __swahw32s$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swahb32s$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__swahb32s$MH,"__swahb32s");
    }
    public static void __swahb32s ( Addressable p) {
        var mh$ = __swahb32s$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clone$MH() {
        return RuntimeHelper.requireNonNull(constants$10.clone$MH,"clone");
    }
    public static int clone ( Addressable __fn,  Addressable __child_stack,  int __flags,  Addressable __arg, Object... x4) {
        var mh$ = clone$MH();
        try {
            return (int)mh$.invokeExact(__fn, __child_stack, __flags, __arg, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unshare$MH() {
        return RuntimeHelper.requireNonNull(constants$10.unshare$MH,"unshare");
    }
    public static int unshare ( int __flags) {
        var mh$ = unshare$MH();
        try {
            return (int)mh$.invokeExact(__flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getcpu$MH() {
        return RuntimeHelper.requireNonNull(constants$10.sched_getcpu$MH,"sched_getcpu");
    }
    public static int sched_getcpu () {
        var mh$ = sched_getcpu$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcpu$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getcpu$MH,"getcpu");
    }
    public static int getcpu ( Addressable x0,  Addressable x1) {
        var mh$ = getcpu$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setns$MH() {
        return RuntimeHelper.requireNonNull(constants$10.setns$MH,"setns");
    }
    public static int setns ( int __fd,  int __nstype) {
        var mh$ = setns$MH();
        try {
            return (int)mh$.invokeExact(__fd, __nstype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$10.__sched_cpucount$MH,"__sched_cpucount");
    }
    public static int __sched_cpucount ( long __setsize,  Addressable __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$11.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    public static MemoryAddress __sched_cpualloc ( long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$11.__sched_cpufree$MH,"__sched_cpufree");
    }
    public static void __sched_cpufree ( Addressable __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sched_setparam$MH,"sched_setparam");
    }
    public static int sched_setparam ( int __pid,  Addressable __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sched_getparam$MH,"sched_getparam");
    }
    public static int sched_getparam ( int __pid,  Addressable __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sched_setscheduler$MH,"sched_setscheduler");
    }
    public static int sched_setscheduler ( int __pid,  int __policy,  Addressable __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$11.sched_getscheduler$MH,"sched_getscheduler");
    }
    public static int sched_getscheduler ( int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_yield$MH,"sched_yield");
    }
    public static int sched_yield () {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    public static int sched_get_priority_max ( int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    public static int sched_get_priority_min ( int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    public static int sched_rr_get_interval ( int __pid,  Addressable __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setaffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_setaffinity$MH,"sched_setaffinity");
    }
    public static int sched_setaffinity ( int __pid,  long __cpusetsize,  Addressable __cpuset) {
        var mh$ = sched_setaffinity$MH();
        try {
            return (int)mh$.invokeExact(__pid, __cpusetsize, __cpuset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getaffinity$MH() {
        return RuntimeHelper.requireNonNull(constants$12.sched_getaffinity$MH,"sched_getaffinity");
    }
    public static int sched_getaffinity ( int __pid,  long __cpusetsize,  Addressable __cpuset) {
        var mh$ = sched_getaffinity$MH();
        try {
            return (int)mh$.invokeExact(__pid, __cpusetsize, __cpuset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static int SI_ASYNCNL() {
        return (int)-60L;
    }
    public static int SI_DETHREAD() {
        return (int)-7L;
    }
    public static int SI_TKILL() {
        return (int)-6L;
    }
    public static int SI_SIGIO() {
        return (int)-5L;
    }
    public static int SI_ASYNCIO() {
        return (int)-4L;
    }
    public static int SI_MESGQ() {
        return (int)-3L;
    }
    public static int SI_TIMER() {
        return (int)-2L;
    }
    public static int SI_QUEUE() {
        return (int)-1L;
    }
    public static int SI_USER() {
        return (int)0L;
    }
    public static int SI_KERNEL() {
        return (int)128L;
    }
    public static int ILL_ILLOPC() {
        return (int)1L;
    }
    public static int ILL_ILLOPN() {
        return (int)2L;
    }
    public static int ILL_ILLADR() {
        return (int)3L;
    }
    public static int ILL_ILLTRP() {
        return (int)4L;
    }
    public static int ILL_PRVOPC() {
        return (int)5L;
    }
    public static int ILL_PRVREG() {
        return (int)6L;
    }
    public static int ILL_COPROC() {
        return (int)7L;
    }
    public static int ILL_BADSTK() {
        return (int)8L;
    }
    public static int ILL_BADIADDR() {
        return (int)9L;
    }
    public static int FPE_INTDIV() {
        return (int)1L;
    }
    public static int FPE_INTOVF() {
        return (int)2L;
    }
    public static int FPE_FLTDIV() {
        return (int)3L;
    }
    public static int FPE_FLTOVF() {
        return (int)4L;
    }
    public static int FPE_FLTUND() {
        return (int)5L;
    }
    public static int FPE_FLTRES() {
        return (int)6L;
    }
    public static int FPE_FLTINV() {
        return (int)7L;
    }
    public static int FPE_FLTSUB() {
        return (int)8L;
    }
    public static int FPE_FLTUNK() {
        return (int)14L;
    }
    public static int FPE_CONDTRAP() {
        return (int)15L;
    }
    public static int SEGV_MAPERR() {
        return (int)1L;
    }
    public static int SEGV_ACCERR() {
        return (int)2L;
    }
    public static int SEGV_BNDERR() {
        return (int)3L;
    }
    public static int SEGV_PKUERR() {
        return (int)4L;
    }
    public static int SEGV_ACCADI() {
        return (int)5L;
    }
    public static int SEGV_ADIDERR() {
        return (int)6L;
    }
    public static int SEGV_ADIPERR() {
        return (int)7L;
    }
    public static int SEGV_MTEAERR() {
        return (int)8L;
    }
    public static int SEGV_MTESERR() {
        return (int)9L;
    }
    public static int BUS_ADRALN() {
        return (int)1L;
    }
    public static int BUS_ADRERR() {
        return (int)2L;
    }
    public static int BUS_OBJERR() {
        return (int)3L;
    }
    public static int BUS_MCEERR_AR() {
        return (int)4L;
    }
    public static int BUS_MCEERR_AO() {
        return (int)5L;
    }
    public static int TRAP_BRKPT() {
        return (int)1L;
    }
    public static int TRAP_TRACE() {
        return (int)2L;
    }
    public static int TRAP_BRANCH() {
        return (int)3L;
    }
    public static int TRAP_HWBKPT() {
        return (int)4L;
    }
    public static int TRAP_UNK() {
        return (int)5L;
    }
    public static int CLD_EXITED() {
        return (int)1L;
    }
    public static int CLD_KILLED() {
        return (int)2L;
    }
    public static int CLD_DUMPED() {
        return (int)3L;
    }
    public static int CLD_TRAPPED() {
        return (int)4L;
    }
    public static int CLD_STOPPED() {
        return (int)5L;
    }
    public static int CLD_CONTINUED() {
        return (int)6L;
    }
    public static int POLL_IN() {
        return (int)1L;
    }
    public static int POLL_OUT() {
        return (int)2L;
    }
    public static int POLL_MSG() {
        return (int)3L;
    }
    public static int POLL_ERR() {
        return (int)4L;
    }
    public static int POLL_PRI() {
        return (int)5L;
    }
    public static int POLL_HUP() {
        return (int)6L;
    }
    public static int SIGEV_SIGNAL() {
        return (int)0L;
    }
    public static int SIGEV_NONE() {
        return (int)1L;
    }
    public static int SIGEV_THREAD() {
        return (int)2L;
    }
    public static int SIGEV_THREAD_ID() {
        return (int)4L;
    }
    public static MethodHandle __sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$13.__sysv_signal$MH,"__sysv_signal");
    }
    public static MemoryAddress __sysv_signal ( int __sig,  Addressable __handler) {
        var mh$ = __sysv_signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysv_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$13.sysv_signal$MH,"sysv_signal");
    }
    public static MemoryAddress sysv_signal ( int __sig,  Addressable __handler) {
        var mh$ = sysv_signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle signal$MH() {
        return RuntimeHelper.requireNonNull(constants$13.signal$MH,"signal");
    }
    public static MemoryAddress signal ( int __sig,  Addressable __handler) {
        var mh$ = signal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle kill$MH() {
        return RuntimeHelper.requireNonNull(constants$13.kill$MH,"kill");
    }
    public static int kill ( int __pid,  int __sig) {
        var mh$ = kill$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle killpg$MH() {
        return RuntimeHelper.requireNonNull(constants$14.killpg$MH,"killpg");
    }
    public static int killpg ( int __pgrp,  int __sig) {
        var mh$ = killpg$MH();
        try {
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle raise$MH() {
        return RuntimeHelper.requireNonNull(constants$14.raise$MH,"raise");
    }
    public static int raise ( int __sig) {
        var mh$ = raise$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ssignal$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ssignal$MH,"ssignal");
    }
    public static MemoryAddress ssignal ( int __sig,  Addressable __handler) {
        var mh$ = ssignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$14.gsignal$MH,"gsignal");
    }
    public static int gsignal ( int __sig) {
        var mh$ = gsignal$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psignal$MH() {
        return RuntimeHelper.requireNonNull(constants$14.psignal$MH,"psignal");
    }
    public static void psignal ( int __sig,  Addressable __s) {
        var mh$ = psignal$MH();
        try {
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle psiginfo$MH() {
        return RuntimeHelper.requireNonNull(constants$14.psiginfo$MH,"psiginfo");
    }
    public static void psiginfo ( Addressable __pinfo,  Addressable __s) {
        var mh$ = psiginfo$MH();
        try {
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpause$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigpause$MH,"sigpause");
    }
    public static int sigpause ( int __sig) {
        var mh$ = sigpause$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigblock$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigblock$MH,"sigblock");
    }
    public static int sigblock ( int __mask) {
        var mh$ = sigblock$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$15.sigsetmask$MH,"sigsetmask");
    }
    public static int sigsetmask ( int __mask) {
        var mh$ = sigsetmask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siggetmask$MH() {
        return RuntimeHelper.requireNonNull(constants$15.siggetmask$MH,"siggetmask");
    }
    public static int siggetmask () {
        var mh$ = siggetmask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigemptyset$MH,"sigemptyset");
    }
    public static int sigemptyset ( Addressable __set) {
        var mh$ = sigemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigfillset$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigfillset$MH,"sigfillset");
    }
    public static int sigfillset ( Addressable __set) {
        var mh$ = sigfillset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaddset$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigaddset$MH,"sigaddset");
    }
    public static int sigaddset ( Addressable __set,  int __signo) {
        var mh$ = sigaddset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigdelset$MH() {
        return RuntimeHelper.requireNonNull(constants$16.sigdelset$MH,"sigdelset");
    }
    public static int sigdelset ( Addressable __set,  int __signo) {
        var mh$ = sigdelset$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigismember$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigismember$MH,"sigismember");
    }
    public static int sigismember ( Addressable __set,  int __signo) {
        var mh$ = sigismember$MH();
        try {
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigisemptyset$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigisemptyset$MH,"sigisemptyset");
    }
    public static int sigisemptyset ( Addressable __set) {
        var mh$ = sigisemptyset$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigandset$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigandset$MH,"sigandset");
    }
    public static int sigandset ( Addressable __set,  Addressable __left,  Addressable __right) {
        var mh$ = sigandset$MH();
        try {
            return (int)mh$.invokeExact(__set, __left, __right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigorset$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigorset$MH,"sigorset");
    }
    public static int sigorset ( Addressable __set,  Addressable __left,  Addressable __right) {
        var mh$ = sigorset$MH();
        try {
            return (int)mh$.invokeExact(__set, __left, __right);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigprocmask$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigprocmask$MH,"sigprocmask");
    }
    public static int sigprocmask ( int __how,  Addressable __set,  Addressable __oset) {
        var mh$ = sigprocmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigsuspend$MH() {
        return RuntimeHelper.requireNonNull(constants$17.sigsuspend$MH,"sigsuspend");
    }
    public static int sigsuspend ( Addressable __set) {
        var mh$ = sigsuspend$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigaction$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigaction$MH,"sigaction");
    }
    public static int sigaction ( int __sig,  Addressable __act,  Addressable __oact) {
        var mh$ = sigaction$MH();
        try {
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigpending$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigpending$MH,"sigpending");
    }
    public static int sigpending ( Addressable __set) {
        var mh$ = sigpending$MH();
        try {
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwait$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigwait$MH,"sigwait");
    }
    public static int sigwait ( Addressable __set,  Addressable __sig) {
        var mh$ = sigwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigwaitinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigwaitinfo$MH,"sigwaitinfo");
    }
    public static int sigwaitinfo ( Addressable __set,  Addressable __info) {
        var mh$ = sigwaitinfo$MH();
        try {
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigtimedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigtimedwait$MH,"sigtimedwait");
    }
    public static int sigtimedwait ( Addressable __set,  Addressable __info,  Addressable __timeout) {
        var mh$ = sigtimedwait$MH();
        try {
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$18.sigqueue$MH,"sigqueue");
    }
    public static int sigqueue ( int __pid,  int __sig,  MemorySegment __val) {
        var mh$ = sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$19.sigreturn$MH,"sigreturn");
    }
    public static int sigreturn ( Addressable __scp) {
        var mh$ = sigreturn$MH();
        try {
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong greg_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int REG_R8() {
        return (int)0L;
    }
    public static int REG_R9() {
        return (int)1L;
    }
    public static int REG_R10() {
        return (int)2L;
    }
    public static int REG_R11() {
        return (int)3L;
    }
    public static int REG_R12() {
        return (int)4L;
    }
    public static int REG_R13() {
        return (int)5L;
    }
    public static int REG_R14() {
        return (int)6L;
    }
    public static int REG_R15() {
        return (int)7L;
    }
    public static int REG_RDI() {
        return (int)8L;
    }
    public static int REG_RSI() {
        return (int)9L;
    }
    public static int REG_RBP() {
        return (int)10L;
    }
    public static int REG_RBX() {
        return (int)11L;
    }
    public static int REG_RDX() {
        return (int)12L;
    }
    public static int REG_RAX() {
        return (int)13L;
    }
    public static int REG_RCX() {
        return (int)14L;
    }
    public static int REG_RSP() {
        return (int)15L;
    }
    public static int REG_RIP() {
        return (int)16L;
    }
    public static int REG_EFL() {
        return (int)17L;
    }
    public static int REG_CSGSFS() {
        return (int)18L;
    }
    public static int REG_ERR() {
        return (int)19L;
    }
    public static int REG_TRAPNO() {
        return (int)20L;
    }
    public static int REG_OLDMASK() {
        return (int)21L;
    }
    public static int REG_CR2() {
        return (int)22L;
    }
    public static OfAddress fpregset_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle siginterrupt$MH() {
        return RuntimeHelper.requireNonNull(constants$19.siginterrupt$MH,"siginterrupt");
    }
    public static int siginterrupt ( int __sig,  int __interrupt) {
        var mh$ = siginterrupt$MH();
        try {
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$19.access$MH,"access");
    }
    public static int access ( Addressable __name,  int __type) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle euidaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$19.euidaccess$MH,"euidaccess");
    }
    public static int euidaccess ( Addressable __name,  int __type) {
        var mh$ = euidaccess$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle eaccess$MH() {
        return RuntimeHelper.requireNonNull(constants$19.eaccess$MH,"eaccess");
    }
    public static int eaccess ( Addressable __name,  int __type) {
        var mh$ = eaccess$MH();
        try {
            return (int)mh$.invokeExact(__name, __type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execveat$MH() {
        return RuntimeHelper.requireNonNull(constants$19.execveat$MH,"execveat");
    }
    public static int execveat ( int __fd,  Addressable __path,  Addressable __argv,  Addressable __envp,  int __flags) {
        var mh$ = execveat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __argv, __envp, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$20.faccessat$MH,"faccessat");
    }
    public static int faccessat ( int __fd,  Addressable __file,  int __type,  int __flag) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __type, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$20.lseek$MH,"lseek");
    }
    public static long lseek ( int __fd,  long __offset,  int __whence) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek64$MH() {
        return RuntimeHelper.requireNonNull(constants$20.lseek64$MH,"lseek64");
    }
    public static long lseek64 ( int __fd,  long __offset,  int __whence) {
        var mh$ = lseek64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$20.close$MH,"close");
    }
    public static int close ( int __fd) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle closefrom$MH() {
        return RuntimeHelper.requireNonNull(constants$20.closefrom$MH,"closefrom");
    }
    public static void closefrom ( int __lowfd) {
        var mh$ = closefrom$MH();
        try {
            mh$.invokeExact(__lowfd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$20.read$MH,"read");
    }
    public static long read ( int __fd,  Addressable __buf,  long __nbytes) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle write$MH() {
        return RuntimeHelper.requireNonNull(constants$21.write$MH,"write");
    }
    public static long write ( int __fd,  Addressable __buf,  long __n) {
        var mh$ = write$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pread$MH,"pread");
    }
    public static long pread ( int __fd,  Addressable __buf,  long __nbytes,  long __offset) {
        var mh$ = pread$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pwrite$MH,"pwrite");
    }
    public static long pwrite ( int __fd,  Addressable __buf,  long __n,  long __offset) {
        var mh$ = pwrite$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pread64$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pread64$MH,"pread64");
    }
    public static long pread64 ( int __fd,  Addressable __buf,  long __nbytes,  long __offset) {
        var mh$ = pread64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwrite64$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pwrite64$MH,"pwrite64");
    }
    public static long pwrite64 ( int __fd,  Addressable __buf,  long __n,  long __offset) {
        var mh$ = pwrite64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$21.pipe$MH,"pipe");
    }
    public static int pipe ( Addressable __pipedes) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(__pipedes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe2$MH() {
        return RuntimeHelper.requireNonNull(constants$22.pipe2$MH,"pipe2");
    }
    public static int pipe2 ( Addressable __pipedes,  int __flags) {
        var mh$ = pipe2$MH();
        try {
            return (int)mh$.invokeExact(__pipedes, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$22.alarm$MH,"alarm");
    }
    public static int alarm ( int __seconds) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sleep$MH() {
        return RuntimeHelper.requireNonNull(constants$22.sleep$MH,"sleep");
    }
    public static int sleep ( int __seconds) {
        var mh$ = sleep$MH();
        try {
            return (int)mh$.invokeExact(__seconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ualarm$MH() {
        return RuntimeHelper.requireNonNull(constants$22.ualarm$MH,"ualarm");
    }
    public static int ualarm ( int __value,  int __interval) {
        var mh$ = ualarm$MH();
        try {
            return (int)mh$.invokeExact(__value, __interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$22.usleep$MH,"usleep");
    }
    public static int usleep ( int __useconds) {
        var mh$ = usleep$MH();
        try {
            return (int)mh$.invokeExact(__useconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$22.pause$MH,"pause");
    }
    public static int pause () {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$23.chown$MH,"chown");
    }
    public static int chown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchown$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fchown$MH,"fchown");
    }
    public static int fchown ( int __fd,  int __owner,  int __group) {
        var mh$ = fchown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchown$MH() {
        return RuntimeHelper.requireNonNull(constants$23.lchown$MH,"lchown");
    }
    public static int lchown ( Addressable __file,  int __owner,  int __group) {
        var mh$ = lchown$MH();
        try {
            return (int)mh$.invokeExact(__file, __owner, __group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fchownat$MH,"fchownat");
    }
    public static int fchownat ( int __fd,  Addressable __file,  int __owner,  int __group,  int __flag) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __owner, __group, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$23.chdir$MH,"chdir");
    }
    public static int chdir ( Addressable __path) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchdir$MH() {
        return RuntimeHelper.requireNonNull(constants$23.fchdir$MH,"fchdir");
    }
    public static int fchdir ( int __fd) {
        var mh$ = fchdir$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$24.getcwd$MH,"getcwd");
    }
    public static MemoryAddress getcwd ( Addressable __buf,  long __size) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle get_current_dir_name$MH() {
        return RuntimeHelper.requireNonNull(constants$24.get_current_dir_name$MH,"get_current_dir_name");
    }
    public static MemoryAddress get_current_dir_name () {
        var mh$ = get_current_dir_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getwd$MH() {
        return RuntimeHelper.requireNonNull(constants$24.getwd$MH,"getwd");
    }
    public static MemoryAddress getwd ( Addressable __buf) {
        var mh$ = getwd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$24.dup$MH,"dup");
    }
    public static int dup ( int __fd) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$24.dup2$MH,"dup2");
    }
    public static int dup2 ( int __fd,  int __fd2) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup3$MH() {
        return RuntimeHelper.requireNonNull(constants$24.dup3$MH,"dup3");
    }
    public static int dup3 ( int __fd,  int __fd2,  int __flags) {
        var mh$ = dup3$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fd2, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __environ$LAYOUT() {
        return constants$25.__environ$LAYOUT;
    }
    public static VarHandle __environ$VH() {
        return constants$25.__environ$VH;
    }
    public static MemorySegment __environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.__environ$SEGMENT,"__environ");
    }
    public static MemoryAddress __environ$get() {
        return (java.lang.foreign.MemoryAddress) constants$25.__environ$VH.get(RuntimeHelper.requireNonNull(constants$25.__environ$SEGMENT, "__environ"));
    }
    public static void __environ$set( MemoryAddress x) {
        constants$25.__environ$VH.set(RuntimeHelper.requireNonNull(constants$25.__environ$SEGMENT, "__environ"), x);
    }
    public static MemoryLayout environ$LAYOUT() {
        return constants$25.environ$LAYOUT;
    }
    public static VarHandle environ$VH() {
        return constants$25.environ$VH;
    }
    public static MemorySegment environ$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.environ$SEGMENT,"environ");
    }
    public static MemoryAddress environ$get() {
        return (java.lang.foreign.MemoryAddress) constants$25.environ$VH.get(RuntimeHelper.requireNonNull(constants$25.environ$SEGMENT, "environ"));
    }
    public static void environ$set( MemoryAddress x) {
        constants$25.environ$VH.set(RuntimeHelper.requireNonNull(constants$25.environ$SEGMENT, "environ"), x);
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$25.execve$MH,"execve");
    }
    public static int execve ( Addressable __path,  Addressable __argv,  Addressable __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fexecve$MH() {
        return RuntimeHelper.requireNonNull(constants$25.fexecve$MH,"fexecve");
    }
    public static int fexecve ( int __fd,  Addressable __argv,  Addressable __envp) {
        var mh$ = fexecve$MH();
        try {
            return (int)mh$.invokeExact(__fd, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$25.execv$MH,"execv");
    }
    public static int execv ( Addressable __path,  Addressable __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$25.execle$MH,"execle");
    }
    public static int execle ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execl$MH,"execl");
    }
    public static int execl ( Addressable __path,  Addressable __arg, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execvp$MH,"execvp");
    }
    public static int execvp ( Addressable __file,  Addressable __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execlp$MH,"execlp");
    }
    public static int execlp ( Addressable __file,  Addressable __arg, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvpe$MH() {
        return RuntimeHelper.requireNonNull(constants$26.execvpe$MH,"execvpe");
    }
    public static int execvpe ( Addressable __file,  Addressable __argv,  Addressable __envp) {
        var mh$ = execvpe$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nice$MH() {
        return RuntimeHelper.requireNonNull(constants$26.nice$MH,"nice");
    }
    public static int nice ( int __inc) {
        var mh$ = nice$MH();
        try {
            return (int)mh$.invokeExact(__inc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26._exit$MH,"_exit");
    }
    public static void _exit ( int __status) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int _PC_LINK_MAX() {
        return (int)0L;
    }
    public static int _PC_MAX_CANON() {
        return (int)1L;
    }
    public static int _PC_MAX_INPUT() {
        return (int)2L;
    }
    public static int _PC_NAME_MAX() {
        return (int)3L;
    }
    public static int _PC_PATH_MAX() {
        return (int)4L;
    }
    public static int _PC_PIPE_BUF() {
        return (int)5L;
    }
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)6L;
    }
    public static int _PC_NO_TRUNC() {
        return (int)7L;
    }
    public static int _PC_VDISABLE() {
        return (int)8L;
    }
    public static int _PC_SYNC_IO() {
        return (int)9L;
    }
    public static int _PC_ASYNC_IO() {
        return (int)10L;
    }
    public static int _PC_PRIO_IO() {
        return (int)11L;
    }
    public static int _PC_SOCK_MAXBUF() {
        return (int)12L;
    }
    public static int _PC_FILESIZEBITS() {
        return (int)13L;
    }
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)14L;
    }
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)15L;
    }
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)16L;
    }
    public static int _PC_REC_XFER_ALIGN() {
        return (int)17L;
    }
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)18L;
    }
    public static int _PC_SYMLINK_MAX() {
        return (int)19L;
    }
    public static int _PC_2_SYMLINKS() {
        return (int)20L;
    }
    public static int _SC_ARG_MAX() {
        return (int)0L;
    }
    public static int _SC_CHILD_MAX() {
        return (int)1L;
    }
    public static int _SC_CLK_TCK() {
        return (int)2L;
    }
    public static int _SC_NGROUPS_MAX() {
        return (int)3L;
    }
    public static int _SC_OPEN_MAX() {
        return (int)4L;
    }
    public static int _SC_STREAM_MAX() {
        return (int)5L;
    }
    public static int _SC_TZNAME_MAX() {
        return (int)6L;
    }
    public static int _SC_JOB_CONTROL() {
        return (int)7L;
    }
    public static int _SC_SAVED_IDS() {
        return (int)8L;
    }
    public static int _SC_REALTIME_SIGNALS() {
        return (int)9L;
    }
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)10L;
    }
    public static int _SC_TIMERS() {
        return (int)11L;
    }
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)12L;
    }
    public static int _SC_PRIORITIZED_IO() {
        return (int)13L;
    }
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)14L;
    }
    public static int _SC_FSYNC() {
        return (int)15L;
    }
    public static int _SC_MAPPED_FILES() {
        return (int)16L;
    }
    public static int _SC_MEMLOCK() {
        return (int)17L;
    }
    public static int _SC_MEMLOCK_RANGE() {
        return (int)18L;
    }
    public static int _SC_MEMORY_PROTECTION() {
        return (int)19L;
    }
    public static int _SC_MESSAGE_PASSING() {
        return (int)20L;
    }
    public static int _SC_SEMAPHORES() {
        return (int)21L;
    }
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)22L;
    }
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)23L;
    }
    public static int _SC_AIO_MAX() {
        return (int)24L;
    }
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)25L;
    }
    public static int _SC_DELAYTIMER_MAX() {
        return (int)26L;
    }
    public static int _SC_MQ_OPEN_MAX() {
        return (int)27L;
    }
    public static int _SC_MQ_PRIO_MAX() {
        return (int)28L;
    }
    public static int _SC_VERSION() {
        return (int)29L;
    }
    public static int _SC_PAGESIZE() {
        return (int)30L;
    }
    public static int _SC_RTSIG_MAX() {
        return (int)31L;
    }
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)32L;
    }
    public static int _SC_SEM_VALUE_MAX() {
        return (int)33L;
    }
    public static int _SC_SIGQUEUE_MAX() {
        return (int)34L;
    }
    public static int _SC_TIMER_MAX() {
        return (int)35L;
    }
    public static int _SC_BC_BASE_MAX() {
        return (int)36L;
    }
    public static int _SC_BC_DIM_MAX() {
        return (int)37L;
    }
    public static int _SC_BC_SCALE_MAX() {
        return (int)38L;
    }
    public static int _SC_BC_STRING_MAX() {
        return (int)39L;
    }
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)40L;
    }
    public static int _SC_EQUIV_CLASS_MAX() {
        return (int)41L;
    }
    public static int _SC_EXPR_NEST_MAX() {
        return (int)42L;
    }
    public static int _SC_LINE_MAX() {
        return (int)43L;
    }
    public static int _SC_RE_DUP_MAX() {
        return (int)44L;
    }
    public static int _SC_CHARCLASS_NAME_MAX() {
        return (int)45L;
    }
    public static int _SC_2_VERSION() {
        return (int)46L;
    }
    public static int _SC_2_C_BIND() {
        return (int)47L;
    }
    public static int _SC_2_C_DEV() {
        return (int)48L;
    }
    public static int _SC_2_FORT_DEV() {
        return (int)49L;
    }
    public static int _SC_2_FORT_RUN() {
        return (int)50L;
    }
    public static int _SC_2_SW_DEV() {
        return (int)51L;
    }
    public static int _SC_2_LOCALEDEF() {
        return (int)52L;
    }
    public static int _SC_PII() {
        return (int)53L;
    }
    public static int _SC_PII_XTI() {
        return (int)54L;
    }
    public static int _SC_PII_SOCKET() {
        return (int)55L;
    }
    public static int _SC_PII_INTERNET() {
        return (int)56L;
    }
    public static int _SC_PII_OSI() {
        return (int)57L;
    }
    public static int _SC_POLL() {
        return (int)58L;
    }
    public static int _SC_SELECT() {
        return (int)59L;
    }
    public static int _SC_UIO_MAXIOV() {
        return (int)60L;
    }
    public static int _SC_IOV_MAX() {
        return (int)60L;
    }
    public static int _SC_PII_INTERNET_STREAM() {
        return (int)61L;
    }
    public static int _SC_PII_INTERNET_DGRAM() {
        return (int)62L;
    }
    public static int _SC_PII_OSI_COTS() {
        return (int)63L;
    }
    public static int _SC_PII_OSI_CLTS() {
        return (int)64L;
    }
    public static int _SC_PII_OSI_M() {
        return (int)65L;
    }
    public static int _SC_T_IOV_MAX() {
        return (int)66L;
    }
    public static int _SC_THREADS() {
        return (int)67L;
    }
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)68L;
    }
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)69L;
    }
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)70L;
    }
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)71L;
    }
    public static int _SC_TTY_NAME_MAX() {
        return (int)72L;
    }
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)73L;
    }
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)74L;
    }
    public static int _SC_THREAD_STACK_MIN() {
        return (int)75L;
    }
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)76L;
    }
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)77L;
    }
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)78L;
    }
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)79L;
    }
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)80L;
    }
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)81L;
    }
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)82L;
    }
    public static int _SC_NPROCESSORS_CONF() {
        return (int)83L;
    }
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)84L;
    }
    public static int _SC_PHYS_PAGES() {
        return (int)85L;
    }
    public static int _SC_AVPHYS_PAGES() {
        return (int)86L;
    }
    public static int _SC_ATEXIT_MAX() {
        return (int)87L;
    }
    public static int _SC_PASS_MAX() {
        return (int)88L;
    }
    public static int _SC_XOPEN_VERSION() {
        return (int)89L;
    }
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)90L;
    }
    public static int _SC_XOPEN_UNIX() {
        return (int)91L;
    }
    public static int _SC_XOPEN_CRYPT() {
        return (int)92L;
    }
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)93L;
    }
    public static int _SC_XOPEN_SHM() {
        return (int)94L;
    }
    public static int _SC_2_CHAR_TERM() {
        return (int)95L;
    }
    public static int _SC_2_C_VERSION() {
        return (int)96L;
    }
    public static int _SC_2_UPE() {
        return (int)97L;
    }
    public static int _SC_XOPEN_XPG2() {
        return (int)98L;
    }
    public static int _SC_XOPEN_XPG3() {
        return (int)99L;
    }
    public static int _SC_XOPEN_XPG4() {
        return (int)100L;
    }
    public static int _SC_CHAR_BIT() {
        return (int)101L;
    }
    public static int _SC_CHAR_MAX() {
        return (int)102L;
    }
    public static int _SC_CHAR_MIN() {
        return (int)103L;
    }
    public static int _SC_INT_MAX() {
        return (int)104L;
    }
    public static int _SC_INT_MIN() {
        return (int)105L;
    }
    public static int _SC_LONG_BIT() {
        return (int)106L;
    }
    public static int _SC_WORD_BIT() {
        return (int)107L;
    }
    public static int _SC_MB_LEN_MAX() {
        return (int)108L;
    }
    public static int _SC_NZERO() {
        return (int)109L;
    }
    public static int _SC_SSIZE_MAX() {
        return (int)110L;
    }
    public static int _SC_SCHAR_MAX() {
        return (int)111L;
    }
    public static int _SC_SCHAR_MIN() {
        return (int)112L;
    }
    public static int _SC_SHRT_MAX() {
        return (int)113L;
    }
    public static int _SC_SHRT_MIN() {
        return (int)114L;
    }
    public static int _SC_UCHAR_MAX() {
        return (int)115L;
    }
    public static int _SC_UINT_MAX() {
        return (int)116L;
    }
    public static int _SC_ULONG_MAX() {
        return (int)117L;
    }
    public static int _SC_USHRT_MAX() {
        return (int)118L;
    }
    public static int _SC_NL_ARGMAX() {
        return (int)119L;
    }
    public static int _SC_NL_LANGMAX() {
        return (int)120L;
    }
    public static int _SC_NL_MSGMAX() {
        return (int)121L;
    }
    public static int _SC_NL_NMAX() {
        return (int)122L;
    }
    public static int _SC_NL_SETMAX() {
        return (int)123L;
    }
    public static int _SC_NL_TEXTMAX() {
        return (int)124L;
    }
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)125L;
    }
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)126L;
    }
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)127L;
    }
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)128L;
    }
    public static int _SC_XOPEN_LEGACY() {
        return (int)129L;
    }
    public static int _SC_XOPEN_REALTIME() {
        return (int)130L;
    }
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)131L;
    }
    public static int _SC_ADVISORY_INFO() {
        return (int)132L;
    }
    public static int _SC_BARRIERS() {
        return (int)133L;
    }
    public static int _SC_BASE() {
        return (int)134L;
    }
    public static int _SC_C_LANG_SUPPORT() {
        return (int)135L;
    }
    public static int _SC_C_LANG_SUPPORT_R() {
        return (int)136L;
    }
    public static int _SC_CLOCK_SELECTION() {
        return (int)137L;
    }
    public static int _SC_CPUTIME() {
        return (int)138L;
    }
    public static int _SC_THREAD_CPUTIME() {
        return (int)139L;
    }
    public static int _SC_DEVICE_IO() {
        return (int)140L;
    }
    public static int _SC_DEVICE_SPECIFIC() {
        return (int)141L;
    }
    public static int _SC_DEVICE_SPECIFIC_R() {
        return (int)142L;
    }
    public static int _SC_FD_MGMT() {
        return (int)143L;
    }
    public static int _SC_FIFO() {
        return (int)144L;
    }
    public static int _SC_PIPE() {
        return (int)145L;
    }
    public static int _SC_FILE_ATTRIBUTES() {
        return (int)146L;
    }
    public static int _SC_FILE_LOCKING() {
        return (int)147L;
    }
    public static int _SC_FILE_SYSTEM() {
        return (int)148L;
    }
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)149L;
    }
    public static int _SC_MULTI_PROCESS() {
        return (int)150L;
    }
    public static int _SC_SINGLE_PROCESS() {
        return (int)151L;
    }
    public static int _SC_NETWORKING() {
        return (int)152L;
    }
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)153L;
    }
    public static int _SC_SPIN_LOCKS() {
        return (int)154L;
    }
    public static int _SC_REGEXP() {
        return (int)155L;
    }
    public static int _SC_REGEX_VERSION() {
        return (int)156L;
    }
    public static int _SC_SHELL() {
        return (int)157L;
    }
    public static int _SC_SIGNALS() {
        return (int)158L;
    }
    public static int _SC_SPAWN() {
        return (int)159L;
    }
    public static int _SC_SPORADIC_SERVER() {
        return (int)160L;
    }
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)161L;
    }
    public static int _SC_SYSTEM_DATABASE() {
        return (int)162L;
    }
    public static int _SC_SYSTEM_DATABASE_R() {
        return (int)163L;
    }
    public static int _SC_TIMEOUTS() {
        return (int)164L;
    }
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)165L;
    }
    public static int _SC_USER_GROUPS() {
        return (int)166L;
    }
    public static int _SC_USER_GROUPS_R() {
        return (int)167L;
    }
    public static int _SC_2_PBS() {
        return (int)168L;
    }
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)169L;
    }
    public static int _SC_2_PBS_LOCATE() {
        return (int)170L;
    }
    public static int _SC_2_PBS_MESSAGE() {
        return (int)171L;
    }
    public static int _SC_2_PBS_TRACK() {
        return (int)172L;
    }
    public static int _SC_SYMLOOP_MAX() {
        return (int)173L;
    }
    public static int _SC_STREAMS() {
        return (int)174L;
    }
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)175L;
    }
    public static int _SC_V6_ILP32_OFF32() {
        return (int)176L;
    }
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)177L;
    }
    public static int _SC_V6_LP64_OFF64() {
        return (int)178L;
    }
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)179L;
    }
    public static int _SC_HOST_NAME_MAX() {
        return (int)180L;
    }
    public static int _SC_TRACE() {
        return (int)181L;
    }
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)182L;
    }
    public static int _SC_TRACE_INHERIT() {
        return (int)183L;
    }
    public static int _SC_TRACE_LOG() {
        return (int)184L;
    }
    public static int _SC_LEVEL1_ICACHE_SIZE() {
        return (int)185L;
    }
    public static int _SC_LEVEL1_ICACHE_ASSOC() {
        return (int)186L;
    }
    public static int _SC_LEVEL1_ICACHE_LINESIZE() {
        return (int)187L;
    }
    public static int _SC_LEVEL1_DCACHE_SIZE() {
        return (int)188L;
    }
    public static int _SC_LEVEL1_DCACHE_ASSOC() {
        return (int)189L;
    }
    public static int _SC_LEVEL1_DCACHE_LINESIZE() {
        return (int)190L;
    }
    public static int _SC_LEVEL2_CACHE_SIZE() {
        return (int)191L;
    }
    public static int _SC_LEVEL2_CACHE_ASSOC() {
        return (int)192L;
    }
    public static int _SC_LEVEL2_CACHE_LINESIZE() {
        return (int)193L;
    }
    public static int _SC_LEVEL3_CACHE_SIZE() {
        return (int)194L;
    }
    public static int _SC_LEVEL3_CACHE_ASSOC() {
        return (int)195L;
    }
    public static int _SC_LEVEL3_CACHE_LINESIZE() {
        return (int)196L;
    }
    public static int _SC_LEVEL4_CACHE_SIZE() {
        return (int)197L;
    }
    public static int _SC_LEVEL4_CACHE_ASSOC() {
        return (int)198L;
    }
    public static int _SC_LEVEL4_CACHE_LINESIZE() {
        return (int)199L;
    }
    public static int _SC_IPV6() {
        return (int)235L;
    }
    public static int _SC_RAW_SOCKETS() {
        return (int)236L;
    }
    public static int _SC_V7_ILP32_OFF32() {
        return (int)237L;
    }
    public static int _SC_V7_ILP32_OFFBIG() {
        return (int)238L;
    }
    public static int _SC_V7_LP64_OFF64() {
        return (int)239L;
    }
    public static int _SC_V7_LPBIG_OFFBIG() {
        return (int)240L;
    }
    public static int _SC_SS_REPL_MAX() {
        return (int)241L;
    }
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)242L;
    }
    public static int _SC_TRACE_NAME_MAX() {
        return (int)243L;
    }
    public static int _SC_TRACE_SYS_MAX() {
        return (int)244L;
    }
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)245L;
    }
    public static int _SC_XOPEN_STREAMS() {
        return (int)246L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_INHERIT() {
        return (int)247L;
    }
    public static int _SC_THREAD_ROBUST_PRIO_PROTECT() {
        return (int)248L;
    }
    public static int _SC_MINSIGSTKSZ() {
        return (int)249L;
    }
    public static int _SC_SIGSTKSZ() {
        return (int)250L;
    }
    public static int _CS_PATH() {
        return (int)0L;
    }
    public static int _CS_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)1L;
    }
    public static int _CS_GNU_LIBC_VERSION() {
        return (int)2L;
    }
    public static int _CS_GNU_LIBPTHREAD_VERSION() {
        return (int)3L;
    }
    public static int _CS_V5_WIDTH_RESTRICTED_ENVS() {
        return (int)4L;
    }
    public static int _CS_V7_WIDTH_RESTRICTED_ENVS() {
        return (int)5L;
    }
    public static int _CS_LFS_CFLAGS() {
        return (int)1000L;
    }
    public static int _CS_LFS_LDFLAGS() {
        return (int)1001L;
    }
    public static int _CS_LFS_LIBS() {
        return (int)1002L;
    }
    public static int _CS_LFS_LINTFLAGS() {
        return (int)1003L;
    }
    public static int _CS_LFS64_CFLAGS() {
        return (int)1004L;
    }
    public static int _CS_LFS64_LDFLAGS() {
        return (int)1005L;
    }
    public static int _CS_LFS64_LIBS() {
        return (int)1006L;
    }
    public static int _CS_LFS64_LINTFLAGS() {
        return (int)1007L;
    }
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)1100L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)1101L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)1102L;
    }
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)1103L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)1104L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)1105L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)1106L;
    }
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1107L;
    }
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)1108L;
    }
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)1109L;
    }
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)1110L;
    }
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)1111L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)1112L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1113L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)1114L;
    }
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1115L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)1116L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)1117L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)1118L;
    }
    public static int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS() {
        return (int)1119L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)1120L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)1121L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)1122L;
    }
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1123L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)1124L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)1125L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)1126L;
    }
    public static int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS() {
        return (int)1127L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)1128L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1129L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)1130L;
    }
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1131L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_CFLAGS() {
        return (int)1132L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS() {
        return (int)1133L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LIBS() {
        return (int)1134L;
    }
    public static int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS() {
        return (int)1135L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS() {
        return (int)1136L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS() {
        return (int)1137L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LIBS() {
        return (int)1138L;
    }
    public static int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS() {
        return (int)1139L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_CFLAGS() {
        return (int)1140L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LDFLAGS() {
        return (int)1141L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LIBS() {
        return (int)1142L;
    }
    public static int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS() {
        return (int)1143L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS() {
        return (int)1144L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS() {
        return (int)1145L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS() {
        return (int)1146L;
    }
    public static int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)1147L;
    }
    public static int _CS_V6_ENV() {
        return (int)1148L;
    }
    public static int _CS_V7_ENV() {
        return (int)1149L;
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.pathconf$MH,"pathconf");
    }
    public static long pathconf ( Addressable __path,  int __name) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(__path, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fpathconf$MH,"fpathconf");
    }
    public static long fpathconf ( int __fd,  int __name) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(__fd, __name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sysconf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.sysconf$MH,"sysconf");
    }
    public static long sysconf ( int __name) {
        var mh$ = sysconf$MH();
        try {
            return (long)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle confstr$MH() {
        return RuntimeHelper.requireNonNull(constants$27.confstr$MH,"confstr");
    }
    public static long confstr ( int __name,  Addressable __buf,  long __len) {
        var mh$ = confstr$MH();
        try {
            return (long)mh$.invokeExact(__name, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getpid$MH,"getpid");
    }
    public static int getpid () {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getppid$MH,"getppid");
    }
    public static int getppid () {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getpgrp$MH,"getpgrp");
    }
    public static int getpgrp () {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__getpgid$MH,"__getpgid");
    }
    public static int __getpgid ( int __pid) {
        var mh$ = __getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.getpgid$MH,"getpgid");
    }
    public static int getpgid ( int __pid) {
        var mh$ = getpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setpgid$MH,"setpgid");
    }
    public static int setpgid ( int __pid,  int __pgid) {
        var mh$ = setpgid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __pgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setpgrp$MH,"setpgrp");
    }
    public static int setpgrp () {
        var mh$ = setpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsid$MH() {
        return RuntimeHelper.requireNonNull(constants$28.setsid$MH,"setsid");
    }
    public static int setsid () {
        var mh$ = setsid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getsid$MH,"getsid");
    }
    public static int getsid ( int __pid) {
        var mh$ = getsid$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getuid$MH,"getuid");
    }
    public static int getuid () {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.geteuid$MH,"geteuid");
    }
    public static int geteuid () {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getgid$MH,"getgid");
    }
    public static int getgid () {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getegid$MH,"getegid");
    }
    public static int getegid () {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$29.getgroups$MH,"getgroups");
    }
    public static int getgroups ( int __size,  Addressable __list) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(__size, __list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle group_member$MH() {
        return RuntimeHelper.requireNonNull(constants$30.group_member$MH,"group_member");
    }
    public static int group_member ( int __gid) {
        var mh$ = group_member$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setuid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setuid$MH,"setuid");
    }
    public static int setuid ( int __uid) {
        var mh$ = setuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setreuid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setreuid$MH,"setreuid");
    }
    public static int setreuid ( int __ruid,  int __euid) {
        var mh$ = setreuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.seteuid$MH,"seteuid");
    }
    public static int seteuid ( int __uid) {
        var mh$ = seteuid$MH();
        try {
            return (int)mh$.invokeExact(__uid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setgid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setgid$MH,"setgid");
    }
    public static int setgid ( int __gid) {
        var mh$ = setgid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setregid$MH() {
        return RuntimeHelper.requireNonNull(constants$30.setregid$MH,"setregid");
    }
    public static int setregid ( int __rgid,  int __egid) {
        var mh$ = setregid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setegid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.setegid$MH,"setegid");
    }
    public static int setegid ( int __gid) {
        var mh$ = setegid$MH();
        try {
            return (int)mh$.invokeExact(__gid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getresuid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getresuid$MH,"getresuid");
    }
    public static int getresuid ( Addressable __ruid,  Addressable __euid,  Addressable __suid) {
        var mh$ = getresuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid, __suid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getresgid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.getresgid$MH,"getresgid");
    }
    public static int getresgid ( Addressable __rgid,  Addressable __egid,  Addressable __sgid) {
        var mh$ = getresgid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid, __sgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setresuid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.setresuid$MH,"setresuid");
    }
    public static int setresuid ( int __ruid,  int __euid,  int __suid) {
        var mh$ = setresuid$MH();
        try {
            return (int)mh$.invokeExact(__ruid, __euid, __suid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setresgid$MH() {
        return RuntimeHelper.requireNonNull(constants$31.setresgid$MH,"setresgid");
    }
    public static int setresgid ( int __rgid,  int __egid,  int __sgid) {
        var mh$ = setresgid$MH();
        try {
            return (int)mh$.invokeExact(__rgid, __egid, __sgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fork$MH,"fork");
    }
    public static int fork () {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfork$MH() {
        return RuntimeHelper.requireNonNull(constants$32.vfork$MH,"vfork");
    }
    public static int vfork () {
        var mh$ = vfork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Fork$MH() {
        return RuntimeHelper.requireNonNull(constants$32._Fork$MH,"_Fork");
    }
    public static int _Fork () {
        var mh$ = _Fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ttyname$MH,"ttyname");
    }
    public static MemoryAddress ttyname ( int __fd) {
        var mh$ = ttyname$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyname_r$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ttyname_r$MH,"ttyname_r");
    }
    public static int ttyname_r ( int __fd,  Addressable __buf,  long __buflen) {
        var mh$ = ttyname_r$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$32.isatty$MH,"isatty");
    }
    public static int isatty ( int __fd) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ttyslot$MH() {
        return RuntimeHelper.requireNonNull(constants$32.ttyslot$MH,"ttyslot");
    }
    public static int ttyslot () {
        var mh$ = ttyslot$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$33.link$MH,"link");
    }
    public static int link ( Addressable __from,  Addressable __to) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$33.linkat$MH,"linkat");
    }
    public static int linkat ( int __fromfd,  Addressable __from,  int __tofd,  Addressable __to,  int __flags) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(__fromfd, __from, __tofd, __to, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlink$MH() {
        return RuntimeHelper.requireNonNull(constants$33.symlink$MH,"symlink");
    }
    public static int symlink ( Addressable __from,  Addressable __to) {
        var mh$ = symlink$MH();
        try {
            return (int)mh$.invokeExact(__from, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlink$MH() {
        return RuntimeHelper.requireNonNull(constants$33.readlink$MH,"readlink");
    }
    public static long readlink ( Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = readlink$MH();
        try {
            return (long)mh$.invokeExact(__path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$33.symlinkat$MH,"symlinkat");
    }
    public static int symlinkat ( Addressable __from,  int __tofd,  Addressable __to) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(__from, __tofd, __to);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$33.readlinkat$MH,"readlinkat");
    }
    public static long readlinkat ( int __fd,  Addressable __path,  Addressable __buf,  long __len) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(__fd, __path, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$34.unlink$MH,"unlink");
    }
    public static int unlink ( Addressable __name) {
        var mh$ = unlink$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$34.unlinkat$MH,"unlinkat");
    }
    public static int unlinkat ( int __fd,  Addressable __name,  int __flag) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __name, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rmdir$MH() {
        return RuntimeHelper.requireNonNull(constants$34.rmdir$MH,"rmdir");
    }
    public static int rmdir ( Addressable __path) {
        var mh$ = rmdir$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcgetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$34.tcgetpgrp$MH,"tcgetpgrp");
    }
    public static int tcgetpgrp ( int __fd) {
        var mh$ = tcgetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tcsetpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$34.tcsetpgrp$MH,"tcsetpgrp");
    }
    public static int tcsetpgrp ( int __fd,  int __pgrp_id) {
        var mh$ = tcsetpgrp$MH();
        try {
            return (int)mh$.invokeExact(__fd, __pgrp_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$34.getlogin$MH,"getlogin");
    }
    public static MemoryAddress getlogin () {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin_r$MH() {
        return RuntimeHelper.requireNonNull(constants$35.getlogin_r$MH,"getlogin_r");
    }
    public static int getlogin_r ( Addressable __name,  long __name_len) {
        var mh$ = getlogin_r$MH();
        try {
            return (int)mh$.invokeExact(__name, __name_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$35.setlogin$MH,"setlogin");
    }
    public static int setlogin ( Addressable __name) {
        var mh$ = setlogin$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout optarg$LAYOUT() {
        return constants$35.optarg$LAYOUT;
    }
    public static VarHandle optarg$VH() {
        return constants$35.optarg$VH;
    }
    public static MemorySegment optarg$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.optarg$SEGMENT,"optarg");
    }
    public static MemoryAddress optarg$get() {
        return (java.lang.foreign.MemoryAddress) constants$35.optarg$VH.get(RuntimeHelper.requireNonNull(constants$35.optarg$SEGMENT, "optarg"));
    }
    public static void optarg$set( MemoryAddress x) {
        constants$35.optarg$VH.set(RuntimeHelper.requireNonNull(constants$35.optarg$SEGMENT, "optarg"), x);
    }
    public static MemoryLayout optind$LAYOUT() {
        return constants$35.optind$LAYOUT;
    }
    public static VarHandle optind$VH() {
        return constants$35.optind$VH;
    }
    public static MemorySegment optind$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.optind$SEGMENT,"optind");
    }
    public static int optind$get() {
        return (int) constants$35.optind$VH.get(RuntimeHelper.requireNonNull(constants$35.optind$SEGMENT, "optind"));
    }
    public static void optind$set( int x) {
        constants$35.optind$VH.set(RuntimeHelper.requireNonNull(constants$35.optind$SEGMENT, "optind"), x);
    }
    public static MemoryLayout opterr$LAYOUT() {
        return constants$35.opterr$LAYOUT;
    }
    public static VarHandle opterr$VH() {
        return constants$35.opterr$VH;
    }
    public static MemorySegment opterr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.opterr$SEGMENT,"opterr");
    }
    public static int opterr$get() {
        return (int) constants$35.opterr$VH.get(RuntimeHelper.requireNonNull(constants$35.opterr$SEGMENT, "opterr"));
    }
    public static void opterr$set( int x) {
        constants$35.opterr$VH.set(RuntimeHelper.requireNonNull(constants$35.opterr$SEGMENT, "opterr"), x);
    }
    public static MemoryLayout optopt$LAYOUT() {
        return constants$35.optopt$LAYOUT;
    }
    public static VarHandle optopt$VH() {
        return constants$35.optopt$VH;
    }
    public static MemorySegment optopt$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$35.optopt$SEGMENT,"optopt");
    }
    public static int optopt$get() {
        return (int) constants$35.optopt$VH.get(RuntimeHelper.requireNonNull(constants$35.optopt$SEGMENT, "optopt"));
    }
    public static void optopt$set( int x) {
        constants$35.optopt$VH.set(RuntimeHelper.requireNonNull(constants$35.optopt$SEGMENT, "optopt"), x);
    }
    public static MethodHandle getopt$MH() {
        return RuntimeHelper.requireNonNull(constants$36.getopt$MH,"getopt");
    }
    public static int getopt ( int ___argc,  Addressable ___argv,  Addressable __shortopts) {
        var mh$ = getopt$MH();
        try {
            return (int)mh$.invokeExact(___argc, ___argv, __shortopts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.gethostname$MH,"gethostname");
    }
    public static int gethostname ( Addressable __name,  long __len) {
        var mh$ = gethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.sethostname$MH,"sethostname");
    }
    public static int sethostname ( Addressable __name,  long __len) {
        var mh$ = sethostname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$36.sethostid$MH,"sethostid");
    }
    public static int sethostid ( long __id) {
        var mh$ = sethostid$MH();
        try {
            return (int)mh$.invokeExact(__id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.getdomainname$MH,"getdomainname");
    }
    public static int getdomainname ( Addressable __name,  long __len) {
        var mh$ = getdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setdomainname$MH() {
        return RuntimeHelper.requireNonNull(constants$36.setdomainname$MH,"setdomainname");
    }
    public static int setdomainname ( Addressable __name,  long __len) {
        var mh$ = setdomainname$MH();
        try {
            return (int)mh$.invokeExact(__name, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vhangup$MH() {
        return RuntimeHelper.requireNonNull(constants$37.vhangup$MH,"vhangup");
    }
    public static int vhangup () {
        var mh$ = vhangup$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle revoke$MH() {
        return RuntimeHelper.requireNonNull(constants$37.revoke$MH,"revoke");
    }
    public static int revoke ( Addressable __file) {
        var mh$ = revoke$MH();
        try {
            return (int)mh$.invokeExact(__file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle profil$MH() {
        return RuntimeHelper.requireNonNull(constants$37.profil$MH,"profil");
    }
    public static int profil ( Addressable __sample_buffer,  long __size,  long __offset,  int __scale) {
        var mh$ = profil$MH();
        try {
            return (int)mh$.invokeExact(__sample_buffer, __size, __offset, __scale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acct$MH() {
        return RuntimeHelper.requireNonNull(constants$37.acct$MH,"acct");
    }
    public static int acct ( Addressable __name) {
        var mh$ = acct$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$37.getusershell$MH,"getusershell");
    }
    public static MemoryAddress getusershell () {
        var mh$ = getusershell$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle endusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$37.endusershell$MH,"endusershell");
    }
    public static void endusershell () {
        var mh$ = endusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setusershell$MH() {
        return RuntimeHelper.requireNonNull(constants$38.setusershell$MH,"setusershell");
    }
    public static void setusershell () {
        var mh$ = setusershell$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle daemon$MH() {
        return RuntimeHelper.requireNonNull(constants$38.daemon$MH,"daemon");
    }
    public static int daemon ( int __nochdir,  int __noclose) {
        var mh$ = daemon$MH();
        try {
            return (int)mh$.invokeExact(__nochdir, __noclose);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chroot$MH() {
        return RuntimeHelper.requireNonNull(constants$38.chroot$MH,"chroot");
    }
    public static int chroot ( Addressable __path) {
        var mh$ = chroot$MH();
        try {
            return (int)mh$.invokeExact(__path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpass$MH() {
        return RuntimeHelper.requireNonNull(constants$38.getpass$MH,"getpass");
    }
    public static MemoryAddress getpass ( Addressable __prompt) {
        var mh$ = getpass$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__prompt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsync$MH() {
        return RuntimeHelper.requireNonNull(constants$38.fsync$MH,"fsync");
    }
    public static int fsync ( int __fd) {
        var mh$ = fsync$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syncfs$MH() {
        return RuntimeHelper.requireNonNull(constants$38.syncfs$MH,"syncfs");
    }
    public static int syncfs ( int __fd) {
        var mh$ = syncfs$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gethostid$MH() {
        return RuntimeHelper.requireNonNull(constants$39.gethostid$MH,"gethostid");
    }
    public static long gethostid () {
        var mh$ = gethostid$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sync$MH() {
        return RuntimeHelper.requireNonNull(constants$39.sync$MH,"sync");
    }
    public static void sync () {
        var mh$ = sync$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpagesize$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getpagesize$MH,"getpagesize");
    }
    public static int getpagesize () {
        var mh$ = getpagesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdtablesize$MH() {
        return RuntimeHelper.requireNonNull(constants$39.getdtablesize$MH,"getdtablesize");
    }
    public static int getdtablesize () {
        var mh$ = getdtablesize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate$MH() {
        return RuntimeHelper.requireNonNull(constants$39.truncate$MH,"truncate");
    }
    public static int truncate ( Addressable __file,  long __length) {
        var mh$ = truncate$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncate64$MH() {
        return RuntimeHelper.requireNonNull(constants$39.truncate64$MH,"truncate64");
    }
    public static int truncate64 ( Addressable __file,  long __length) {
        var mh$ = truncate64$MH();
        try {
            return (int)mh$.invokeExact(__file, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ftruncate$MH,"ftruncate");
    }
    public static int ftruncate ( int __fd,  long __length) {
        var mh$ = ftruncate$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftruncate64$MH() {
        return RuntimeHelper.requireNonNull(constants$40.ftruncate64$MH,"ftruncate64");
    }
    public static int ftruncate64 ( int __fd,  long __length) {
        var mh$ = ftruncate64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle brk$MH() {
        return RuntimeHelper.requireNonNull(constants$40.brk$MH,"brk");
    }
    public static int brk ( Addressable __addr) {
        var mh$ = brk$MH();
        try {
            return (int)mh$.invokeExact(__addr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$40.sbrk$MH,"sbrk");
    }
    public static MemoryAddress sbrk ( long __delta) {
        var mh$ = sbrk$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle syscall$MH() {
        return RuntimeHelper.requireNonNull(constants$40.syscall$MH,"syscall");
    }
    public static long syscall ( long __sysno, Object... x1) {
        var mh$ = syscall$MH();
        try {
            return (long)mh$.invokeExact(__sysno, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copy_file_range$MH() {
        return RuntimeHelper.requireNonNull(constants$40.copy_file_range$MH,"copy_file_range");
    }
    public static long copy_file_range ( int __infd,  Addressable __pinoff,  int __outfd,  Addressable __poutoff,  long __length,  int __flags) {
        var mh$ = copy_file_range$MH();
        try {
            return (long)mh$.invokeExact(__infd, __pinoff, __outfd, __poutoff, __length, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdatasync$MH() {
        return RuntimeHelper.requireNonNull(constants$41.fdatasync$MH,"fdatasync");
    }
    public static int fdatasync ( int __fildes) {
        var mh$ = fdatasync$MH();
        try {
            return (int)mh$.invokeExact(__fildes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle crypt$MH() {
        return RuntimeHelper.requireNonNull(constants$41.crypt$MH,"crypt");
    }
    public static MemoryAddress crypt ( Addressable __key,  Addressable __salt) {
        var mh$ = crypt$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key, __salt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle swab$MH() {
        return RuntimeHelper.requireNonNull(constants$41.swab$MH,"swab");
    }
    public static void swab ( Addressable __from,  Addressable __to,  long __n) {
        var mh$ = swab$MH();
        try {
            mh$.invokeExact(__from, __to, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getentropy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.getentropy$MH,"getentropy");
    }
    public static int getentropy ( Addressable __buffer,  long __length) {
        var mh$ = getentropy$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close_range$MH() {
        return RuntimeHelper.requireNonNull(constants$41.close_range$MH,"close_range");
    }
    public static int close_range ( int __fd,  int __max_fd,  int __flags) {
        var mh$ = close_range$MH();
        try {
            return (int)mh$.invokeExact(__fd, __max_fd, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettid$MH() {
        return RuntimeHelper.requireNonNull(constants$41.gettid$MH,"gettid");
    }
    public static int gettid () {
        var mh$ = gettid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SS_ONSTACK() {
        return (int)1L;
    }
    public static int SS_DISABLE() {
        return (int)2L;
    }
    public static MethodHandle sigaltstack$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sigaltstack$MH,"sigaltstack");
    }
    public static int sigaltstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = sigaltstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigstack$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sigstack$MH,"sigstack");
    }
    public static int sigstack ( Addressable __ss,  Addressable __oss) {
        var mh$ = sigstack$MH();
        try {
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sighold$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sighold$MH,"sighold");
    }
    public static int sighold ( int __sig) {
        var mh$ = sighold$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigrelse$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sigrelse$MH,"sigrelse");
    }
    public static int sigrelse ( int __sig) {
        var mh$ = sigrelse$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigignore$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sigignore$MH,"sigignore");
    }
    public static int sigignore ( int __sig) {
        var mh$ = sigignore$MH();
        try {
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sigset$MH() {
        return RuntimeHelper.requireNonNull(constants$42.sigset$MH,"sigset");
    }
    public static MemoryAddress sigset ( int __sig,  Addressable __disp) {
        var mh$ = sigset$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__sig, __disp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    public static OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle pthread_sigmask$MH() {
        return RuntimeHelper.requireNonNull(constants$43.pthread_sigmask$MH,"pthread_sigmask");
    }
    public static int pthread_sigmask ( int __how,  Addressable __newmask,  Addressable __oldmask) {
        var mh$ = pthread_sigmask$MH();
        try {
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_kill$MH() {
        return RuntimeHelper.requireNonNull(constants$43.pthread_kill$MH,"pthread_kill");
    }
    public static int pthread_kill ( long __threadid,  int __signo) {
        var mh$ = pthread_kill$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_sigqueue$MH() {
        return RuntimeHelper.requireNonNull(constants$43.pthread_sigqueue$MH,"pthread_sigqueue");
    }
    public static int pthread_sigqueue ( long __threadid,  int __signo,  MemorySegment __value) {
        var mh$ = pthread_sigqueue$MH();
        try {
            return (int)mh$.invokeExact(__threadid, __signo, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmin$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__libc_current_sigrtmin$MH,"__libc_current_sigrtmin");
    }
    public static int __libc_current_sigrtmin () {
        var mh$ = __libc_current_sigrtmin$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __libc_current_sigrtmax$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__libc_current_sigrtmax$MH,"__libc_current_sigrtmax");
    }
    public static int __libc_current_sigrtmax () {
        var mh$ = __libc_current_sigrtmax$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgkill$MH() {
        return RuntimeHelper.requireNonNull(constants$43.tgkill$MH,"tgkill");
    }
    public static int tgkill ( int __tgid,  int __tid,  int __signal) {
        var mh$ = tgkill$MH();
        try {
            return (int)mh$.invokeExact(__tgid, __tid, __signal);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt key_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __bswap_16$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_16$MH,"__bswap_16");
    }
    public static short __bswap_16 ( short __bsx) {
        var mh$ = __bswap_16$MH();
        try {
            return (short)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_32$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_32$MH,"__bswap_32");
    }
    public static int __bswap_32 ( int __bsx) {
        var mh$ = __bswap_32$MH();
        try {
            return (int)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __bswap_64$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__bswap_64$MH,"__bswap_64");
    }
    public static long __bswap_64 ( long __bsx) {
        var mh$ = __bswap_64$MH();
        try {
            return (long)mh$.invokeExact(__bsx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint16_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__uint16_identity$MH,"__uint16_identity");
    }
    public static short __uint16_identity ( short __x) {
        var mh$ = __uint16_identity$MH();
        try {
            return (short)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint32_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__uint32_identity$MH,"__uint32_identity");
    }
    public static int __uint32_identity ( int __x) {
        var mh$ = __uint32_identity$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uint64_identity$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__uint64_identity$MH,"__uint64_identity");
    }
    public static long __uint64_identity ( long __x) {
        var mh$ = __uint64_identity$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$45.select$MH,"select");
    }
    public static int select ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$45.pselect$MH,"pselect");
    }
    public static int pselect ( int __nfds,  Addressable __readfds,  Addressable __writefds,  Addressable __exceptfds,  Addressable __timeout,  Addressable __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static int SOCK_STREAM() {
        return (int)1L;
    }
    public static int SOCK_DGRAM() {
        return (int)2L;
    }
    public static int SOCK_RAW() {
        return (int)3L;
    }
    public static int SOCK_RDM() {
        return (int)4L;
    }
    public static int SOCK_SEQPACKET() {
        return (int)5L;
    }
    public static int SOCK_DCCP() {
        return (int)6L;
    }
    public static int SOCK_PACKET() {
        return (int)10L;
    }
    public static int SOCK_CLOEXEC() {
        return (int)524288L;
    }
    public static int SOCK_NONBLOCK() {
        return (int)2048L;
    }
    public static int MSG_OOB() {
        return (int)1L;
    }
    public static int MSG_PEEK() {
        return (int)2L;
    }
    public static int MSG_DONTROUTE() {
        return (int)4L;
    }
    public static int MSG_TRYHARD() {
        return (int)4L;
    }
    public static int MSG_CTRUNC() {
        return (int)8L;
    }
    public static int MSG_PROXY() {
        return (int)16L;
    }
    public static int MSG_TRUNC() {
        return (int)32L;
    }
    public static int MSG_DONTWAIT() {
        return (int)64L;
    }
    public static int MSG_EOR() {
        return (int)128L;
    }
    public static int MSG_WAITALL() {
        return (int)256L;
    }
    public static int MSG_FIN() {
        return (int)512L;
    }
    public static int MSG_SYN() {
        return (int)1024L;
    }
    public static int MSG_CONFIRM() {
        return (int)2048L;
    }
    public static int MSG_RST() {
        return (int)4096L;
    }
    public static int MSG_ERRQUEUE() {
        return (int)8192L;
    }
    public static int MSG_NOSIGNAL() {
        return (int)16384L;
    }
    public static int MSG_MORE() {
        return (int)32768L;
    }
    public static int MSG_WAITFORONE() {
        return (int)65536L;
    }
    public static int MSG_BATCH() {
        return (int)262144L;
    }
    public static int MSG_ZEROCOPY() {
        return (int)67108864L;
    }
    public static int MSG_FASTOPEN() {
        return (int)536870912L;
    }
    public static int MSG_CMSG_CLOEXEC() {
        return (int)1073741824L;
    }
    public static MethodHandle __cmsg_nxthdr$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__cmsg_nxthdr$MH,"__cmsg_nxthdr");
    }
    public static MemoryAddress __cmsg_nxthdr ( Addressable __mhdr,  Addressable __cmsg) {
        var mh$ = __cmsg_nxthdr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__mhdr, __cmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SCM_RIGHTS() {
        return (int)1L;
    }
    public static int SCM_CREDENTIALS() {
        return (int)2L;
    }
    public static int SHUT_RD() {
        return (int)0L;
    }
    public static int SHUT_WR() {
        return (int)1L;
    }
    public static int SHUT_RDWR() {
        return (int)2L;
    }
    public static MethodHandle socket$MH() {
        return RuntimeHelper.requireNonNull(constants$45.socket$MH,"socket");
    }
    public static int socket ( int __domain,  int __type,  int __protocol) {
        var mh$ = socket$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle socketpair$MH() {
        return RuntimeHelper.requireNonNull(constants$45.socketpair$MH,"socketpair");
    }
    public static int socketpair ( int __domain,  int __type,  int __protocol,  Addressable __fds) {
        var mh$ = socketpair$MH();
        try {
            return (int)mh$.invokeExact(__domain, __type, __protocol, __fds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bind$MH() {
        return RuntimeHelper.requireNonNull(constants$45.bind$MH,"bind");
    }
    public static int bind ( int __fd,  MemorySegment __addr,  int __len) {
        var mh$ = bind$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockname$MH() {
        return RuntimeHelper.requireNonNull(constants$46.getsockname$MH,"getsockname");
    }
    public static int getsockname ( int __fd,  MemorySegment __addr,  Addressable __len) {
        var mh$ = getsockname$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle connect$MH() {
        return RuntimeHelper.requireNonNull(constants$46.connect$MH,"connect");
    }
    public static int connect ( int __fd,  MemorySegment __addr,  int __len) {
        var mh$ = connect$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpeername$MH() {
        return RuntimeHelper.requireNonNull(constants$46.getpeername$MH,"getpeername");
    }
    public static int getpeername ( int __fd,  MemorySegment __addr,  Addressable __len) {
        var mh$ = getpeername$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle send$MH() {
        return RuntimeHelper.requireNonNull(constants$46.send$MH,"send");
    }
    public static long send ( int __fd,  Addressable __buf,  long __n,  int __flags) {
        var mh$ = send$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recv$MH() {
        return RuntimeHelper.requireNonNull(constants$46.recv$MH,"recv");
    }
    public static long recv ( int __fd,  Addressable __buf,  long __n,  int __flags) {
        var mh$ = recv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendto$MH() {
        return RuntimeHelper.requireNonNull(constants$46.sendto$MH,"sendto");
    }
    public static long sendto ( int __fd,  Addressable __buf,  long __n,  int __flags,  MemorySegment __addr,  int __addr_len) {
        var mh$ = sendto$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvfrom$MH() {
        return RuntimeHelper.requireNonNull(constants$47.recvfrom$MH,"recvfrom");
    }
    public static long recvfrom ( int __fd,  Addressable __buf,  long __n,  int __flags,  MemorySegment __addr,  Addressable __addr_len) {
        var mh$ = recvfrom$MH();
        try {
            return (long)mh$.invokeExact(__fd, __buf, __n, __flags, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sendmsg$MH,"sendmsg");
    }
    public static long sendmsg ( int __fd,  Addressable __message,  int __flags) {
        var mh$ = sendmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sendmmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$47.sendmmsg$MH,"sendmmsg");
    }
    public static int sendmmsg ( int __fd,  Addressable __vmessages,  int __vlen,  int __flags) {
        var mh$ = sendmmsg$MH();
        try {
            return (int)mh$.invokeExact(__fd, __vmessages, __vlen, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$47.recvmsg$MH,"recvmsg");
    }
    public static long recvmsg ( int __fd,  Addressable __message,  int __flags) {
        var mh$ = recvmsg$MH();
        try {
            return (long)mh$.invokeExact(__fd, __message, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle recvmmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$47.recvmmsg$MH,"recvmmsg");
    }
    public static int recvmmsg ( int __fd,  Addressable __vmessages,  int __vlen,  int __flags,  Addressable __tmo) {
        var mh$ = recvmmsg$MH();
        try {
            return (int)mh$.invokeExact(__fd, __vmessages, __vlen, __flags, __tmo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$47.getsockopt$MH,"getsockopt");
    }
    public static int getsockopt ( int __fd,  int __level,  int __optname,  Addressable __optval,  Addressable __optlen) {
        var mh$ = getsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setsockopt$MH() {
        return RuntimeHelper.requireNonNull(constants$48.setsockopt$MH,"setsockopt");
    }
    public static int setsockopt ( int __fd,  int __level,  int __optname,  Addressable __optval,  int __optlen) {
        var mh$ = setsockopt$MH();
        try {
            return (int)mh$.invokeExact(__fd, __level, __optname, __optval, __optlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle listen$MH() {
        return RuntimeHelper.requireNonNull(constants$48.listen$MH,"listen");
    }
    public static int listen ( int __fd,  int __n) {
        var mh$ = listen$MH();
        try {
            return (int)mh$.invokeExact(__fd, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept$MH() {
        return RuntimeHelper.requireNonNull(constants$48.accept$MH,"accept");
    }
    public static int accept ( int __fd,  MemorySegment __addr,  Addressable __addr_len) {
        var mh$ = accept$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle accept4$MH() {
        return RuntimeHelper.requireNonNull(constants$48.accept4$MH,"accept4");
    }
    public static int accept4 ( int __fd,  MemorySegment __addr,  Addressable __addr_len,  int __flags) {
        var mh$ = accept4$MH();
        try {
            return (int)mh$.invokeExact(__fd, __addr, __addr_len, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle shutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$48.shutdown$MH,"shutdown");
    }
    public static int shutdown ( int __fd,  int __how) {
        var mh$ = shutdown$MH();
        try {
            return (int)mh$.invokeExact(__fd, __how);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sockatmark$MH() {
        return RuntimeHelper.requireNonNull(constants$48.sockatmark$MH,"sockatmark");
    }
    public static int sockatmark ( int __fd) {
        var mh$ = sockatmark$MH();
        try {
            return (int)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isfdtype$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isfdtype$MH,"isfdtype");
    }
    public static int isfdtype ( int __fd,  int __fdtype) {
        var mh$ = isfdtype$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fdtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$49.stat$MH,"stat");
    }
    public static int stat ( Addressable __file,  Addressable __buf) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fstat$MH,"fstat");
    }
    public static int fstat ( int __fd,  Addressable __buf) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat64$MH() {
        return RuntimeHelper.requireNonNull(constants$49.stat64$MH,"stat64");
    }
    public static int stat64 ( Addressable __file,  Addressable __buf) {
        var mh$ = stat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fstat64$MH,"fstat64");
    }
    public static int fstat64 ( int __fd,  Addressable __buf) {
        var mh$ = fstat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$49.fstatat$MH,"fstatat");
    }
    public static int fstatat ( int __fd,  Addressable __file,  Addressable __buf,  int __flag) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat64$MH() {
        return RuntimeHelper.requireNonNull(constants$50.fstatat64$MH,"fstatat64");
    }
    public static int fstatat64 ( int __fd,  Addressable __file,  Addressable __buf,  int __flag) {
        var mh$ = fstatat64$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __buf, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$50.lstat$MH,"lstat");
    }
    public static int lstat ( Addressable __file,  Addressable __buf) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$50.lstat64$MH,"lstat64");
    }
    public static int lstat64 ( Addressable __file,  Addressable __buf) {
        var mh$ = lstat64$MH();
        try {
            return (int)mh$.invokeExact(__file, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$50.chmod$MH,"chmod");
    }
    public static int chmod ( Addressable __file,  int __mode) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$50.lchmod$MH,"lchmod");
    }
    public static int lchmod ( Addressable __file,  int __mode) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(__file, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$50.fchmod$MH,"fchmod");
    }
    public static int fchmod ( int __fd,  int __mode) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(__fd, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fchmodat$MH,"fchmodat");
    }
    public static int fchmodat ( int __fd,  Addressable __file,  int __mode,  int __flag) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __file, __mode, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$51.umask$MH,"umask");
    }
    public static int umask ( int __mask) {
        var mh$ = umask$MH();
        try {
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getumask$MH() {
        return RuntimeHelper.requireNonNull(constants$51.getumask$MH,"getumask");
    }
    public static int getumask () {
        var mh$ = getumask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mkdir$MH,"mkdir");
    }
    public static int mkdir ( Addressable __path,  int __mode) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mkdirat$MH,"mkdirat");
    }
    public static int mkdirat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$51.mknod$MH,"mknod");
    }
    public static int mknod ( Addressable __path,  int __mode,  long __dev) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mknodat$MH,"mknodat");
    }
    public static int mknodat ( int __fd,  Addressable __path,  int __mode,  long __dev) {
        var mh$ = mknodat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode, __dev);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mkfifo$MH,"mkfifo");
    }
    public static int mkfifo ( Addressable __path,  int __mode) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(__path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$52.mkfifoat$MH,"mkfifoat");
    }
    public static int mkfifoat ( int __fd,  Addressable __path,  int __mode) {
        var mh$ = mkfifoat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$52.utimensat$MH,"utimensat");
    }
    public static int utimensat ( int __fd,  Addressable __path,  Addressable __times,  int __flags) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$52.futimens$MH,"futimens");
    }
    public static int futimens ( int __fd,  Addressable __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statx$MH() {
        return RuntimeHelper.requireNonNull(constants$52.statx$MH,"statx");
    }
    public static int statx ( int __dirfd,  Addressable __path,  int __flags,  int __mask,  Addressable __buf) {
        var mh$ = statx$MH();
        try {
            return (int)mh$.invokeExact(__dirfd, __path, __flags, __mask, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readv$MH() {
        return RuntimeHelper.requireNonNull(constants$53.readv$MH,"readv");
    }
    public static long readv ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = readv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle writev$MH() {
        return RuntimeHelper.requireNonNull(constants$53.writev$MH,"writev");
    }
    public static long writev ( int __fd,  Addressable __iovec,  int __count) {
        var mh$ = writev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv$MH() {
        return RuntimeHelper.requireNonNull(constants$53.preadv$MH,"preadv");
    }
    public static long preadv ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = preadv$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev$MH() {
        return RuntimeHelper.requireNonNull(constants$53.pwritev$MH,"pwritev");
    }
    public static long pwritev ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = pwritev$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv64$MH() {
        return RuntimeHelper.requireNonNull(constants$53.preadv64$MH,"preadv64");
    }
    public static long preadv64 ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = preadv64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev64$MH() {
        return RuntimeHelper.requireNonNull(constants$53.pwritev64$MH,"pwritev64");
    }
    public static long pwritev64 ( int __fd,  Addressable __iovec,  int __count,  long __offset) {
        var mh$ = pwritev64$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iovec, __count, __offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.preadv2$MH,"preadv2");
    }
    public static long preadv2 ( int __fp,  Addressable __iovec,  int __count,  long __offset,  int ___flags) {
        var mh$ = preadv2$MH();
        try {
            return (long)mh$.invokeExact(__fp, __iovec, __count, __offset, ___flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.pwritev2$MH,"pwritev2");
    }
    public static long pwritev2 ( int __fd,  Addressable __iodev,  int __count,  long __offset,  int __flags) {
        var mh$ = pwritev2$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iodev, __count, __offset, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle preadv64v2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.preadv64v2$MH,"preadv64v2");
    }
    public static long preadv64v2 ( int __fp,  Addressable __iovec,  int __count,  long __offset,  int ___flags) {
        var mh$ = preadv64v2$MH();
        try {
            return (long)mh$.invokeExact(__fp, __iovec, __count, __offset, ___flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pwritev64v2$MH() {
        return RuntimeHelper.requireNonNull(constants$54.pwritev64v2$MH,"pwritev64v2");
    }
    public static long pwritev64v2 ( int __fd,  Addressable __iodev,  int __count,  long __offset,  int __flags) {
        var mh$ = pwritev64v2$MH();
        try {
            return (long)mh$.invokeExact(__fd, __iodev, __count, __offset, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle process_vm_readv$MH() {
        return RuntimeHelper.requireNonNull(constants$54.process_vm_readv$MH,"process_vm_readv");
    }
    public static long process_vm_readv ( int __pid,  Addressable __lvec,  long __liovcnt,  Addressable __rvec,  long __riovcnt,  long __flags) {
        var mh$ = process_vm_readv$MH();
        try {
            return (long)mh$.invokeExact(__pid, __lvec, __liovcnt, __rvec, __riovcnt, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle process_vm_writev$MH() {
        return RuntimeHelper.requireNonNull(constants$54.process_vm_writev$MH,"process_vm_writev");
    }
    public static long process_vm_writev ( int __pid,  Addressable __lvec,  long __liovcnt,  Addressable __rvec,  long __riovcnt,  long __flags) {
        var mh$ = process_vm_writev$MH();
        try {
            return (long)mh$.invokeExact(__pid, __lvec, __liovcnt, __rvec, __riovcnt, __flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$55.clock_adjtime$MH,"clock_adjtime");
    }
    public static int clock_adjtime ( int __clock_id,  Addressable __utx) {
        var mh$ = clock_adjtime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __utx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$55.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$55.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$55.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$55.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$55.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime$MH() {
        return RuntimeHelper.requireNonNull(constants$56.strptime$MH,"strptime");
    }
    public static MemoryAddress strptime ( Addressable __s,  Addressable __fmt,  Addressable __tp) {
        var mh$ = strptime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __fmt, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$56.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$56.strptime_l$MH,"strptime_l");
    }
    public static MemoryAddress strptime_l ( Addressable __s,  Addressable __fmt,  Addressable __tp,  Addressable __loc) {
        var mh$ = strptime_l$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__s, __fmt, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$56.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$56.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$56.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$57.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$57.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$57.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$58.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$58.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$58.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$58.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$58.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$58.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$58.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$58.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$58.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$58.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$58.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$58.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$58.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$58.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$58.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$58.daylight$VH.get(RuntimeHelper.requireNonNull(constants$58.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$58.daylight$VH.set(RuntimeHelper.requireNonNull(constants$58.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$58.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$58.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$58.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$58.timezone$VH.get(RuntimeHelper.requireNonNull(constants$58.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$58.timezone$VH.set(RuntimeHelper.requireNonNull(constants$58.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$59.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$59.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$59.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$59.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$59.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$60.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$60.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$60.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$60.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$61.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$61.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$61.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$61.timespec_getres$MH,"timespec_getres");
    }
    public static int timespec_getres ( Addressable __ts,  int __base) {
        var mh$ = timespec_getres$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout getdate_err$LAYOUT() {
        return constants$61.getdate_err$LAYOUT;
    }
    public static VarHandle getdate_err$VH() {
        return constants$61.getdate_err$VH;
    }
    public static MemorySegment getdate_err$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.getdate_err$SEGMENT,"getdate_err");
    }
    public static int getdate_err$get() {
        return (int) constants$61.getdate_err$VH.get(RuntimeHelper.requireNonNull(constants$61.getdate_err$SEGMENT, "getdate_err"));
    }
    public static void getdate_err$set( int x) {
        constants$61.getdate_err$VH.set(RuntimeHelper.requireNonNull(constants$61.getdate_err$SEGMENT, "getdate_err"), x);
    }
    public static MethodHandle getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$61.getdate$MH,"getdate");
    }
    public static MemoryAddress getdate ( Addressable __string) {
        var mh$ = getdate$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$62.getdate_r$MH,"getdate_r");
    }
    public static int getdate_r ( Addressable __string,  Addressable __resbufp) {
        var mh$ = getdate_r$MH();
        try {
            return (int)mh$.invokeExact(__string, __resbufp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_get_probe_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$62.io_uring_get_probe_ring$MH,"io_uring_get_probe_ring");
    }
    public static MemoryAddress io_uring_get_probe_ring ( Addressable ring) {
        var mh$ = io_uring_get_probe_ring$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_get_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$62.io_uring_get_probe$MH,"io_uring_get_probe");
    }
    public static MemoryAddress io_uring_get_probe () {
        var mh$ = io_uring_get_probe$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_free_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$62.io_uring_free_probe$MH,"io_uring_free_probe");
    }
    public static void io_uring_free_probe ( Addressable probe) {
        var mh$ = io_uring_free_probe$MH();
        try {
            mh$.invokeExact(probe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_opcode_supported$MH() {
        return RuntimeHelper.requireNonNull(constants$62.io_uring_opcode_supported$MH,"io_uring_opcode_supported");
    }
    public static int io_uring_opcode_supported ( Addressable p,  int op) {
        var mh$ = io_uring_opcode_supported$MH();
        try {
            return (int)mh$.invokeExact(p, op);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_init_params$MH() {
        return RuntimeHelper.requireNonNull(constants$62.io_uring_queue_init_params$MH,"io_uring_queue_init_params");
    }
    public static int io_uring_queue_init_params ( int entries,  Addressable ring,  Addressable p) {
        var mh$ = io_uring_queue_init_params$MH();
        try {
            return (int)mh$.invokeExact(entries, ring, p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_init$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_queue_init$MH,"io_uring_queue_init");
    }
    public static int io_uring_queue_init ( int entries,  Addressable ring,  int flags) {
        var mh$ = io_uring_queue_init$MH();
        try {
            return (int)mh$.invokeExact(entries, ring, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_mmap$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_queue_mmap$MH,"io_uring_queue_mmap");
    }
    public static int io_uring_queue_mmap ( int fd,  Addressable p,  Addressable ring) {
        var mh$ = io_uring_queue_mmap$MH();
        try {
            return (int)mh$.invokeExact(fd, p, ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_ring_dontfork$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_ring_dontfork$MH,"io_uring_ring_dontfork");
    }
    public static int io_uring_ring_dontfork ( Addressable ring) {
        var mh$ = io_uring_ring_dontfork$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_queue_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_queue_exit$MH,"io_uring_queue_exit");
    }
    public static void io_uring_queue_exit ( Addressable ring) {
        var mh$ = io_uring_queue_exit$MH();
        try {
            mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_peek_batch_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_peek_batch_cqe$MH,"io_uring_peek_batch_cqe");
    }
    public static int io_uring_peek_batch_cqe ( Addressable ring,  Addressable cqes,  int count) {
        var mh$ = io_uring_peek_batch_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqes, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqes$MH() {
        return RuntimeHelper.requireNonNull(constants$63.io_uring_wait_cqes$MH,"io_uring_wait_cqes");
    }
    public static int io_uring_wait_cqes ( Addressable ring,  Addressable cqe_ptr,  int wait_nr,  Addressable ts,  Addressable sigmask) {
        var mh$ = io_uring_wait_cqes$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, wait_nr, ts, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_wait_cqe_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_wait_cqe_timeout$MH,"io_uring_wait_cqe_timeout");
    }
    public static int io_uring_wait_cqe_timeout ( Addressable ring,  Addressable cqe_ptr,  Addressable ts) {
        var mh$ = io_uring_wait_cqe_timeout$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, ts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_submit$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_submit$MH,"io_uring_submit");
    }
    public static int io_uring_submit ( Addressable ring) {
        var mh$ = io_uring_submit$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_submit_and_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_submit_and_wait$MH,"io_uring_submit_and_wait");
    }
    public static int io_uring_submit_and_wait ( Addressable ring,  int wait_nr) {
        var mh$ = io_uring_submit_and_wait$MH();
        try {
            return (int)mh$.invokeExact(ring, wait_nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_submit_and_wait_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_submit_and_wait_timeout$MH,"io_uring_submit_and_wait_timeout");
    }
    public static int io_uring_submit_and_wait_timeout ( Addressable ring,  Addressable cqe_ptr,  int wait_nr,  Addressable ts,  Addressable sigmask) {
        var mh$ = io_uring_submit_and_wait_timeout$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, wait_nr, ts, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_register_buffers$MH,"io_uring_register_buffers");
    }
    public static int io_uring_register_buffers ( Addressable ring,  Addressable iovecs,  int nr_iovecs) {
        var mh$ = io_uring_register_buffers$MH();
        try {
            return (int)mh$.invokeExact(ring, iovecs, nr_iovecs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buffers_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$64.io_uring_register_buffers_tags$MH,"io_uring_register_buffers_tags");
    }
    public static int io_uring_register_buffers_tags ( Addressable ring,  Addressable iovecs,  Addressable tags,  int nr) {
        var mh$ = io_uring_register_buffers_tags$MH();
        try {
            return (int)mh$.invokeExact(ring, iovecs, tags, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buffers_sparse$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_register_buffers_sparse$MH,"io_uring_register_buffers_sparse");
    }
    public static int io_uring_register_buffers_sparse ( Addressable ring,  int nr) {
        var mh$ = io_uring_register_buffers_sparse$MH();
        try {
            return (int)mh$.invokeExact(ring, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buffers_update_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_register_buffers_update_tag$MH,"io_uring_register_buffers_update_tag");
    }
    public static int io_uring_register_buffers_update_tag ( Addressable ring,  int off,  Addressable iovecs,  Addressable tags,  int nr) {
        var mh$ = io_uring_register_buffers_update_tag$MH();
        try {
            return (int)mh$.invokeExact(ring, off, iovecs, tags, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_buffers$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_unregister_buffers$MH,"io_uring_unregister_buffers");
    }
    public static int io_uring_unregister_buffers ( Addressable ring) {
        var mh$ = io_uring_unregister_buffers$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_register_files$MH,"io_uring_register_files");
    }
    public static int io_uring_register_files ( Addressable ring,  Addressable files,  int nr_files) {
        var mh$ = io_uring_register_files$MH();
        try {
            return (int)mh$.invokeExact(ring, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files_tags$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_register_files_tags$MH,"io_uring_register_files_tags");
    }
    public static int io_uring_register_files_tags ( Addressable ring,  Addressable files,  Addressable tags,  int nr) {
        var mh$ = io_uring_register_files_tags$MH();
        try {
            return (int)mh$.invokeExact(ring, files, tags, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files_sparse$MH() {
        return RuntimeHelper.requireNonNull(constants$65.io_uring_register_files_sparse$MH,"io_uring_register_files_sparse");
    }
    public static int io_uring_register_files_sparse ( Addressable ring,  int nr) {
        var mh$ = io_uring_register_files_sparse$MH();
        try {
            return (int)mh$.invokeExact(ring, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files_update_tag$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_register_files_update_tag$MH,"io_uring_register_files_update_tag");
    }
    public static int io_uring_register_files_update_tag ( Addressable ring,  int off,  Addressable files,  Addressable tags,  int nr_files) {
        var mh$ = io_uring_register_files_update_tag$MH();
        try {
            return (int)mh$.invokeExact(ring, off, files, tags, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_files$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_unregister_files$MH,"io_uring_unregister_files");
    }
    public static int io_uring_unregister_files ( Addressable ring) {
        var mh$ = io_uring_unregister_files$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_files_update$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_register_files_update$MH,"io_uring_register_files_update");
    }
    public static int io_uring_register_files_update ( Addressable ring,  int off,  Addressable files,  int nr_files) {
        var mh$ = io_uring_register_files_update$MH();
        try {
            return (int)mh$.invokeExact(ring, off, files, nr_files);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_register_eventfd$MH,"io_uring_register_eventfd");
    }
    public static int io_uring_register_eventfd ( Addressable ring,  int fd) {
        var mh$ = io_uring_register_eventfd$MH();
        try {
            return (int)mh$.invokeExact(ring, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_eventfd_async$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_register_eventfd_async$MH,"io_uring_register_eventfd_async");
    }
    public static int io_uring_register_eventfd_async ( Addressable ring,  int fd) {
        var mh$ = io_uring_register_eventfd_async$MH();
        try {
            return (int)mh$.invokeExact(ring, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_eventfd$MH() {
        return RuntimeHelper.requireNonNull(constants$66.io_uring_unregister_eventfd$MH,"io_uring_unregister_eventfd");
    }
    public static int io_uring_unregister_eventfd ( Addressable ring) {
        var mh$ = io_uring_unregister_eventfd$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_probe$MH() {
        return RuntimeHelper.requireNonNull(constants$67.io_uring_register_probe$MH,"io_uring_register_probe");
    }
    public static int io_uring_register_probe ( Addressable ring,  Addressable p,  int nr) {
        var mh$ = io_uring_register_probe$MH();
        try {
            return (int)mh$.invokeExact(ring, p, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_personality$MH() {
        return RuntimeHelper.requireNonNull(constants$67.io_uring_register_personality$MH,"io_uring_register_personality");
    }
    public static int io_uring_register_personality ( Addressable ring) {
        var mh$ = io_uring_register_personality$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_personality$MH() {
        return RuntimeHelper.requireNonNull(constants$67.io_uring_unregister_personality$MH,"io_uring_unregister_personality");
    }
    public static int io_uring_unregister_personality ( Addressable ring,  int id) {
        var mh$ = io_uring_unregister_personality$MH();
        try {
            return (int)mh$.invokeExact(ring, id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_restrictions$MH() {
        return RuntimeHelper.requireNonNull(constants$67.io_uring_register_restrictions$MH,"io_uring_register_restrictions");
    }
    public static int io_uring_register_restrictions ( Addressable ring,  Addressable res,  int nr_res) {
        var mh$ = io_uring_register_restrictions$MH();
        try {
            return (int)mh$.invokeExact(ring, res, nr_res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_enable_rings$MH() {
        return RuntimeHelper.requireNonNull(constants$67.io_uring_enable_rings$MH,"io_uring_enable_rings");
    }
    public static int io_uring_enable_rings ( Addressable ring) {
        var mh$ = io_uring_enable_rings$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_sqring_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$67.__io_uring_sqring_wait$MH,"__io_uring_sqring_wait");
    }
    public static int __io_uring_sqring_wait ( Addressable ring) {
        var mh$ = __io_uring_sqring_wait$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_iowq_aff$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_register_iowq_aff$MH,"io_uring_register_iowq_aff");
    }
    public static int io_uring_register_iowq_aff ( Addressable ring,  long cpusz,  Addressable mask) {
        var mh$ = io_uring_register_iowq_aff$MH();
        try {
            return (int)mh$.invokeExact(ring, cpusz, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_iowq_aff$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_unregister_iowq_aff$MH,"io_uring_unregister_iowq_aff");
    }
    public static int io_uring_unregister_iowq_aff ( Addressable ring) {
        var mh$ = io_uring_unregister_iowq_aff$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_iowq_max_workers$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_register_iowq_max_workers$MH,"io_uring_register_iowq_max_workers");
    }
    public static int io_uring_register_iowq_max_workers ( Addressable ring,  Addressable values) {
        var mh$ = io_uring_register_iowq_max_workers$MH();
        try {
            return (int)mh$.invokeExact(ring, values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_ring_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_register_ring_fd$MH,"io_uring_register_ring_fd");
    }
    public static int io_uring_register_ring_fd ( Addressable ring) {
        var mh$ = io_uring_register_ring_fd$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_ring_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_unregister_ring_fd$MH,"io_uring_unregister_ring_fd");
    }
    public static int io_uring_unregister_ring_fd ( Addressable ring) {
        var mh$ = io_uring_unregister_ring_fd$MH();
        try {
            return (int)mh$.invokeExact(ring);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_register_buf_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$68.io_uring_register_buf_ring$MH,"io_uring_register_buf_ring");
    }
    public static int io_uring_register_buf_ring ( Addressable ring,  Addressable reg,  int flags) {
        var mh$ = io_uring_register_buf_ring$MH();
        try {
            return (int)mh$.invokeExact(ring, reg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_unregister_buf_ring$MH() {
        return RuntimeHelper.requireNonNull(constants$69.io_uring_unregister_buf_ring$MH,"io_uring_unregister_buf_ring");
    }
    public static int io_uring_unregister_buf_ring ( Addressable ring,  int bgid) {
        var mh$ = io_uring_unregister_buf_ring$MH();
        try {
            return (int)mh$.invokeExact(ring, bgid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_get_cqe$MH() {
        return RuntimeHelper.requireNonNull(constants$69.__io_uring_get_cqe$MH,"__io_uring_get_cqe");
    }
    public static int __io_uring_get_cqe ( Addressable ring,  Addressable cqe_ptr,  int submit,  int wait_nr,  Addressable sigmask) {
        var mh$ = __io_uring_get_cqe$MH();
        try {
            return (int)mh$.invokeExact(ring, cqe_ptr, submit, wait_nr, sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cq_advance$MH() {
        return RuntimeHelper.requireNonNull(constants$69.io_uring_cq_advance$MH,"io_uring_cq_advance");
    }
    public static void io_uring_cq_advance ( Addressable ring,  int nr) {
        var mh$ = io_uring_cq_advance$MH();
        try {
            mh$.invokeExact(ring, nr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cqe_seen$MH() {
        return RuntimeHelper.requireNonNull(constants$69.io_uring_cqe_seen$MH,"io_uring_cqe_seen");
    }
    public static void io_uring_cqe_seen ( Addressable ring,  Addressable cqe) {
        var mh$ = io_uring_cqe_seen$MH();
        try {
            mh$.invokeExact(ring, cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqe_set_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.io_uring_sqe_set_data$MH,"io_uring_sqe_set_data");
    }
    public static void io_uring_sqe_set_data ( Addressable sqe,  Addressable data) {
        var mh$ = io_uring_sqe_set_data$MH();
        try {
            mh$.invokeExact(sqe, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cqe_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$69.io_uring_cqe_get_data$MH,"io_uring_cqe_get_data");
    }
    public static MemoryAddress io_uring_cqe_get_data ( Addressable cqe) {
        var mh$ = io_uring_cqe_get_data$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqe_set_data64$MH() {
        return RuntimeHelper.requireNonNull(constants$70.io_uring_sqe_set_data64$MH,"io_uring_sqe_set_data64");
    }
    public static void io_uring_sqe_set_data64 ( Addressable sqe,  long data) {
        var mh$ = io_uring_sqe_set_data64$MH();
        try {
            mh$.invokeExact(sqe, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_cqe_get_data64$MH() {
        return RuntimeHelper.requireNonNull(constants$70.io_uring_cqe_get_data64$MH,"io_uring_cqe_get_data64");
    }
    public static long io_uring_cqe_get_data64 ( Addressable cqe) {
        var mh$ = io_uring_cqe_get_data64$MH();
        try {
            return (long)mh$.invokeExact(cqe);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_sqe_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$70.io_uring_sqe_set_flags$MH,"io_uring_sqe_set_flags");
    }
    public static void io_uring_sqe_set_flags ( Addressable sqe,  int flags) {
        var mh$ = io_uring_sqe_set_flags$MH();
        try {
            mh$.invokeExact(sqe, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_set_target_fixed_file$MH() {
        return RuntimeHelper.requireNonNull(constants$70.__io_uring_set_target_fixed_file$MH,"__io_uring_set_target_fixed_file");
    }
    public static void __io_uring_set_target_fixed_file ( Addressable sqe,  int file_index) {
        var mh$ = __io_uring_set_target_fixed_file$MH();
        try {
            mh$.invokeExact(sqe, file_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_rw$MH() {
        return RuntimeHelper.requireNonNull(constants$70.io_uring_prep_rw$MH,"io_uring_prep_rw");
    }
    public static void io_uring_prep_rw ( int op,  Addressable sqe,  int fd,  Addressable addr,  int len,  long offset) {
        var mh$ = io_uring_prep_rw$MH();
        try {
            mh$.invokeExact(op, sqe, fd, addr, len, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_splice$MH() {
        return RuntimeHelper.requireNonNull(constants$70.io_uring_prep_splice$MH,"io_uring_prep_splice");
    }
    public static void io_uring_prep_splice ( Addressable sqe,  int fd_in,  long off_in,  int fd_out,  long off_out,  int nbytes,  int splice_flags) {
        var mh$ = io_uring_prep_splice$MH();
        try {
            mh$.invokeExact(sqe, fd_in, off_in, fd_out, off_out, nbytes, splice_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_tee$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_tee$MH,"io_uring_prep_tee");
    }
    public static void io_uring_prep_tee ( Addressable sqe,  int fd_in,  int fd_out,  int nbytes,  int splice_flags) {
        var mh$ = io_uring_prep_tee$MH();
        try {
            mh$.invokeExact(sqe, fd_in, fd_out, nbytes, splice_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_readv$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_readv$MH,"io_uring_prep_readv");
    }
    public static void io_uring_prep_readv ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset) {
        var mh$ = io_uring_prep_readv$MH();
        try {
            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_readv2$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_readv2$MH,"io_uring_prep_readv2");
    }
    public static void io_uring_prep_readv2 ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset,  int flags) {
        var mh$ = io_uring_prep_readv2$MH();
        try {
            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_read_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_read_fixed$MH,"io_uring_prep_read_fixed");
    }
    public static void io_uring_prep_read_fixed ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset,  int buf_index) {
        var mh$ = io_uring_prep_read_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_writev$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_writev$MH,"io_uring_prep_writev");
    }
    public static void io_uring_prep_writev ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset) {
        var mh$ = io_uring_prep_writev$MH();
        try {
            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_writev2$MH() {
        return RuntimeHelper.requireNonNull(constants$71.io_uring_prep_writev2$MH,"io_uring_prep_writev2");
    }
    public static void io_uring_prep_writev2 ( Addressable sqe,  int fd,  Addressable iovecs,  int nr_vecs,  long offset,  int flags) {
        var mh$ = io_uring_prep_writev2$MH();
        try {
            mh$.invokeExact(sqe, fd, iovecs, nr_vecs, offset, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_write_fixed$MH() {
        return RuntimeHelper.requireNonNull(constants$72.io_uring_prep_write_fixed$MH,"io_uring_prep_write_fixed");
    }
    public static void io_uring_prep_write_fixed ( Addressable sqe,  int fd,  Addressable buf,  int nbytes,  long offset,  int buf_index) {
        var mh$ = io_uring_prep_write_fixed$MH();
        try {
            mh$.invokeExact(sqe, fd, buf, nbytes, offset, buf_index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_recvmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$72.io_uring_prep_recvmsg$MH,"io_uring_prep_recvmsg");
    }
    public static void io_uring_prep_recvmsg ( Addressable sqe,  int fd,  Addressable msg,  int flags) {
        var mh$ = io_uring_prep_recvmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_sendmsg$MH() {
        return RuntimeHelper.requireNonNull(constants$72.io_uring_prep_sendmsg$MH,"io_uring_prep_sendmsg");
    }
    public static void io_uring_prep_sendmsg ( Addressable sqe,  int fd,  Addressable msg,  int flags) {
        var mh$ = io_uring_prep_sendmsg$MH();
        try {
            mh$.invokeExact(sqe, fd, msg, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __io_uring_prep_poll_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$72.__io_uring_prep_poll_mask$MH,"__io_uring_prep_poll_mask");
    }
    public static int __io_uring_prep_poll_mask ( int poll_mask) {
        var mh$ = __io_uring_prep_poll_mask$MH();
        try {
            return (int)mh$.invokeExact(poll_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_poll_add$MH() {
        return RuntimeHelper.requireNonNull(constants$72.io_uring_prep_poll_add$MH,"io_uring_prep_poll_add");
    }
    public static void io_uring_prep_poll_add ( Addressable sqe,  int fd,  int poll_mask) {
        var mh$ = io_uring_prep_poll_add$MH();
        try {
            mh$.invokeExact(sqe, fd, poll_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle io_uring_prep_poll_multishot$MH() {
        return RuntimeHelper.requireNonNull(constants$72.io_uring_prep_poll_multishot$MH,"io_uring_prep_poll_multishot");
    }
    public static void io_uring_prep_poll_multishot ( Addressable sqe,  int fd,  int poll_mask) {
        var mh$ = io_uring_prep_poll_multishot$MH();
        try {
            mh$.invokeExact(sqe, fd, poll_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


