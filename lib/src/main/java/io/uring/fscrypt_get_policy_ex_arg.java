// Generated by jextract

package io.uring;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class fscrypt_get_policy_ex_arg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("policy_size"),
        MemoryLayout.unionLayout(
            Constants$root.C_CHAR$LAYOUT.withName("version"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("version"),
                Constants$root.C_CHAR$LAYOUT.withName("contents_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("filenames_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("master_key_descriptor")
            ).withName("v1"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("version"),
                Constants$root.C_CHAR$LAYOUT.withName("contents_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("filenames_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("__reserved"),
                MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("master_key_identifier")
            ).withName("v2")
        ).withName("policy")
    ).withName("fscrypt_get_policy_ex_arg");
    public static MemoryLayout $LAYOUT() {
        return fscrypt_get_policy_ex_arg.$struct$LAYOUT;
    }
    static final VarHandle policy_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("policy_size"));
    public static VarHandle policy_size$VH() {
        return fscrypt_get_policy_ex_arg.policy_size$VH;
    }
    public static long policy_size$get(MemorySegment seg) {
        return (long)fscrypt_get_policy_ex_arg.policy_size$VH.get(seg);
    }
    public static void policy_size$set( MemorySegment seg, long x) {
        fscrypt_get_policy_ex_arg.policy_size$VH.set(seg, x);
    }
    public static long policy_size$get(MemorySegment seg, long index) {
        return (long)fscrypt_get_policy_ex_arg.policy_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void policy_size$set(MemorySegment seg, long index, long x) {
        fscrypt_get_policy_ex_arg.policy_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class policy {

        static final  GroupLayout policy$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_CHAR$LAYOUT.withName("version"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("version"),
                Constants$root.C_CHAR$LAYOUT.withName("contents_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("filenames_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("master_key_descriptor")
            ).withName("v1"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("version"),
                Constants$root.C_CHAR$LAYOUT.withName("contents_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("filenames_encryption_mode"),
                Constants$root.C_CHAR$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("__reserved"),
                MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("master_key_identifier")
            ).withName("v2")
        );
        public static MemoryLayout $LAYOUT() {
            return policy.policy$union$LAYOUT;
        }
        static final VarHandle version$VH = policy$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("version"));
        public static VarHandle version$VH() {
            return policy.version$VH;
        }
        public static byte version$get(MemorySegment seg) {
            return (byte)policy.version$VH.get(seg);
        }
        public static void version$set( MemorySegment seg, byte x) {
            policy.version$VH.set(seg, x);
        }
        public static byte version$get(MemorySegment seg, long index) {
            return (byte)policy.version$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void version$set(MemorySegment seg, long index, byte x) {
            policy.version$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment v1$slice(MemorySegment seg) {
            return seg.asSlice(0, 12);
        }
        public static MemorySegment v2$slice(MemorySegment seg) {
            return seg.asSlice(0, 24);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment policy$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


