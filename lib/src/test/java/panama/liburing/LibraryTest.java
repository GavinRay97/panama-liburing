/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package panama.liburing;

import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.MemorySession;
import java.lang.foreign.SegmentAllocator;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class IoUringExample {

    private static MemorySession session = MemorySession.global();

    private static int QUEUE_DEPTH = 1;

    /**
     * Simple app that demonstrates how to setup an io_uring interface,
     * submit and complete IO against it, and then tear it down.
     */
    public static void run() {
        SegmentAllocator allocator = SegmentAllocator.newNativeArena(session);

        MemorySegment ring = io.uring.io_uring.allocate(allocator);
        int ret = io.uring.liburing_h.io_uring_queue_init(QUEUE_DEPTH, ring, 0);
        if (ret < 0) {
            throw new RuntimeException("io_uring_queue_init failed");
        }

        MemoryAddress sqe = io.uring.liburing_h.io_uring_get_sqe(ring);
        if (sqe == null) {
            throw new RuntimeException("io_uring_get_sqe failed");
        }

        // ERROR HERE:
        //
        // java.lang.UnsatisfiedLinkError: unresolved symbol: io_uring_prep_rw
        //
        // Equivalent to: io_uring_prep_nop(sqe);
        io.uring.liburing_h.io_uring_prep_rw(/* op */ io.uring.liburing_h.IORING_OP_NOP(),
                /* sqe */ sqe, /* fd */ 0, /* addr */ MemoryAddress.NULL, /* len */ 0, /* offset */ 0);

        ret = io.uring.liburing_h.io_uring_submit(ring);
        if (ret < 0) {
            throw new RuntimeException("io_uring_submit failed");
        }

        ret = io.uring.liburing_h.io_uring_wait_cqe(ring, null);
        if (ret < 0) {
            throw new RuntimeException("io_uring_wait_cqe failed");
        }

        io.uring.liburing_h.io_uring_cqe_seen(ring, null);
        io.uring.liburing_h.io_uring_queue_exit(ring);

        System.out.println("io_uring test complete");
    }

}

class LibraryTest {

    @Test
    void test() {
        Assertions.assertDoesNotThrow(IoUringExample::run);
    }
}
